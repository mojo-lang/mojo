// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.

package {{.Java.PackageName}}.service;

import io.grpc.stub.StreamObserver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Map;

import org.mojolang.mojo.core.FieldMasks;
import org.mojolang.mojo.core.Null;
import org.mojolang.mojo.core.Objects;
import org.mojolang.mojo.core.Orderings;
import org.mojolang.mojo.core.Pagination;
import org.mojolang.mojo.core.Result;
import {{.Java.PackageName}}.*;
import {{.Java.ServicePackageName}}.*;
import {{.Java.PackageName}}.service.{{ToCamel .Interface.Name}}Impl;

@Service
public class {{ToCamel .Interface.BaredName}}HttpImpl implements {{ToCamel .Interface.BaredName}}Http {
    private static final Logger LOGGER = LoggerFactory.getLogger({{ToCamel .Interface.BaredName}}HttpImpl.class);

    @Autowired
    private {{ToCamel .Interface.BaredName}}Impl {{ToLowerCamel .Interface.BaredName}}Impl;

    {{range $m := $.Interface.Methods}}
    @Override
    public {{$m.Response.Java.Name}} {{ToLowerCamel $m.Name}}({{range $i, $f := $m.Request.Fields}}{{if gt $i 0}}, {{end}}{{$f.Type.Java.Name}} {{ToLowerCamel $f.Name}}{{end}}) {
        class {{ToCamel $m.Name}}Callback implements StreamObserver<{{$m.Response.Java.GRpcName}}> {
            public {{$m.Response.Java.Name}} response;

            @Override
            public void onNext({{if $m.Response.Java.IsPagination}}{{$m.Response.Name}}{{else}}{{$m.Response.Java.GRpcName}}{{end}} value) {
                {{if not $m.Response.Java.IsPagination}}this.response.setData({{if $m.Response.Java.NeedConvert}}{{$m.Response.Java.GRpc2HttpConvert}}(value){{else}}value{{end}});{{else}}this.response.setData({{if $m.Response.GetFirstFields.Type.Java.NeedConvert}}{{$m.Response.GetFirstFields.Type.Java.GRpc2HttpConvert}}(value.get{{ToCamel $m.Response.GetFirstFields.Name}}List()){{else}}value.get{{ToCamel $m.Response.GetFirstFields.Name}}List(){{end}});
                this.response.setTotalCount(value.getTotalCount());
                this.response.setNextPageToken(value.getNextPageToken());
                {{end}}
            }

            @Override
            public void onError(Throwable cause) {
                LOGGER.error("Error occurred, cause {}", cause.getMessage());
            }

            @Override
            public void onCompleted() {
                LOGGER.info("Stream completed");
            }
        }

        {{$m.Request.Name}} req = {{$m.Request.Name}}.newBuilder()
                {{range $f := $m.Request.Fields}}.{{if $f.Type.IsArray}}addAll{{else}}set{{end}}{{ToCamel $f.Name}}({{if $f.Type.Java.NeedConvert}}{{$f.Type.Java.Http2GrpcConvert}}({{ToLowerCamel $f.Name}}){{else}}{{ToLowerCamel $f.Name}}{{end}})
                {{end}}.build();
        {{ToCamel $m.Name}}Callback callback = new {{ToCamel $m.Name}}Callback();
        {{ToLowerCamel $.Interface.BaredName}}Impl.{{ToLowerCamel $m.Name}}(req, callback);
        return callback.response;
    }
    {{end}}
}
