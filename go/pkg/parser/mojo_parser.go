// Code generated from MojoParser.g4 by ANTLR 4.8. DO NOT EDIT.

package parser // MojoParser

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 86, 2192,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 3, 2, 7, 2, 334, 10, 2, 12, 2, 14, 2, 337, 11,
	2, 3, 2, 5, 2, 340, 10, 2, 3, 2, 7, 2, 343, 10, 2, 12, 2, 14, 2, 346, 11,
	2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 355, 10, 3, 3, 4, 3,
	4, 3, 4, 7, 4, 360, 10, 4, 12, 4, 14, 4, 363, 11, 4, 3, 4, 3, 4, 7, 4,
	367, 10, 4, 12, 4, 14, 4, 370, 11, 4, 3, 4, 5, 4, 373, 10, 4, 3, 5, 3,
	5, 3, 5, 5, 5, 378, 10, 5, 3, 6, 3, 6, 3, 6, 7, 6, 383, 10, 6, 12, 6, 14,
	6, 386, 11, 6, 3, 6, 3, 6, 3, 6, 7, 6, 391, 10, 6, 12, 6, 14, 6, 394, 11,
	6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 7, 7, 401, 10, 7, 12, 7, 14, 7, 404, 11,
	7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 7, 8, 411, 10, 8, 12, 8, 14, 8, 414, 11,
	8, 3, 8, 3, 8, 7, 8, 418, 10, 8, 12, 8, 14, 8, 421, 11, 8, 3, 9, 3, 9,
	5, 9, 425, 10, 9, 3, 10, 3, 10, 3, 10, 7, 10, 430, 10, 10, 12, 10, 14,
	10, 433, 11, 10, 3, 10, 3, 10, 3, 11, 3, 11, 5, 11, 439, 10, 11, 3, 12,
	3, 12, 3, 12, 7, 12, 444, 10, 12, 12, 12, 14, 12, 447, 11, 12, 3, 12, 3,
	12, 7, 12, 451, 10, 12, 12, 12, 14, 12, 454, 11, 12, 3, 12, 5, 12, 457,
	10, 12, 3, 13, 3, 13, 7, 13, 461, 10, 13, 12, 13, 14, 13, 464, 11, 13,
	3, 13, 3, 13, 3, 13, 7, 13, 469, 10, 13, 12, 13, 14, 13, 472, 11, 13, 3,
	13, 5, 13, 475, 10, 13, 3, 14, 3, 14, 3, 14, 7, 14, 480, 10, 14, 12, 14,
	14, 14, 483, 11, 14, 3, 14, 3, 14, 7, 14, 487, 10, 14, 12, 14, 14, 14,
	490, 11, 14, 3, 14, 5, 14, 493, 10, 14, 3, 14, 7, 14, 496, 10, 14, 12,
	14, 14, 14, 499, 11, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 7, 15, 506,
	10, 15, 12, 15, 14, 15, 509, 11, 15, 3, 15, 3, 15, 7, 15, 513, 10, 15,
	12, 15, 14, 15, 516, 11, 15, 3, 15, 3, 15, 3, 16, 3, 16, 7, 16, 522, 10,
	16, 12, 16, 14, 16, 525, 11, 16, 3, 16, 3, 16, 7, 16, 529, 10, 16, 12,
	16, 14, 16, 532, 11, 16, 3, 16, 3, 16, 5, 16, 536, 10, 16, 3, 17, 3, 17,
	3, 17, 5, 17, 541, 10, 17, 3, 18, 3, 18, 3, 19, 3, 19, 3, 20, 3, 20, 5,
	20, 549, 10, 20, 3, 21, 3, 21, 7, 21, 553, 10, 21, 12, 21, 14, 21, 556,
	11, 21, 3, 21, 3, 21, 7, 21, 560, 10, 21, 12, 21, 14, 21, 563, 11, 21,
	3, 21, 3, 21, 3, 22, 3, 22, 3, 22, 7, 22, 570, 10, 22, 12, 22, 14, 22,
	573, 11, 22, 3, 22, 3, 22, 7, 22, 577, 10, 22, 12, 22, 14, 22, 580, 11,
	22, 3, 22, 5, 22, 583, 10, 22, 3, 23, 3, 23, 3, 23, 3, 23, 5, 23, 589,
	10, 23, 3, 24, 3, 24, 7, 24, 593, 10, 24, 12, 24, 14, 24, 596, 11, 24,
	3, 24, 3, 24, 7, 24, 600, 10, 24, 12, 24, 14, 24, 603, 11, 24, 3, 24, 3,
	24, 3, 25, 3, 25, 3, 25, 7, 25, 610, 10, 25, 12, 25, 14, 25, 613, 11, 25,
	3, 25, 3, 25, 7, 25, 617, 10, 25, 12, 25, 14, 25, 620, 11, 25, 3, 25, 3,
	25, 3, 26, 3, 26, 5, 26, 626, 10, 26, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 637, 10, 27, 3, 28, 3, 28, 7, 28, 641,
	10, 28, 12, 28, 14, 28, 644, 11, 28, 3, 28, 5, 28, 647, 10, 28, 3, 28,
	7, 28, 650, 10, 28, 12, 28, 14, 28, 653, 11, 28, 3, 28, 3, 28, 3, 29, 5,
	29, 658, 10, 29, 3, 29, 7, 29, 661, 10, 29, 12, 29, 14, 29, 664, 11, 29,
	3, 29, 5, 29, 667, 10, 29, 3, 29, 7, 29, 670, 10, 29, 12, 29, 14, 29, 673,
	11, 29, 3, 29, 3, 29, 3, 29, 7, 29, 678, 10, 29, 12, 29, 14, 29, 681, 11,
	29, 3, 29, 5, 29, 684, 10, 29, 3, 30, 3, 30, 3, 30, 7, 30, 689, 10, 30,
	12, 30, 14, 30, 692, 11, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	5, 31, 700, 10, 31, 3, 32, 3, 32, 3, 32, 7, 32, 705, 10, 32, 12, 32, 14,
	32, 708, 11, 32, 3, 33, 3, 33, 3, 34, 3, 34, 3, 34, 3, 35, 3, 35, 3, 35,
	3, 36, 3, 36, 3, 36, 5, 36, 721, 10, 36, 3, 37, 3, 37, 3, 37, 3, 38, 3,
	38, 3, 38, 7, 38, 729, 10, 38, 12, 38, 14, 38, 732, 11, 38, 3, 38, 3, 38,
	7, 38, 736, 10, 38, 12, 38, 14, 38, 739, 11, 38, 3, 38, 3, 38, 3, 39, 3,
	39, 5, 39, 745, 10, 39, 3, 39, 3, 39, 7, 39, 749, 10, 39, 12, 39, 14, 39,
	752, 11, 39, 3, 39, 3, 39, 5, 39, 756, 10, 39, 7, 39, 758, 10, 39, 12,
	39, 14, 39, 761, 11, 39, 3, 39, 5, 39, 764, 10, 39, 3, 40, 3, 40, 5, 40,
	768, 10, 40, 3, 41, 3, 41, 5, 41, 772, 10, 41, 3, 42, 5, 42, 775, 10, 42,
	3, 42, 7, 42, 778, 10, 42, 12, 42, 14, 42, 781, 11, 42, 3, 42, 5, 42, 784,
	10, 42, 3, 42, 7, 42, 787, 10, 42, 12, 42, 14, 42, 790, 11, 42, 3, 42,
	3, 42, 3, 42, 3, 43, 3, 43, 3, 43, 7, 43, 798, 10, 43, 12, 43, 14, 43,
	801, 11, 43, 3, 43, 3, 43, 7, 43, 805, 10, 43, 12, 43, 14, 43, 808, 11,
	43, 3, 43, 3, 43, 3, 43, 7, 43, 813, 10, 43, 12, 43, 14, 43, 816, 11, 43,
	3, 43, 7, 43, 819, 10, 43, 12, 43, 14, 43, 822, 11, 43, 3, 43, 3, 43, 5,
	43, 826, 10, 43, 3, 44, 3, 44, 5, 44, 830, 10, 44, 3, 45, 3, 45, 7, 45,
	834, 10, 45, 12, 45, 14, 45, 837, 11, 45, 3, 45, 3, 45, 3, 46, 3, 46, 3,
	46, 3, 46, 3, 46, 3, 46, 5, 46, 847, 10, 46, 3, 47, 5, 47, 850, 10, 47,
	3, 47, 7, 47, 853, 10, 47, 12, 47, 14, 47, 856, 11, 47, 3, 47, 5, 47, 859,
	10, 47, 3, 47, 7, 47, 862, 10, 47, 12, 47, 14, 47, 865, 11, 47, 3, 47,
	3, 47, 3, 47, 5, 47, 870, 10, 47, 3, 47, 7, 47, 873, 10, 47, 12, 47, 14,
	47, 876, 11, 47, 3, 47, 3, 47, 3, 48, 3, 48, 3, 49, 3, 49, 7, 49, 884,
	10, 49, 12, 49, 14, 49, 887, 11, 49, 3, 49, 3, 49, 3, 50, 3, 50, 3, 50,
	5, 50, 894, 10, 50, 3, 50, 3, 50, 7, 50, 898, 10, 50, 12, 50, 14, 50, 901,
	11, 50, 3, 50, 5, 50, 904, 10, 50, 3, 51, 5, 51, 907, 10, 51, 3, 51, 7,
	51, 910, 10, 51, 12, 51, 14, 51, 913, 11, 51, 3, 51, 5, 51, 916, 10, 51,
	3, 51, 7, 51, 919, 10, 51, 12, 51, 14, 51, 922, 11, 51, 3, 51, 3, 51, 3,
	52, 3, 52, 5, 52, 928, 10, 52, 3, 53, 3, 53, 7, 53, 932, 10, 53, 12, 53,
	14, 53, 935, 11, 53, 3, 53, 5, 53, 938, 10, 53, 3, 54, 3, 54, 3, 54, 3,
	54, 5, 54, 944, 10, 54, 3, 54, 3, 54, 5, 54, 948, 10, 54, 3, 54, 7, 54,
	951, 10, 54, 12, 54, 14, 54, 954, 11, 54, 3, 54, 5, 54, 957, 10, 54, 3,
	55, 3, 55, 7, 55, 961, 10, 55, 12, 55, 14, 55, 964, 11, 55, 3, 55, 5, 55,
	967, 10, 55, 3, 55, 7, 55, 970, 10, 55, 12, 55, 14, 55, 973, 11, 55, 3,
	55, 5, 55, 976, 10, 55, 3, 55, 7, 55, 979, 10, 55, 12, 55, 14, 55, 982,
	11, 55, 3, 55, 3, 55, 3, 56, 3, 56, 3, 56, 3, 56, 7, 56, 990, 10, 56, 12,
	56, 14, 56, 993, 11, 56, 3, 56, 3, 56, 7, 56, 997, 10, 56, 12, 56, 14,
	56, 1000, 11, 56, 3, 56, 3, 56, 5, 56, 1004, 10, 56, 3, 57, 3, 57, 3, 57,
	7, 57, 1009, 10, 57, 12, 57, 14, 57, 1012, 11, 57, 3, 57, 3, 57, 7, 57,
	1016, 10, 57, 12, 57, 14, 57, 1019, 11, 57, 3, 57, 5, 57, 1022, 10, 57,
	3, 58, 3, 58, 3, 58, 7, 58, 1027, 10, 58, 12, 58, 14, 58, 1030, 11, 58,
	3, 58, 5, 58, 1033, 10, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 1040,
	10, 58, 5, 58, 1042, 10, 58, 3, 59, 5, 59, 1045, 10, 59, 3, 59, 7, 59,
	1048, 10, 59, 12, 59, 14, 59, 1051, 11, 59, 3, 59, 5, 59, 1054, 10, 59,
	3, 59, 7, 59, 1057, 10, 59, 12, 59, 14, 59, 1060, 11, 59, 3, 59, 3, 59,
	3, 59, 5, 59, 1065, 10, 59, 3, 59, 7, 59, 1068, 10, 59, 12, 59, 14, 59,
	1071, 11, 59, 3, 59, 5, 59, 1074, 10, 59, 3, 59, 7, 59, 1077, 10, 59, 12,
	59, 14, 59, 1080, 11, 59, 3, 59, 3, 59, 3, 60, 3, 60, 7, 60, 1086, 10,
	60, 12, 60, 14, 60, 1089, 11, 60, 3, 60, 5, 60, 1092, 10, 60, 3, 60, 7,
	60, 1095, 10, 60, 12, 60, 14, 60, 1098, 11, 60, 3, 60, 5, 60, 1101, 10,
	60, 3, 60, 7, 60, 1104, 10, 60, 12, 60, 14, 60, 1107, 11, 60, 3, 60, 3,
	60, 3, 61, 3, 61, 3, 62, 3, 62, 3, 62, 7, 62, 1116, 10, 62, 12, 62, 14,
	62, 1119, 11, 62, 3, 62, 3, 62, 7, 62, 1123, 10, 62, 12, 62, 14, 62, 1126,
	11, 62, 3, 62, 5, 62, 1129, 10, 62, 3, 63, 5, 63, 1132, 10, 63, 3, 63,
	7, 63, 1135, 10, 63, 12, 63, 14, 63, 1138, 11, 63, 3, 63, 5, 63, 1141,
	10, 63, 3, 63, 7, 63, 1144, 10, 63, 12, 63, 14, 63, 1147, 11, 63, 3, 63,
	3, 63, 5, 63, 1151, 10, 63, 3, 63, 7, 63, 1154, 10, 63, 12, 63, 14, 63,
	1157, 11, 63, 3, 63, 5, 63, 1160, 10, 63, 3, 64, 5, 64, 1163, 10, 64, 3,
	64, 7, 64, 1166, 10, 64, 12, 64, 14, 64, 1169, 11, 64, 3, 64, 5, 64, 1172,
	10, 64, 3, 64, 7, 64, 1175, 10, 64, 12, 64, 14, 64, 1178, 11, 64, 3, 64,
	3, 64, 3, 64, 5, 64, 1183, 10, 64, 3, 64, 7, 64, 1186, 10, 64, 12, 64,
	14, 64, 1189, 11, 64, 3, 64, 5, 64, 1192, 10, 64, 3, 64, 7, 64, 1195, 10,
	64, 12, 64, 14, 64, 1198, 11, 64, 3, 64, 5, 64, 1201, 10, 64, 3, 65, 3,
	65, 3, 66, 3, 66, 7, 66, 1207, 10, 66, 12, 66, 14, 66, 1210, 11, 66, 3,
	66, 5, 66, 1213, 10, 66, 3, 66, 7, 66, 1216, 10, 66, 12, 66, 14, 66, 1219,
	11, 66, 3, 66, 5, 66, 1222, 10, 66, 3, 66, 7, 66, 1225, 10, 66, 12, 66,
	14, 66, 1228, 11, 66, 3, 66, 3, 66, 3, 67, 3, 67, 3, 67, 7, 67, 1235, 10,
	67, 12, 67, 14, 67, 1238, 11, 67, 3, 67, 3, 67, 7, 67, 1242, 10, 67, 12,
	67, 14, 67, 1245, 11, 67, 3, 67, 5, 67, 1248, 10, 67, 3, 68, 3, 68, 3,
	68, 3, 68, 3, 68, 5, 68, 1255, 10, 68, 3, 69, 5, 69, 1258, 10, 69, 3, 69,
	7, 69, 1261, 10, 69, 12, 69, 14, 69, 1264, 11, 69, 3, 69, 5, 69, 1267,
	10, 69, 3, 69, 7, 69, 1270, 10, 69, 12, 69, 14, 69, 1273, 11, 69, 3, 69,
	3, 69, 3, 69, 7, 69, 1278, 10, 69, 12, 69, 14, 69, 1281, 11, 69, 3, 69,
	5, 69, 1284, 10, 69, 3, 70, 5, 70, 1287, 10, 70, 3, 70, 7, 70, 1290, 10,
	70, 12, 70, 14, 70, 1293, 11, 70, 3, 70, 5, 70, 1296, 10, 70, 3, 70, 7,
	70, 1299, 10, 70, 12, 70, 14, 70, 1302, 11, 70, 3, 70, 3, 70, 3, 70, 5,
	70, 1307, 10, 70, 3, 70, 7, 70, 1310, 10, 70, 12, 70, 14, 70, 1313, 11,
	70, 3, 70, 5, 70, 1316, 10, 70, 3, 70, 7, 70, 1319, 10, 70, 12, 70, 14,
	70, 1322, 11, 70, 3, 70, 3, 70, 3, 71, 3, 71, 3, 72, 3, 72, 7, 72, 1330,
	10, 72, 12, 72, 14, 72, 1333, 11, 72, 3, 72, 5, 72, 1336, 10, 72, 3, 72,
	7, 72, 1339, 10, 72, 12, 72, 14, 72, 1342, 11, 72, 3, 72, 5, 72, 1345,
	10, 72, 3, 72, 7, 72, 1348, 10, 72, 12, 72, 14, 72, 1351, 11, 72, 3, 72,
	3, 72, 3, 73, 3, 73, 3, 73, 7, 73, 1358, 10, 73, 12, 73, 14, 73, 1361,
	11, 73, 3, 73, 3, 73, 7, 73, 1365, 10, 73, 12, 73, 14, 73, 1368, 11, 73,
	3, 73, 5, 73, 1371, 10, 73, 3, 74, 3, 74, 5, 74, 1375, 10, 74, 3, 75, 5,
	75, 1378, 10, 75, 3, 75, 7, 75, 1381, 10, 75, 12, 75, 14, 75, 1384, 11,
	75, 3, 75, 5, 75, 1387, 10, 75, 3, 75, 7, 75, 1390, 10, 75, 12, 75, 14,
	75, 1393, 11, 75, 3, 75, 3, 75, 5, 75, 1397, 10, 75, 3, 75, 7, 75, 1400,
	10, 75, 12, 75, 14, 75, 1403, 11, 75, 3, 75, 3, 75, 3, 76, 3, 76, 3, 76,
	5, 76, 1410, 10, 76, 3, 76, 3, 76, 5, 76, 1414, 10, 76, 3, 76, 3, 76, 5,
	76, 1418, 10, 76, 3, 76, 3, 76, 3, 76, 3, 76, 5, 76, 1424, 10, 76, 3, 76,
	3, 76, 3, 76, 7, 76, 1429, 10, 76, 12, 76, 14, 76, 1432, 11, 76, 3, 77,
	3, 77, 3, 78, 3, 78, 3, 79, 3, 79, 5, 79, 1440, 10, 79, 3, 79, 3, 79, 3,
	80, 3, 80, 3, 80, 7, 80, 1447, 10, 80, 12, 80, 14, 80, 1450, 11, 80, 3,
	81, 3, 81, 3, 82, 3, 82, 3, 82, 3, 83, 3, 83, 3, 84, 3, 84, 3, 84, 5, 84,
	1462, 10, 84, 3, 85, 3, 85, 5, 85, 1466, 10, 85, 3, 86, 3, 86, 3, 86, 7,
	86, 1471, 10, 86, 12, 86, 14, 86, 1474, 11, 86, 3, 87, 3, 87, 7, 87, 1478,
	10, 87, 12, 87, 14, 87, 1481, 11, 87, 3, 87, 5, 87, 1484, 10, 87, 3, 87,
	7, 87, 1487, 10, 87, 12, 87, 14, 87, 1490, 11, 87, 3, 87, 3, 87, 3, 88,
	3, 88, 7, 88, 1496, 10, 88, 12, 88, 14, 88, 1499, 11, 88, 3, 88, 7, 88,
	1502, 10, 88, 12, 88, 14, 88, 1505, 11, 88, 3, 89, 3, 89, 5, 89, 1509,
	10, 89, 3, 90, 3, 90, 3, 90, 7, 90, 1514, 10, 90, 12, 90, 14, 90, 1517,
	11, 90, 3, 90, 3, 90, 7, 90, 1521, 10, 90, 12, 90, 14, 90, 1524, 11, 90,
	3, 90, 5, 90, 1527, 10, 90, 3, 91, 3, 91, 3, 91, 3, 91, 5, 91, 1533, 10,
	91, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92,
	5, 92, 1545, 10, 92, 3, 93, 6, 93, 1548, 10, 93, 13, 93, 14, 93, 1549,
	3, 94, 3, 94, 3, 94, 3, 94, 3, 95, 3, 95, 3, 95, 3, 95, 5, 95, 1560, 10,
	95, 3, 96, 3, 96, 5, 96, 1564, 10, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96,
	5, 96, 1571, 10, 96, 3, 97, 3, 97, 3, 97, 5, 97, 1576, 10, 97, 3, 98, 3,
	98, 7, 98, 1580, 10, 98, 12, 98, 14, 98, 1583, 11, 98, 3, 98, 5, 98, 1586,
	10, 98, 3, 98, 7, 98, 1589, 10, 98, 12, 98, 14, 98, 1592, 11, 98, 3, 98,
	3, 98, 3, 99, 3, 99, 3, 99, 7, 99, 1599, 10, 99, 12, 99, 14, 99, 1602,
	11, 99, 3, 99, 3, 99, 7, 99, 1606, 10, 99, 12, 99, 14, 99, 1609, 11, 99,
	3, 99, 5, 99, 1612, 10, 99, 3, 100, 3, 100, 3, 101, 3, 101, 7, 101, 1618,
	10, 101, 12, 101, 14, 101, 1621, 11, 101, 3, 101, 5, 101, 1624, 10, 101,
	3, 101, 7, 101, 1627, 10, 101, 12, 101, 14, 101, 1630, 11, 101, 3, 101,
	3, 101, 3, 102, 3, 102, 3, 102, 7, 102, 1637, 10, 102, 12, 102, 14, 102,
	1640, 11, 102, 3, 102, 3, 102, 7, 102, 1644, 10, 102, 12, 102, 14, 102,
	1647, 11, 102, 3, 102, 5, 102, 1650, 10, 102, 3, 103, 5, 103, 1653, 10,
	103, 3, 103, 3, 103, 3, 103, 3, 103, 3, 104, 3, 104, 3, 104, 3, 105, 3,
	105, 7, 105, 1664, 10, 105, 12, 105, 14, 105, 1667, 11, 105, 3, 105, 3,
	105, 7, 105, 1671, 10, 105, 12, 105, 14, 105, 1674, 11, 105, 3, 105, 3,
	105, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 6, 106, 1684, 10,
	106, 13, 106, 14, 106, 1685, 3, 106, 3, 106, 5, 106, 1690, 10, 106, 3,
	107, 3, 107, 3, 107, 3, 107, 3, 107, 5, 107, 1697, 10, 107, 3, 108, 3,
	108, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3,
	109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 5, 109, 1715, 10, 109, 3,
	109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3,
	109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 7, 109, 1734,
	10, 109, 12, 109, 14, 109, 1737, 11, 109, 3, 110, 3, 110, 3, 110, 3, 110,
	3, 110, 3, 110, 5, 110, 1745, 10, 110, 3, 111, 3, 111, 3, 111, 7, 111,
	1750, 10, 111, 12, 111, 14, 111, 1753, 11, 111, 3, 112, 3, 112, 3, 112,
	3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 5, 112, 1765, 10,
	112, 3, 113, 3, 113, 7, 113, 1769, 10, 113, 12, 113, 14, 113, 1772, 11,
	113, 3, 114, 3, 114, 3, 114, 3, 115, 3, 115, 3, 115, 5, 115, 1780, 10,
	115, 3, 115, 3, 115, 7, 115, 1784, 10, 115, 12, 115, 14, 115, 1787, 11,
	115, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116, 5, 116, 1794, 10, 116, 3,
	116, 7, 116, 1797, 10, 116, 12, 116, 14, 116, 1800, 11, 116, 3, 116, 3,
	116, 7, 116, 1804, 10, 116, 12, 116, 14, 116, 1807, 11, 116, 3, 116, 3,
	116, 5, 116, 1811, 10, 116, 3, 116, 3, 116, 5, 116, 1815, 10, 116, 3, 116,
	7, 116, 1818, 10, 116, 12, 116, 14, 116, 1821, 11, 116, 3, 116, 3, 116,
	7, 116, 1825, 10, 116, 12, 116, 14, 116, 1828, 11, 116, 3, 116, 3, 116,
	5, 116, 1832, 10, 116, 7, 116, 1834, 10, 116, 12, 116, 14, 116, 1837, 11,
	116, 3, 117, 3, 117, 3, 117, 3, 117, 5, 117, 1843, 10, 117, 3, 118, 3,
	118, 3, 118, 5, 118, 1848, 10, 118, 3, 119, 3, 119, 3, 119, 5, 119, 1853,
	10, 119, 3, 119, 3, 119, 3, 119, 7, 119, 1858, 10, 119, 12, 119, 14, 119,
	1861, 11, 119, 3, 120, 3, 120, 5, 120, 1865, 10, 120, 3, 121, 3, 121, 3,
	122, 3, 122, 7, 122, 1871, 10, 122, 12, 122, 14, 122, 1874, 11, 122, 3,
	122, 5, 122, 1877, 10, 122, 3, 122, 7, 122, 1880, 10, 122, 12, 122, 14,
	122, 1883, 11, 122, 3, 122, 3, 122, 3, 123, 3, 123, 3, 123, 7, 123, 1890,
	10, 123, 12, 123, 14, 123, 1893, 11, 123, 3, 123, 3, 123, 7, 123, 1897,
	10, 123, 12, 123, 14, 123, 1900, 11, 123, 3, 123, 5, 123, 1903, 10, 123,
	3, 124, 3, 124, 3, 124, 5, 124, 1908, 10, 124, 3, 124, 3, 124, 5, 124,
	1912, 10, 124, 3, 125, 3, 125, 3, 125, 3, 125, 3, 126, 3, 126, 3, 126,
	3, 126, 3, 126, 5, 126, 1923, 10, 126, 3, 126, 3, 126, 5, 126, 1927, 10,
	126, 3, 127, 3, 127, 3, 127, 7, 127, 1932, 10, 127, 12, 127, 14, 127, 1935,
	11, 127, 3, 127, 3, 127, 7, 127, 1939, 10, 127, 12, 127, 14, 127, 1942,
	11, 127, 3, 127, 5, 127, 1945, 10, 127, 3, 128, 3, 128, 3, 128, 3, 128,
	3, 128, 5, 128, 1952, 10, 128, 3, 128, 3, 128, 3, 128, 5, 128, 1957, 10,
	128, 3, 129, 3, 129, 3, 129, 5, 129, 1962, 10, 129, 3, 129, 3, 129, 3,
	130, 3, 130, 3, 130, 3, 130, 3, 130, 5, 130, 1971, 10, 130, 3, 130, 3,
	130, 3, 131, 3, 131, 7, 131, 1977, 10, 131, 12, 131, 14, 131, 1980, 11,
	131, 3, 131, 3, 131, 3, 132, 3, 132, 3, 132, 7, 132, 1987, 10, 132, 12,
	132, 14, 132, 1990, 11, 132, 3, 132, 3, 132, 7, 132, 1994, 10, 132, 12,
	132, 14, 132, 1997, 11, 132, 3, 132, 5, 132, 2000, 10, 132, 3, 133, 3,
	133, 5, 133, 2004, 10, 133, 3, 134, 3, 134, 5, 134, 2008, 10, 134, 3, 135,
	3, 135, 5, 135, 2012, 10, 135, 3, 136, 3, 136, 3, 136, 7, 136, 2017, 10,
	136, 12, 136, 14, 136, 2020, 11, 136, 3, 137, 3, 137, 3, 138, 3, 138, 3,
	139, 3, 139, 3, 140, 3, 140, 3, 140, 7, 140, 2031, 10, 140, 12, 140, 14,
	140, 2034, 11, 140, 3, 140, 3, 140, 3, 141, 3, 141, 3, 141, 7, 141, 2041,
	10, 141, 12, 141, 14, 141, 2044, 11, 141, 3, 142, 3, 142, 3, 143, 3, 143,
	3, 144, 3, 144, 3, 144, 3, 145, 3, 145, 3, 145, 3, 146, 3, 146, 3, 146,
	3, 147, 3, 147, 3, 148, 3, 148, 3, 149, 3, 149, 3, 150, 3, 150, 3, 150,
	3, 151, 3, 151, 3, 152, 3, 152, 3, 153, 3, 153, 3, 154, 3, 154, 7, 154,
	2076, 10, 154, 12, 154, 14, 154, 2079, 11, 154, 3, 154, 3, 154, 7, 154,
	2083, 10, 154, 12, 154, 14, 154, 2086, 11, 154, 5, 154, 2088, 10, 154,
	3, 155, 3, 155, 5, 155, 2092, 10, 155, 3, 156, 3, 156, 5, 156, 2096, 10,
	156, 3, 157, 3, 157, 3, 158, 3, 158, 5, 158, 2102, 10, 158, 3, 159, 3,
	159, 3, 159, 3, 159, 5, 159, 2108, 10, 159, 3, 160, 5, 160, 2111, 10, 160,
	3, 160, 3, 160, 5, 160, 2115, 10, 160, 3, 160, 5, 160, 2118, 10, 160, 3,
	161, 3, 161, 3, 162, 3, 162, 3, 163, 3, 163, 6, 163, 2126, 10, 163, 13,
	163, 14, 163, 2127, 5, 163, 2130, 10, 163, 3, 164, 3, 164, 6, 164, 2134,
	10, 164, 13, 164, 14, 164, 2135, 5, 164, 2138, 10, 164, 3, 165, 3, 165,
	7, 165, 2142, 10, 165, 12, 165, 14, 165, 2145, 11, 165, 3, 165, 5, 165,
	2148, 10, 165, 3, 165, 7, 165, 2151, 10, 165, 12, 165, 14, 165, 2154, 11,
	165, 3, 165, 5, 165, 2157, 10, 165, 3, 165, 6, 165, 2160, 10, 165, 13,
	165, 14, 165, 2161, 5, 165, 2164, 10, 165, 3, 166, 3, 166, 7, 166, 2168,
	10, 166, 12, 166, 14, 166, 2171, 11, 166, 3, 166, 5, 166, 2174, 10, 166,
	3, 166, 7, 166, 2177, 10, 166, 12, 166, 14, 166, 2180, 11, 166, 3, 166,
	5, 166, 2183, 10, 166, 3, 166, 6, 166, 2186, 10, 166, 13, 166, 14, 166,
	2187, 5, 166, 2190, 10, 166, 3, 166, 2, 6, 150, 216, 228, 230, 167, 2,
	4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76,
	78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110,
	112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140,
	142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170,
	172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200,
	202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230,
	232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260,
	262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290,
	292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320,
	322, 324, 326, 328, 330, 2, 7, 4, 2, 67, 67, 70, 70, 3, 2, 3, 31, 5, 2,
	42, 43, 45, 46, 48, 57, 3, 2, 73, 77, 3, 2, 79, 80, 2, 2372, 2, 339, 3,
	2, 2, 2, 4, 354, 3, 2, 2, 2, 6, 356, 3, 2, 2, 2, 8, 377, 3, 2, 2, 2, 10,
	379, 3, 2, 2, 2, 12, 397, 3, 2, 2, 2, 14, 407, 3, 2, 2, 2, 16, 424, 3,
	2, 2, 2, 18, 426, 3, 2, 2, 2, 20, 438, 3, 2, 2, 2, 22, 440, 3, 2, 2, 2,
	24, 474, 3, 2, 2, 2, 26, 476, 3, 2, 2, 2, 28, 502, 3, 2, 2, 2, 30, 519,
	3, 2, 2, 2, 32, 540, 3, 2, 2, 2, 34, 542, 3, 2, 2, 2, 36, 544, 3, 2, 2,
	2, 38, 546, 3, 2, 2, 2, 40, 550, 3, 2, 2, 2, 42, 566, 3, 2, 2, 2, 44, 588,
	3, 2, 2, 2, 46, 590, 3, 2, 2, 2, 48, 606, 3, 2, 2, 2, 50, 623, 3, 2, 2,
	2, 52, 636, 3, 2, 2, 2, 54, 638, 3, 2, 2, 2, 56, 657, 3, 2, 2, 2, 58, 685,
	3, 2, 2, 2, 60, 693, 3, 2, 2, 2, 62, 701, 3, 2, 2, 2, 64, 709, 3, 2, 2,
	2, 66, 711, 3, 2, 2, 2, 68, 714, 3, 2, 2, 2, 70, 717, 3, 2, 2, 2, 72, 722,
	3, 2, 2, 2, 74, 725, 3, 2, 2, 2, 76, 744, 3, 2, 2, 2, 78, 765, 3, 2, 2,
	2, 80, 769, 3, 2, 2, 2, 82, 774, 3, 2, 2, 2, 84, 825, 3, 2, 2, 2, 86, 827,
	3, 2, 2, 2, 88, 831, 3, 2, 2, 2, 90, 846, 3, 2, 2, 2, 92, 849, 3, 2, 2,
	2, 94, 879, 3, 2, 2, 2, 96, 881, 3, 2, 2, 2, 98, 890, 3, 2, 2, 2, 100,
	906, 3, 2, 2, 2, 102, 927, 3, 2, 2, 2, 104, 929, 3, 2, 2, 2, 106, 939,
	3, 2, 2, 2, 108, 958, 3, 2, 2, 2, 110, 1003, 3, 2, 2, 2, 112, 1005, 3,
	2, 2, 2, 114, 1041, 3, 2, 2, 2, 116, 1044, 3, 2, 2, 2, 118, 1083, 3, 2,
	2, 2, 120, 1110, 3, 2, 2, 2, 122, 1112, 3, 2, 2, 2, 124, 1131, 3, 2, 2,
	2, 126, 1162, 3, 2, 2, 2, 128, 1202, 3, 2, 2, 2, 130, 1204, 3, 2, 2, 2,
	132, 1231, 3, 2, 2, 2, 134, 1254, 3, 2, 2, 2, 136, 1257, 3, 2, 2, 2, 138,
	1286, 3, 2, 2, 2, 140, 1325, 3, 2, 2, 2, 142, 1327, 3, 2, 2, 2, 144, 1354,
	3, 2, 2, 2, 146, 1374, 3, 2, 2, 2, 148, 1377, 3, 2, 2, 2, 150, 1423, 3,
	2, 2, 2, 152, 1433, 3, 2, 2, 2, 154, 1435, 3, 2, 2, 2, 156, 1437, 3, 2,
	2, 2, 158, 1443, 3, 2, 2, 2, 160, 1451, 3, 2, 2, 2, 162, 1453, 3, 2, 2,
	2, 164, 1456, 3, 2, 2, 2, 166, 1458, 3, 2, 2, 2, 168, 1465, 3, 2, 2, 2,
	170, 1467, 3, 2, 2, 2, 172, 1475, 3, 2, 2, 2, 174, 1493, 3, 2, 2, 2, 176,
	1506, 3, 2, 2, 2, 178, 1510, 3, 2, 2, 2, 180, 1532, 3, 2, 2, 2, 182, 1544,
	3, 2, 2, 2, 184, 1547, 3, 2, 2, 2, 186, 1551, 3, 2, 2, 2, 188, 1559, 3,
	2, 2, 2, 190, 1570, 3, 2, 2, 2, 192, 1575, 3, 2, 2, 2, 194, 1577, 3, 2,
	2, 2, 196, 1595, 3, 2, 2, 2, 198, 1613, 3, 2, 2, 2, 200, 1615, 3, 2, 2,
	2, 202, 1633, 3, 2, 2, 2, 204, 1652, 3, 2, 2, 2, 206, 1658, 3, 2, 2, 2,
	208, 1661, 3, 2, 2, 2, 210, 1689, 3, 2, 2, 2, 212, 1696, 3, 2, 2, 2, 214,
	1698, 3, 2, 2, 2, 216, 1700, 3, 2, 2, 2, 218, 1744, 3, 2, 2, 2, 220, 1746,
	3, 2, 2, 2, 222, 1764, 3, 2, 2, 2, 224, 1766, 3, 2, 2, 2, 226, 1773, 3,
	2, 2, 2, 228, 1779, 3, 2, 2, 2, 230, 1788, 3, 2, 2, 2, 232, 1842, 3, 2,
	2, 2, 234, 1844, 3, 2, 2, 2, 236, 1852, 3, 2, 2, 2, 238, 1862, 3, 2, 2,
	2, 240, 1866, 3, 2, 2, 2, 242, 1868, 3, 2, 2, 2, 244, 1886, 3, 2, 2, 2,
	246, 1907, 3, 2, 2, 2, 248, 1913, 3, 2, 2, 2, 250, 1926, 3, 2, 2, 2, 252,
	1928, 3, 2, 2, 2, 254, 1956, 3, 2, 2, 2, 256, 1958, 3, 2, 2, 2, 258, 1965,
	3, 2, 2, 2, 260, 1974, 3, 2, 2, 2, 262, 1983, 3, 2, 2, 2, 264, 2001, 3,
	2, 2, 2, 266, 2007, 3, 2, 2, 2, 268, 2011, 3, 2, 2, 2, 270, 2013, 3, 2,
	2, 2, 272, 2021, 3, 2, 2, 2, 274, 2023, 3, 2, 2, 2, 276, 2025, 3, 2, 2,
	2, 278, 2027, 3, 2, 2, 2, 280, 2037, 3, 2, 2, 2, 282, 2045, 3, 2, 2, 2,
	284, 2047, 3, 2, 2, 2, 286, 2049, 3, 2, 2, 2, 288, 2052, 3, 2, 2, 2, 290,
	2055, 3, 2, 2, 2, 292, 2058, 3, 2, 2, 2, 294, 2060, 3, 2, 2, 2, 296, 2062,
	3, 2, 2, 2, 298, 2064, 3, 2, 2, 2, 300, 2067, 3, 2, 2, 2, 302, 2069, 3,
	2, 2, 2, 304, 2071, 3, 2, 2, 2, 306, 2087, 3, 2, 2, 2, 308, 2091, 3, 2,
	2, 2, 310, 2095, 3, 2, 2, 2, 312, 2097, 3, 2, 2, 2, 314, 2101, 3, 2, 2,
	2, 316, 2107, 3, 2, 2, 2, 318, 2117, 3, 2, 2, 2, 320, 2119, 3, 2, 2, 2,
	322, 2121, 3, 2, 2, 2, 324, 2129, 3, 2, 2, 2, 326, 2137, 3, 2, 2, 2, 328,
	2163, 3, 2, 2, 2, 330, 2189, 3, 2, 2, 2, 332, 334, 7, 84, 2, 2, 333, 332,
	3, 2, 2, 2, 334, 337, 3, 2, 2, 2, 335, 333, 3, 2, 2, 2, 335, 336, 3, 2,
	2, 2, 336, 338, 3, 2, 2, 2, 337, 335, 3, 2, 2, 2, 338, 340, 5, 6, 4, 2,
	339, 335, 3, 2, 2, 2, 339, 340, 3, 2, 2, 2, 340, 344, 3, 2, 2, 2, 341,
	343, 7, 84, 2, 2, 342, 341, 3, 2, 2, 2, 343, 346, 3, 2, 2, 2, 344, 342,
	3, 2, 2, 2, 344, 345, 3, 2, 2, 2, 345, 347, 3, 2, 2, 2, 346, 344, 3, 2,
	2, 2, 347, 348, 7, 2, 2, 3, 348, 3, 3, 2, 2, 2, 349, 355, 5, 52, 27, 2,
	350, 355, 5, 176, 89, 2, 351, 355, 5, 8, 5, 2, 352, 355, 5, 20, 11, 2,
	353, 355, 5, 32, 17, 2, 354, 349, 3, 2, 2, 2, 354, 350, 3, 2, 2, 2, 354,
	351, 3, 2, 2, 2, 354, 352, 3, 2, 2, 2, 354, 353, 3, 2, 2, 2, 355, 5, 3,
	2, 2, 2, 356, 368, 5, 4, 3, 2, 357, 361, 5, 324, 163, 2, 358, 360, 7, 84,
	2, 2, 359, 358, 3, 2, 2, 2, 360, 363, 3, 2, 2, 2, 361, 359, 3, 2, 2, 2,
	361, 362, 3, 2, 2, 2, 362, 364, 3, 2, 2, 2, 363, 361, 3, 2, 2, 2, 364,
	365, 5, 4, 3, 2, 365, 367, 3, 2, 2, 2, 366, 357, 3, 2, 2, 2, 367, 370,
	3, 2, 2, 2, 368, 366, 3, 2, 2, 2, 368, 369, 3, 2, 2, 2, 369, 372, 3, 2,
	2, 2, 370, 368, 3, 2, 2, 2, 371, 373, 7, 41, 2, 2, 372, 371, 3, 2, 2, 2,
	372, 373, 3, 2, 2, 2, 373, 7, 3, 2, 2, 2, 374, 378, 3, 2, 2, 2, 375, 378,
	5, 10, 6, 2, 376, 378, 5, 12, 7, 2, 377, 374, 3, 2, 2, 2, 377, 375, 3,
	2, 2, 2, 377, 376, 3, 2, 2, 2, 378, 9, 3, 2, 2, 2, 379, 380, 7, 12, 2,
	2, 380, 384, 5, 150, 76, 2, 381, 383, 7, 84, 2, 2, 382, 381, 3, 2, 2, 2,
	383, 386, 3, 2, 2, 2, 384, 382, 3, 2, 2, 2, 384, 385, 3, 2, 2, 2, 385,
	387, 3, 2, 2, 2, 386, 384, 3, 2, 2, 2, 387, 388, 7, 16, 2, 2, 388, 392,
	5, 176, 89, 2, 389, 391, 7, 84, 2, 2, 390, 389, 3, 2, 2, 2, 391, 394, 3,
	2, 2, 2, 392, 390, 3, 2, 2, 2, 392, 393, 3, 2, 2, 2, 393, 395, 3, 2, 2,
	2, 394, 392, 3, 2, 2, 2, 395, 396, 5, 54, 28, 2, 396, 11, 3, 2, 2, 2, 397,
	398, 7, 30, 2, 2, 398, 402, 5, 14, 8, 2, 399, 401, 7, 84, 2, 2, 400, 399,
	3, 2, 2, 2, 401, 404, 3, 2, 2, 2, 402, 400, 3, 2, 2, 2, 402, 403, 3, 2,
	2, 2, 403, 405, 3, 2, 2, 2, 404, 402, 3, 2, 2, 2, 405, 406, 5, 54, 28,
	2, 406, 13, 3, 2, 2, 2, 407, 419, 5, 16, 9, 2, 408, 412, 5, 326, 164, 2,
	409, 411, 7, 84, 2, 2, 410, 409, 3, 2, 2, 2, 411, 414, 3, 2, 2, 2, 412,
	410, 3, 2, 2, 2, 412, 413, 3, 2, 2, 2, 413, 415, 3, 2, 2, 2, 414, 412,
	3, 2, 2, 2, 415, 416, 5, 16, 9, 2, 416, 418, 3, 2, 2, 2, 417, 408, 3, 2,
	2, 2, 418, 421, 3, 2, 2, 2, 419, 417, 3, 2, 2, 2, 419, 420, 3, 2, 2, 2,
	420, 15, 3, 2, 2, 2, 421, 419, 3, 2, 2, 2, 422, 425, 5, 176, 89, 2, 423,
	425, 5, 18, 10, 2, 424, 422, 3, 2, 2, 2, 424, 423, 3, 2, 2, 2, 425, 17,
	3, 2, 2, 2, 426, 427, 7, 29, 2, 2, 427, 431, 5, 150, 76, 2, 428, 430, 7,
	84, 2, 2, 429, 428, 3, 2, 2, 2, 430, 433, 3, 2, 2, 2, 431, 429, 3, 2, 2,
	2, 431, 432, 3, 2, 2, 2, 432, 434, 3, 2, 2, 2, 433, 431, 3, 2, 2, 2, 434,
	435, 5, 88, 45, 2, 435, 19, 3, 2, 2, 2, 436, 439, 5, 22, 12, 2, 437, 439,
	5, 26, 14, 2, 438, 436, 3, 2, 2, 2, 438, 437, 3, 2, 2, 2, 439, 21, 3, 2,
	2, 2, 440, 441, 7, 14, 2, 2, 441, 445, 5, 14, 8, 2, 442, 444, 7, 84, 2,
	2, 443, 442, 3, 2, 2, 2, 444, 447, 3, 2, 2, 2, 445, 443, 3, 2, 2, 2, 445,
	446, 3, 2, 2, 2, 446, 448, 3, 2, 2, 2, 447, 445, 3, 2, 2, 2, 448, 452,
	5, 54, 28, 2, 449, 451, 7, 84, 2, 2, 450, 449, 3, 2, 2, 2, 451, 454, 3,
	2, 2, 2, 452, 450, 3, 2, 2, 2, 452, 453, 3, 2, 2, 2, 453, 456, 3, 2, 2,
	2, 454, 452, 3, 2, 2, 2, 455, 457, 5, 24, 13, 2, 456, 455, 3, 2, 2, 2,
	456, 457, 3, 2, 2, 2, 457, 23, 3, 2, 2, 2, 458, 462, 7, 9, 2, 2, 459, 461,
	7, 84, 2, 2, 460, 459, 3, 2, 2, 2, 461, 464, 3, 2, 2, 2, 462, 460, 3, 2,
	2, 2, 462, 463, 3, 2, 2, 2, 463, 465, 3, 2, 2, 2, 464, 462, 3, 2, 2, 2,
	465, 475, 5, 54, 28, 2, 466, 470, 7, 9, 2, 2, 467, 469, 7, 84, 2, 2, 468,
	467, 3, 2, 2, 2, 469, 472, 3, 2, 2, 2, 470, 468, 3, 2, 2, 2, 470, 471,
	3, 2, 2, 2, 471, 473, 3, 2, 2, 2, 472, 470, 3, 2, 2, 2, 473, 475, 5, 22,
	12, 2, 474, 458, 3, 2, 2, 2, 474, 466, 3, 2, 2, 2, 475, 25, 3, 2, 2, 2,
	476, 477, 7, 19, 2, 2, 477, 481, 5, 176, 89, 2, 478, 480, 7, 84, 2, 2,
	479, 478, 3, 2, 2, 2, 480, 483, 3, 2, 2, 2, 481, 479, 3, 2, 2, 2, 481,
	482, 3, 2, 2, 2, 482, 484, 3, 2, 2, 2, 483, 481, 3, 2, 2, 2, 484, 492,
	7, 33, 2, 2, 485, 487, 7, 84, 2, 2, 486, 485, 3, 2, 2, 2, 487, 490, 3,
	2, 2, 2, 488, 486, 3, 2, 2, 2, 488, 489, 3, 2, 2, 2, 489, 491, 3, 2, 2,
	2, 490, 488, 3, 2, 2, 2, 491, 493, 5, 28, 15, 2, 492, 488, 3, 2, 2, 2,
	492, 493, 3, 2, 2, 2, 493, 497, 3, 2, 2, 2, 494, 496, 7, 84, 2, 2, 495,
	494, 3, 2, 2, 2, 496, 499, 3, 2, 2, 2, 497, 495, 3, 2, 2, 2, 497, 498,
	3, 2, 2, 2, 498, 500, 3, 2, 2, 2, 499, 497, 3, 2, 2, 2, 500, 501, 7, 36,
	2, 2, 501, 27, 3, 2, 2, 2, 502, 514, 5, 30, 16, 2, 503, 507, 5, 324, 163,
	2, 504, 506, 7, 84, 2, 2, 505, 504, 3, 2, 2, 2, 506, 509, 3, 2, 2, 2, 507,
	505, 3, 2, 2, 2, 507, 508, 3, 2, 2, 2, 508, 510, 3, 2, 2, 2, 509, 507,
	3, 2, 2, 2, 510, 511, 5, 30, 16, 2, 511, 513, 3, 2, 2, 2, 512, 503, 3,
	2, 2, 2, 513, 516, 3, 2, 2, 2, 514, 512, 3, 2, 2, 2, 514, 515, 3, 2, 2,
	2, 515, 517, 3, 2, 2, 2, 516, 514, 3, 2, 2, 2, 517, 518, 5, 324, 163, 2,
	518, 29, 3, 2, 2, 2, 519, 523, 5, 150, 76, 2, 520, 522, 7, 84, 2, 2, 521,
	520, 3, 2, 2, 2, 522, 525, 3, 2, 2, 2, 523, 521, 3, 2, 2, 2, 523, 524,
	3, 2, 2, 2, 524, 526, 3, 2, 2, 2, 525, 523, 3, 2, 2, 2, 526, 530, 7, 60,
	2, 2, 527, 529, 7, 84, 2, 2, 528, 527, 3, 2, 2, 2, 529, 532, 3, 2, 2, 2,
	530, 528, 3, 2, 2, 2, 530, 531, 3, 2, 2, 2, 531, 535, 3, 2, 2, 2, 532,
	530, 3, 2, 2, 2, 533, 536, 5, 54, 28, 2, 534, 536, 5, 176, 89, 2, 535,
	533, 3, 2, 2, 2, 535, 534, 3, 2, 2, 2, 536, 31, 3, 2, 2, 2, 537, 541, 5,
	34, 18, 2, 538, 541, 5, 36, 19, 2, 539, 541, 5, 38, 20, 2, 540, 537, 3,
	2, 2, 2, 540, 538, 3, 2, 2, 2, 540, 539, 3, 2, 2, 2, 541, 33, 3, 2, 2,
	2, 542, 543, 7, 6, 2, 2, 543, 35, 3, 2, 2, 2, 544, 545, 7, 8, 2, 2, 545,
	37, 3, 2, 2, 2, 546, 548, 7, 25, 2, 2, 547, 549, 5, 176, 89, 2, 548, 547,
	3, 2, 2, 2, 548, 549, 3, 2, 2, 2, 549, 39, 3, 2, 2, 2, 550, 554, 7, 42,
	2, 2, 551, 553, 7, 84, 2, 2, 552, 551, 3, 2, 2, 2, 553, 556, 3, 2, 2, 2,
	554, 552, 3, 2, 2, 2, 554, 555, 3, 2, 2, 2, 555, 557, 3, 2, 2, 2, 556,
	554, 3, 2, 2, 2, 557, 561, 5, 42, 22, 2, 558, 560, 7, 84, 2, 2, 559, 558,
	3, 2, 2, 2, 560, 563, 3, 2, 2, 2, 561, 559, 3, 2, 2, 2, 561, 562, 3, 2,
	2, 2, 562, 564, 3, 2, 2, 2, 563, 561, 3, 2, 2, 2, 564, 565, 7, 43, 2, 2,
	565, 41, 3, 2, 2, 2, 566, 578, 5, 44, 23, 2, 567, 571, 5, 330, 166, 2,
	568, 570, 7, 84, 2, 2, 569, 568, 3, 2, 2, 2, 570, 573, 3, 2, 2, 2, 571,
	569, 3, 2, 2, 2, 571, 572, 3, 2, 2, 2, 572, 574, 3, 2, 2, 2, 573, 571,
	3, 2, 2, 2, 574, 575, 5, 44, 23, 2, 575, 577, 3, 2, 2, 2, 576, 567, 3,
	2, 2, 2, 577, 580, 3, 2, 2, 2, 578, 576, 3, 2, 2, 2, 578, 579, 3, 2, 2,
	2, 579, 582, 3, 2, 2, 2, 580, 578, 3, 2, 2, 2, 581, 583, 5, 330, 166, 2,
	582, 581, 3, 2, 2, 2, 582, 583, 3, 2, 2, 2, 583, 43, 3, 2, 2, 2, 584, 589,
	5, 240, 121, 2, 585, 586, 5, 240, 121, 2, 586, 587, 5, 234, 118, 2, 587,
	589, 3, 2, 2, 2, 588, 584, 3, 2, 2, 2, 588, 585, 3, 2, 2, 2, 589, 45, 3,
	2, 2, 2, 590, 594, 7, 42, 2, 2, 591, 593, 7, 84, 2, 2, 592, 591, 3, 2,
	2, 2, 593, 596, 3, 2, 2, 2, 594, 592, 3, 2, 2, 2, 594, 595, 3, 2, 2, 2,
	595, 597, 3, 2, 2, 2, 596, 594, 3, 2, 2, 2, 597, 601, 5, 48, 25, 2, 598,
	600, 7, 84, 2, 2, 599, 598, 3, 2, 2, 2, 600, 603, 3, 2, 2, 2, 601, 599,
	3, 2, 2, 2, 601, 602, 3, 2, 2, 2, 602, 604, 3, 2, 2, 2, 603, 601, 3, 2,
	2, 2, 604, 605, 7, 43, 2, 2, 605, 47, 3, 2, 2, 2, 606, 618, 5, 50, 26,
	2, 607, 611, 5, 326, 164, 2, 608, 610, 7, 84, 2, 2, 609, 608, 3, 2, 2,
	2, 610, 613, 3, 2, 2, 2, 611, 609, 3, 2, 2, 2, 611, 612, 3, 2, 2, 2, 612,
	614, 3, 2, 2, 2, 613, 611, 3, 2, 2, 2, 614, 615, 5, 50, 26, 2, 615, 617,
	3, 2, 2, 2, 616, 607, 3, 2, 2, 2, 617, 620, 3, 2, 2, 2, 618, 616, 3, 2,
	2, 2, 618, 619, 3, 2, 2, 2, 619, 621, 3, 2, 2, 2, 620, 618, 3, 2, 2, 2,
	621, 622, 5, 326, 164, 2, 622, 49, 3, 2, 2, 2, 623, 625, 5, 228, 115, 2,
	624, 626, 5, 174, 88, 2, 625, 624, 3, 2, 2, 2, 625, 626, 3, 2, 2, 2, 626,
	51, 3, 2, 2, 2, 627, 637, 5, 56, 29, 2, 628, 637, 5, 60, 31, 2, 629, 637,
	5, 82, 42, 2, 630, 637, 5, 90, 46, 2, 631, 637, 5, 92, 47, 2, 632, 637,
	5, 98, 50, 2, 633, 637, 5, 116, 59, 2, 634, 637, 5, 126, 64, 2, 635, 637,
	5, 138, 70, 2, 636, 627, 3, 2, 2, 2, 636, 628, 3, 2, 2, 2, 636, 629, 3,
	2, 2, 2, 636, 630, 3, 2, 2, 2, 636, 631, 3, 2, 2, 2, 636, 632, 3, 2, 2,
	2, 636, 633, 3, 2, 2, 2, 636, 634, 3, 2, 2, 2, 636, 635, 3, 2, 2, 2, 637,
	53, 3, 2, 2, 2, 638, 646, 7, 33, 2, 2, 639, 641, 7, 84, 2, 2, 640, 639,
	3, 2, 2, 2, 641, 644, 3, 2, 2, 2, 642, 640, 3, 2, 2, 2, 642, 643, 3, 2,
	2, 2, 643, 645, 3, 2, 2, 2, 644, 642, 3, 2, 2, 2, 645, 647, 5, 6, 4, 2,
	646, 642, 3, 2, 2, 2, 646, 647, 3, 2, 2, 2, 647, 651, 3, 2, 2, 2, 648,
	650, 7, 84, 2, 2, 649, 648, 3, 2, 2, 2, 650, 653, 3, 2, 2, 2, 651, 649,
	3, 2, 2, 2, 651, 652, 3, 2, 2, 2, 652, 654, 3, 2, 2, 2, 653, 651, 3, 2,
	2, 2, 654, 655, 7, 36, 2, 2, 655, 55, 3, 2, 2, 2, 656, 658, 5, 278, 140,
	2, 657, 656, 3, 2, 2, 2, 657, 658, 3, 2, 2, 2, 658, 666, 3, 2, 2, 2, 659,
	661, 7, 84, 2, 2, 660, 659, 3, 2, 2, 2, 661, 664, 3, 2, 2, 2, 662, 660,
	3, 2, 2, 2, 662, 663, 3, 2, 2, 2, 663, 665, 3, 2, 2, 2, 664, 662, 3, 2,
	2, 2, 665, 667, 5, 174, 88, 2, 666, 662, 3, 2, 2, 2, 666, 667, 3, 2, 2,
	2, 667, 671, 3, 2, 2, 2, 668, 670, 7, 84, 2, 2, 669, 668, 3, 2, 2, 2, 670,
	673, 3, 2, 2, 2, 671, 669, 3, 2, 2, 2, 671, 672, 3, 2, 2, 2, 672, 674,
	3, 2, 2, 2, 673, 671, 3, 2, 2, 2, 674, 675, 7, 23, 2, 2, 675, 683, 5, 58,
	30, 2, 676, 678, 7, 84, 2, 2, 677, 676, 3, 2, 2, 2, 678, 681, 3, 2, 2,
	2, 679, 677, 3, 2, 2, 2, 679, 680, 3, 2, 2, 2, 680, 682, 3, 2, 2, 2, 681,
	679, 3, 2, 2, 2, 682, 684, 5, 200, 101, 2, 683, 679, 3, 2, 2, 2, 683, 684,
	3, 2, 2, 2, 684, 57, 3, 2, 2, 2, 685, 690, 7, 67, 2, 2, 686, 687, 7, 32,
	2, 2, 687, 689, 7, 67, 2, 2, 688, 686, 3, 2, 2, 2, 689, 692, 3, 2, 2, 2,
	690, 688, 3, 2, 2, 2, 690, 691, 3, 2, 2, 2, 691, 59, 3, 2, 2, 2, 692, 690,
	3, 2, 2, 2, 693, 694, 7, 15, 2, 2, 694, 699, 5, 62, 32, 2, 695, 700, 5,
	66, 34, 2, 696, 700, 5, 68, 35, 2, 697, 700, 5, 70, 36, 2, 698, 700, 5,
	74, 38, 2, 699, 695, 3, 2, 2, 2, 699, 696, 3, 2, 2, 2, 699, 697, 3, 2,
	2, 2, 699, 698, 3, 2, 2, 2, 699, 700, 3, 2, 2, 2, 700, 61, 3, 2, 2, 2,
	701, 706, 5, 64, 33, 2, 702, 703, 7, 32, 2, 2, 703, 705, 5, 64, 33, 2,
	704, 702, 3, 2, 2, 2, 705, 708, 3, 2, 2, 2, 706, 704, 3, 2, 2, 2, 706,
	707, 3, 2, 2, 2, 707, 63, 3, 2, 2, 2, 708, 706, 3, 2, 2, 2, 709, 710, 5,
	266, 134, 2, 710, 65, 3, 2, 2, 2, 711, 712, 7, 32, 2, 2, 712, 713, 7, 54,
	2, 2, 713, 67, 3, 2, 2, 2, 714, 715, 7, 4, 2, 2, 715, 716, 5, 266, 134,
	2, 716, 69, 3, 2, 2, 2, 717, 718, 7, 32, 2, 2, 718, 720, 5, 240, 121, 2,
	719, 721, 5, 72, 37, 2, 720, 719, 3, 2, 2, 2, 720, 721, 3, 2, 2, 2, 721,
	71, 3, 2, 2, 2, 722, 723, 7, 4, 2, 2, 723, 724, 5, 240, 121, 2, 724, 73,
	3, 2, 2, 2, 725, 726, 7, 32, 2, 2, 726, 730, 7, 33, 2, 2, 727, 729, 7,
	84, 2, 2, 728, 727, 3, 2, 2, 2, 729, 732, 3, 2, 2, 2, 730, 728, 3, 2, 2,
	2, 730, 731, 3, 2, 2, 2, 731, 733, 3, 2, 2, 2, 732, 730, 3, 2, 2, 2, 733,
	737, 5, 76, 39, 2, 734, 736, 7, 84, 2, 2, 735, 734, 3, 2, 2, 2, 736, 739,
	3, 2, 2, 2, 737, 735, 3, 2, 2, 2, 737, 738, 3, 2, 2, 2, 738, 740, 3, 2,
	2, 2, 739, 737, 3, 2, 2, 2, 740, 741, 7, 36, 2, 2, 741, 75, 3, 2, 2, 2,
	742, 745, 5, 78, 40, 2, 743, 745, 5, 80, 41, 2, 744, 742, 3, 2, 2, 2, 744,
	743, 3, 2, 2, 2, 745, 759, 3, 2, 2, 2, 746, 750, 5, 326, 164, 2, 747, 749,
	7, 84, 2, 2, 748, 747, 3, 2, 2, 2, 749, 752, 3, 2, 2, 2, 750, 748, 3, 2,
	2, 2, 750, 751, 3, 2, 2, 2, 751, 755, 3, 2, 2, 2, 752, 750, 3, 2, 2, 2,
	753, 756, 5, 78, 40, 2, 754, 756, 5, 80, 41, 2, 755, 753, 3, 2, 2, 2, 755,
	754, 3, 2, 2, 2, 756, 758, 3, 2, 2, 2, 757, 746, 3, 2, 2, 2, 758, 761,
	3, 2, 2, 2, 759, 757, 3, 2, 2, 2, 759, 760, 3, 2, 2, 2, 760, 763, 3, 2,
	2, 2, 761, 759, 3, 2, 2, 2, 762, 764, 5, 326, 164, 2, 763, 762, 3, 2, 2,
	2, 763, 764, 3, 2, 2, 2, 764, 77, 3, 2, 2, 2, 765, 767, 5, 266, 134, 2,
	766, 768, 5, 68, 35, 2, 767, 766, 3, 2, 2, 2, 767, 768, 3, 2, 2, 2, 768,
	79, 3, 2, 2, 2, 769, 771, 5, 240, 121, 2, 770, 772, 5, 72, 37, 2, 771,
	770, 3, 2, 2, 2, 771, 772, 3, 2, 2, 2, 772, 81, 3, 2, 2, 2, 773, 775, 5,
	278, 140, 2, 774, 773, 3, 2, 2, 2, 774, 775, 3, 2, 2, 2, 775, 783, 3, 2,
	2, 2, 776, 778, 7, 84, 2, 2, 777, 776, 3, 2, 2, 2, 778, 781, 3, 2, 2, 2,
	779, 777, 3, 2, 2, 2, 779, 780, 3, 2, 2, 2, 780, 782, 3, 2, 2, 2, 781,
	779, 3, 2, 2, 2, 782, 784, 5, 174, 88, 2, 783, 779, 3, 2, 2, 2, 783, 784,
	3, 2, 2, 2, 784, 788, 3, 2, 2, 2, 785, 787, 7, 84, 2, 2, 786, 785, 3, 2,
	2, 2, 787, 790, 3, 2, 2, 2, 788, 786, 3, 2, 2, 2, 788, 789, 3, 2, 2, 2,
	789, 791, 3, 2, 2, 2, 790, 788, 3, 2, 2, 2, 791, 792, 7, 7, 2, 2, 792,
	793, 5, 84, 43, 2, 793, 83, 3, 2, 2, 2, 794, 799, 5, 86, 44, 2, 795, 796,
	7, 39, 2, 2, 796, 798, 5, 86, 44, 2, 797, 795, 3, 2, 2, 2, 798, 801, 3,
	2, 2, 2, 799, 797, 3, 2, 2, 2, 799, 800, 3, 2, 2, 2, 800, 826, 3, 2, 2,
	2, 801, 799, 3, 2, 2, 2, 802, 806, 7, 33, 2, 2, 803, 805, 7, 84, 2, 2,
	804, 803, 3, 2, 2, 2, 805, 808, 3, 2, 2, 2, 806, 804, 3, 2, 2, 2, 806,
	807, 3, 2, 2, 2, 807, 809, 3, 2, 2, 2, 808, 806, 3, 2, 2, 2, 809, 814,
	5, 86, 44, 2, 810, 811, 7, 39, 2, 2, 811, 813, 5, 86, 44, 2, 812, 810,
	3, 2, 2, 2, 813, 816, 3, 2, 2, 2, 814, 812, 3, 2, 2, 2, 814, 815, 3, 2,
	2, 2, 815, 820, 3, 2, 2, 2, 816, 814, 3, 2, 2, 2, 817, 819, 7, 84, 2, 2,
	818, 817, 3, 2, 2, 2, 819, 822, 3, 2, 2, 2, 820, 818, 3, 2, 2, 2, 820,
	821, 3, 2, 2, 2, 821, 823, 3, 2, 2, 2, 822, 820, 3, 2, 2, 2, 823, 824,
	7, 36, 2, 2, 824, 826, 3, 2, 2, 2, 825, 794, 3, 2, 2, 2, 825, 802, 3, 2,
	2, 2, 826, 85, 3, 2, 2, 2, 827, 829, 5, 150, 76, 2, 828, 830, 5, 88, 45,
	2, 829, 828, 3, 2, 2, 2, 829, 830, 3, 2, 2, 2, 830, 87, 3, 2, 2, 2, 831,
	835, 5, 282, 142, 2, 832, 834, 7, 84, 2, 2, 833, 832, 3, 2, 2, 2, 834,
	837, 3, 2, 2, 2, 835, 833, 3, 2, 2, 2, 835, 836, 3, 2, 2, 2, 836, 838,
	3, 2, 2, 2, 837, 835, 3, 2, 2, 2, 838, 839, 5, 176, 89, 2, 839, 89, 3,
	2, 2, 2, 840, 841, 7, 29, 2, 2, 841, 847, 5, 84, 43, 2, 842, 843, 5, 154,
	78, 2, 843, 844, 7, 59, 2, 2, 844, 845, 5, 176, 89, 2, 845, 847, 3, 2,
	2, 2, 846, 840, 3, 2, 2, 2, 846, 842, 3, 2, 2, 2, 847, 91, 3, 2, 2, 2,
	848, 850, 5, 278, 140, 2, 849, 848, 3, 2, 2, 2, 849, 850, 3, 2, 2, 2, 850,
	858, 3, 2, 2, 2, 851, 853, 7, 84, 2, 2, 852, 851, 3, 2, 2, 2, 853, 856,
	3, 2, 2, 2, 854, 852, 3, 2, 2, 2, 854, 855, 3, 2, 2, 2, 855, 857, 3, 2,
	2, 2, 856, 854, 3, 2, 2, 2, 857, 859, 5, 174, 88, 2, 858, 854, 3, 2, 2,
	2, 858, 859, 3, 2, 2, 2, 859, 863, 3, 2, 2, 2, 860, 862, 7, 84, 2, 2, 861,
	860, 3, 2, 2, 2, 862, 865, 3, 2, 2, 2, 863, 861, 3, 2, 2, 2, 863, 864,
	3, 2, 2, 2, 864, 866, 3, 2, 2, 2, 865, 863, 3, 2, 2, 2, 866, 867, 7, 28,
	2, 2, 867, 869, 5, 94, 48, 2, 868, 870, 5, 40, 21, 2, 869, 868, 3, 2, 2,
	2, 869, 870, 3, 2, 2, 2, 870, 874, 3, 2, 2, 2, 871, 873, 7, 84, 2, 2, 872,
	871, 3, 2, 2, 2, 873, 876, 3, 2, 2, 2, 874, 872, 3, 2, 2, 2, 874, 875,
	3, 2, 2, 2, 875, 877, 3, 2, 2, 2, 876, 874, 3, 2, 2, 2, 877, 878, 5, 96,
	49, 2, 878, 93, 3, 2, 2, 2, 879, 880, 5, 240, 121, 2, 880, 95, 3, 2, 2,
	2, 881, 885, 5, 282, 142, 2, 882, 884, 7, 84, 2, 2, 883, 882, 3, 2, 2,
	2, 884, 887, 3, 2, 2, 2, 885, 883, 3, 2, 2, 2, 885, 886, 3, 2, 2, 2, 886,
	888, 3, 2, 2, 2, 887, 885, 3, 2, 2, 2, 888, 889, 5, 228, 115, 2, 889, 97,
	3, 2, 2, 2, 890, 891, 5, 100, 51, 2, 891, 893, 5, 102, 52, 2, 892, 894,
	5, 40, 21, 2, 893, 892, 3, 2, 2, 2, 893, 894, 3, 2, 2, 2, 894, 895, 3,
	2, 2, 2, 895, 903, 5, 104, 53, 2, 896, 898, 7, 84, 2, 2, 897, 896, 3, 2,
	2, 2, 898, 901, 3, 2, 2, 2, 899, 897, 3, 2, 2, 2, 899, 900, 3, 2, 2, 2,
	900, 902, 3, 2, 2, 2, 901, 899, 3, 2, 2, 2, 902, 904, 5, 108, 55, 2, 903,
	899, 3, 2, 2, 2, 903, 904, 3, 2, 2, 2, 904, 99, 3, 2, 2, 2, 905, 907, 5,
	278, 140, 2, 906, 905, 3, 2, 2, 2, 906, 907, 3, 2, 2, 2, 907, 915, 3, 2,
	2, 2, 908, 910, 7, 84, 2, 2, 909, 908, 3, 2, 2, 2, 910, 913, 3, 2, 2, 2,
	911, 909, 3, 2, 2, 2, 911, 912, 3, 2, 2, 2, 912, 914, 3, 2, 2, 2, 913,
	911, 3, 2, 2, 2, 914, 916, 5, 174, 88, 2, 915, 911, 3, 2, 2, 2, 915, 916,
	3, 2, 2, 2, 916, 920, 3, 2, 2, 2, 917, 919, 7, 84, 2, 2, 918, 917, 3, 2,
	2, 2, 919, 922, 3, 2, 2, 2, 920, 918, 3, 2, 2, 2, 920, 921, 3, 2, 2, 2,
	921, 923, 3, 2, 2, 2, 922, 920, 3, 2, 2, 2, 923, 924, 7, 13, 2, 2, 924,
	101, 3, 2, 2, 2, 925, 928, 5, 266, 134, 2, 926, 928, 5, 306, 154, 2, 927,
	925, 3, 2, 2, 2, 927, 926, 3, 2, 2, 2, 928, 103, 3, 2, 2, 2, 929, 937,
	5, 110, 56, 2, 930, 932, 7, 84, 2, 2, 931, 930, 3, 2, 2, 2, 932, 935, 3,
	2, 2, 2, 933, 931, 3, 2, 2, 2, 933, 934, 3, 2, 2, 2, 934, 936, 3, 2, 2,
	2, 935, 933, 3, 2, 2, 2, 936, 938, 5, 106, 54, 2, 937, 933, 3, 2, 2, 2,
	937, 938, 3, 2, 2, 2, 938, 105, 3, 2, 2, 2, 939, 943, 5, 292, 147, 2, 940,
	941, 5, 268, 135, 2, 941, 942, 7, 40, 2, 2, 942, 944, 3, 2, 2, 2, 943,
	940, 3, 2, 2, 2, 943, 944, 3, 2, 2, 2, 944, 945, 3, 2, 2, 2, 945, 947,
	5, 228, 115, 2, 946, 948, 5, 174, 88, 2, 947, 946, 3, 2, 2, 2, 947, 948,
	3, 2, 2, 2, 948, 956, 3, 2, 2, 2, 949, 951, 7, 84, 2, 2, 950, 949, 3, 2,
	2, 2, 951, 954, 3, 2, 2, 2, 952, 950, 3, 2, 2, 2, 952, 953, 3, 2, 2, 2,
	953, 955, 3, 2, 2, 2, 954, 952, 3, 2, 2, 2, 955, 957, 5, 280, 141, 2, 956,
	952, 3, 2, 2, 2, 956, 957, 3, 2, 2, 2, 957, 107, 3, 2, 2, 2, 958, 966,
	7, 33, 2, 2, 959, 961, 5, 326, 164, 2, 960, 959, 3, 2, 2, 2, 961, 964,
	3, 2, 2, 2, 962, 960, 3, 2, 2, 2, 962, 963, 3, 2, 2, 2, 963, 965, 3, 2,
	2, 2, 964, 962, 3, 2, 2, 2, 965, 967, 5, 280, 141, 2, 966, 962, 3, 2, 2,
	2, 966, 967, 3, 2, 2, 2, 967, 975, 3, 2, 2, 2, 968, 970, 7, 84, 2, 2, 969,
	968, 3, 2, 2, 2, 970, 973, 3, 2, 2, 2, 971, 969, 3, 2, 2, 2, 971, 972,
	3, 2, 2, 2, 972, 974, 3, 2, 2, 2, 973, 971, 3, 2, 2, 2, 974, 976, 5, 6,
	4, 2, 975, 971, 3, 2, 2, 2, 975, 976, 3, 2, 2, 2, 976, 980, 3, 2, 2, 2,
	977, 979, 7, 84, 2, 2, 978, 977, 3, 2, 2, 2, 979, 982, 3, 2, 2, 2, 980,
	978, 3, 2, 2, 2, 980, 981, 3, 2, 2, 2, 981, 983, 3, 2, 2, 2, 982, 980,
	3, 2, 2, 2, 983, 984, 7, 36, 2, 2, 984, 109, 3, 2, 2, 2, 985, 986, 7, 34,
	2, 2, 986, 1004, 7, 37, 2, 2, 987, 991, 7, 34, 2, 2, 988, 990, 7, 84, 2,
	2, 989, 988, 3, 2, 2, 2, 990, 993, 3, 2, 2, 2, 991, 989, 3, 2, 2, 2, 991,
	992, 3, 2, 2, 2, 992, 994, 3, 2, 2, 2, 993, 991, 3, 2, 2, 2, 994, 998,
	5, 112, 57, 2, 995, 997, 7, 84, 2, 2, 996, 995, 3, 2, 2, 2, 997, 1000,
	3, 2, 2, 2, 998, 996, 3, 2, 2, 2, 998, 999, 3, 2, 2, 2, 999, 1001, 3, 2,
	2, 2, 1000, 998, 3, 2, 2, 2, 1001, 1002, 7, 37, 2, 2, 1002, 1004, 3, 2,
	2, 2, 1003, 985, 3, 2, 2, 2, 1003, 987, 3, 2, 2, 2, 1004, 111, 3, 2, 2,
	2, 1005, 1017, 5, 114, 58, 2, 1006, 1010, 5, 330, 166, 2, 1007, 1009, 7,
	84, 2, 2, 1008, 1007, 3, 2, 2, 2, 1009, 1012, 3, 2, 2, 2, 1010, 1008, 3,
	2, 2, 2, 1010, 1011, 3, 2, 2, 2, 1011, 1013, 3, 2, 2, 2, 1012, 1010, 3,
	2, 2, 2, 1013, 1014, 5, 114, 58, 2, 1014, 1016, 3, 2, 2, 2, 1015, 1006,
	3, 2, 2, 2, 1016, 1019, 3, 2, 2, 2, 1017, 1015, 3, 2, 2, 2, 1017, 1018,
	3, 2, 2, 2, 1018, 1021, 3, 2, 2, 2, 1019, 1017, 3, 2, 2, 2, 1020, 1022,
	5, 330, 166, 2, 1021, 1020, 3, 2, 2, 2, 1021, 1022, 3, 2, 2, 2, 1022, 113,
	3, 2, 2, 2, 1023, 1024, 5, 268, 135, 2, 1024, 1032, 5, 234, 118, 2, 1025,
	1027, 7, 84, 2, 2, 1026, 1025, 3, 2, 2, 2, 1027, 1030, 3, 2, 2, 2, 1028,
	1026, 3, 2, 2, 2, 1028, 1029, 3, 2, 2, 2, 1029, 1031, 3, 2, 2, 2, 1030,
	1028, 3, 2, 2, 2, 1031, 1033, 5, 88, 45, 2, 1032, 1028, 3, 2, 2, 2, 1032,
	1033, 3, 2, 2, 2, 1033, 1042, 3, 2, 2, 2, 1034, 1035, 5, 268, 135, 2, 1035,
	1036, 7, 40, 2, 2, 1036, 1037, 5, 228, 115, 2, 1037, 1039, 7, 65, 2, 2,
	1038, 1040, 5, 174, 88, 2, 1039, 1038, 3, 2, 2, 2, 1039, 1040, 3, 2, 2,
	2, 1040, 1042, 3, 2, 2, 2, 1041, 1023, 3, 2, 2, 2, 1041, 1034, 3, 2, 2,
	2, 1042, 115, 3, 2, 2, 2, 1043, 1045, 5, 278, 140, 2, 1044, 1043, 3, 2,
	2, 2, 1044, 1045, 3, 2, 2, 2, 1045, 1053, 3, 2, 2, 2, 1046, 1048, 7, 84,
	2, 2, 1047, 1046, 3, 2, 2, 2, 1048, 1051, 3, 2, 2, 2, 1049, 1047, 3, 2,
	2, 2, 1049, 1050, 3, 2, 2, 2, 1050, 1052, 3, 2, 2, 2, 1051, 1049, 3, 2,
	2, 2, 1052, 1054, 5, 174, 88, 2, 1053, 1049, 3, 2, 2, 2, 1053, 1054, 3,
	2, 2, 2, 1054, 1058, 3, 2, 2, 2, 1055, 1057, 7, 84, 2, 2, 1056, 1055, 3,
	2, 2, 2, 1057, 1060, 3, 2, 2, 2, 1058, 1056, 3, 2, 2, 2, 1058, 1059, 3,
	2, 2, 2, 1059, 1061, 3, 2, 2, 2, 1060, 1058, 3, 2, 2, 2, 1061, 1062, 7,
	10, 2, 2, 1062, 1064, 5, 120, 61, 2, 1063, 1065, 5, 40, 21, 2, 1064, 1063,
	3, 2, 2, 2, 1064, 1065, 3, 2, 2, 2, 1065, 1073, 3, 2, 2, 2, 1066, 1068,
	7, 84, 2, 2, 1067, 1066, 3, 2, 2, 2, 1068, 1071, 3, 2, 2, 2, 1069, 1067,
	3, 2, 2, 2, 1069, 1070, 3, 2, 2, 2, 1070, 1072, 3, 2, 2, 2, 1071, 1069,
	3, 2, 2, 2, 1072, 1074, 5, 260, 131, 2, 1073, 1069, 3, 2, 2, 2, 1073, 1074,
	3, 2, 2, 2, 1074, 1078, 3, 2, 2, 2, 1075, 1077, 7, 84, 2, 2, 1076, 1075,
	3, 2, 2, 2, 1077, 1080, 3, 2, 2, 2, 1078, 1076, 3, 2, 2, 2, 1078, 1079,
	3, 2, 2, 2, 1079, 1081, 3, 2, 2, 2, 1080, 1078, 3, 2, 2, 2, 1081, 1082,
	5, 118, 60, 2, 1082, 117, 3, 2, 2, 2, 1083, 1091, 7, 33, 2, 2, 1084, 1086,
	5, 326, 164, 2, 1085, 1084, 3, 2, 2, 2, 1086, 1089, 3, 2, 2, 2, 1087, 1085,
	3, 2, 2, 2, 1087, 1088, 3, 2, 2, 2, 1088, 1090, 3, 2, 2, 2, 1089, 1087,
	3, 2, 2, 2, 1090, 1092, 5, 280, 141, 2, 1091, 1087, 3, 2, 2, 2, 1091, 1092,
	3, 2, 2, 2, 1092, 1100, 3, 2, 2, 2, 1093, 1095, 7, 84, 2, 2, 1094, 1093,
	3, 2, 2, 2, 1095, 1098, 3, 2, 2, 2, 1096, 1094, 3, 2, 2, 2, 1096, 1097,
	3, 2, 2, 2, 1097, 1099, 3, 2, 2, 2, 1098, 1096, 3, 2, 2, 2, 1099, 1101,
	5, 122, 62, 2, 1100, 1096, 3, 2, 2, 2, 1100, 1101, 3, 2, 2, 2, 1101, 1105,
	3, 2, 2, 2, 1102, 1104, 7, 84, 2, 2, 1103, 1102, 3, 2, 2, 2, 1104, 1107,
	3, 2, 2, 2, 1105, 1103, 3, 2, 2, 2, 1105, 1106, 3, 2, 2, 2, 1106, 1108,
	3, 2, 2, 2, 1107, 1105, 3, 2, 2, 2, 1108, 1109, 7, 36, 2, 2, 1109, 119,
	3, 2, 2, 2, 1110, 1111, 5, 240, 121, 2, 1111, 121, 3, 2, 2, 2, 1112, 1124,
	5, 124, 63, 2, 1113, 1117, 5, 330, 166, 2, 1114, 1116, 7, 84, 2, 2, 1115,
	1114, 3, 2, 2, 2, 1116, 1119, 3, 2, 2, 2, 1117, 1115, 3, 2, 2, 2, 1117,
	1118, 3, 2, 2, 2, 1118, 1120, 3, 2, 2, 2, 1119, 1117, 3, 2, 2, 2, 1120,
	1121, 5, 124, 63, 2, 1121, 1123, 3, 2, 2, 2, 1122, 1113, 3, 2, 2, 2, 1123,
	1126, 3, 2, 2, 2, 1124, 1122, 3, 2, 2, 2, 1124, 1125, 3, 2, 2, 2, 1125,
	1128, 3, 2, 2, 2, 1126, 1124, 3, 2, 2, 2, 1127, 1129, 5, 330, 166, 2, 1128,
	1127, 3, 2, 2, 2, 1128, 1129, 3, 2, 2, 2, 1129, 123, 3, 2, 2, 2, 1130,
	1132, 5, 278, 140, 2, 1131, 1130, 3, 2, 2, 2, 1131, 1132, 3, 2, 2, 2, 1132,
	1140, 3, 2, 2, 2, 1133, 1135, 7, 84, 2, 2, 1134, 1133, 3, 2, 2, 2, 1135,
	1138, 3, 2, 2, 2, 1136, 1134, 3, 2, 2, 2, 1136, 1137, 3, 2, 2, 2, 1137,
	1139, 3, 2, 2, 2, 1138, 1136, 3, 2, 2, 2, 1139, 1141, 5, 174, 88, 2, 1140,
	1136, 3, 2, 2, 2, 1140, 1141, 3, 2, 2, 2, 1141, 1145, 3, 2, 2, 2, 1142,
	1144, 7, 84, 2, 2, 1143, 1142, 3, 2, 2, 2, 1144, 1147, 3, 2, 2, 2, 1145,
	1143, 3, 2, 2, 2, 1145, 1146, 3, 2, 2, 2, 1146, 1148, 3, 2, 2, 2, 1147,
	1145, 3, 2, 2, 2, 1148, 1150, 5, 266, 134, 2, 1149, 1151, 5, 174, 88, 2,
	1150, 1149, 3, 2, 2, 2, 1150, 1151, 3, 2, 2, 2, 1151, 1159, 3, 2, 2, 2,
	1152, 1154, 7, 84, 2, 2, 1153, 1152, 3, 2, 2, 2, 1154, 1157, 3, 2, 2, 2,
	1155, 1153, 3, 2, 2, 2, 1155, 1156, 3, 2, 2, 2, 1156, 1158, 3, 2, 2, 2,
	1157, 1155, 3, 2, 2, 2, 1158, 1160, 5, 88, 45, 2, 1159, 1155, 3, 2, 2,
	2, 1159, 1160, 3, 2, 2, 2, 1160, 125, 3, 2, 2, 2, 1161, 1163, 5, 278, 140,
	2, 1162, 1161, 3, 2, 2, 2, 1162, 1163, 3, 2, 2, 2, 1163, 1171, 3, 2, 2,
	2, 1164, 1166, 7, 84, 2, 2, 1165, 1164, 3, 2, 2, 2, 1166, 1169, 3, 2, 2,
	2, 1167, 1165, 3, 2, 2, 2, 1167, 1168, 3, 2, 2, 2, 1168, 1170, 3, 2, 2,
	2, 1169, 1167, 3, 2, 2, 2, 1170, 1172, 5, 174, 88, 2, 1171, 1167, 3, 2,
	2, 2, 1171, 1172, 3, 2, 2, 2, 1172, 1176, 3, 2, 2, 2, 1173, 1175, 7, 84,
	2, 2, 1174, 1173, 3, 2, 2, 2, 1175, 1178, 3, 2, 2, 2, 1176, 1174, 3, 2,
	2, 2, 1176, 1177, 3, 2, 2, 2, 1177, 1179, 3, 2, 2, 2, 1178, 1176, 3, 2,
	2, 2, 1179, 1180, 7, 28, 2, 2, 1180, 1182, 5, 128, 65, 2, 1181, 1183, 5,
	40, 21, 2, 1182, 1181, 3, 2, 2, 2, 1182, 1183, 3, 2, 2, 2, 1183, 1191,
	3, 2, 2, 2, 1184, 1186, 7, 84, 2, 2, 1185, 1184, 3, 2, 2, 2, 1186, 1189,
	3, 2, 2, 2, 1187, 1185, 3, 2, 2, 2, 1187, 1188, 3, 2, 2, 2, 1188, 1190,
	3, 2, 2, 2, 1189, 1187, 3, 2, 2, 2, 1190, 1192, 5, 260, 131, 2, 1191, 1187,
	3, 2, 2, 2, 1191, 1192, 3, 2, 2, 2, 1192, 1200, 3, 2, 2, 2, 1193, 1195,
	7, 84, 2, 2, 1194, 1193, 3, 2, 2, 2, 1195, 1198, 3, 2, 2, 2, 1196, 1194,
	3, 2, 2, 2, 1196, 1197, 3, 2, 2, 2, 1197, 1199, 3, 2, 2, 2, 1198, 1196,
	3, 2, 2, 2, 1199, 1201, 5, 130, 66, 2, 1200, 1196, 3, 2, 2, 2, 1200, 1201,
	3, 2, 2, 2, 1201, 127, 3, 2, 2, 2, 1202, 1203, 5, 240, 121, 2, 1203, 129,
	3, 2, 2, 2, 1204, 1212, 7, 33, 2, 2, 1205, 1207, 5, 326, 164, 2, 1206,
	1205, 3, 2, 2, 2, 1207, 1210, 3, 2, 2, 2, 1208, 1206, 3, 2, 2, 2, 1208,
	1209, 3, 2, 2, 2, 1209, 1211, 3, 2, 2, 2, 1210, 1208, 3, 2, 2, 2, 1211,
	1213, 5, 280, 141, 2, 1212, 1208, 3, 2, 2, 2, 1212, 1213, 3, 2, 2, 2, 1213,
	1221, 3, 2, 2, 2, 1214, 1216, 7, 84, 2, 2, 1215, 1214, 3, 2, 2, 2, 1216,
	1219, 3, 2, 2, 2, 1217, 1215, 3, 2, 2, 2, 1217, 1218, 3, 2, 2, 2, 1218,
	1220, 3, 2, 2, 2, 1219, 1217, 3, 2, 2, 2, 1220, 1222, 5, 132, 67, 2, 1221,
	1217, 3, 2, 2, 2, 1221, 1222, 3, 2, 2, 2, 1222, 1226, 3, 2, 2, 2, 1223,
	1225, 7, 84, 2, 2, 1224, 1223, 3, 2, 2, 2, 1225, 1228, 3, 2, 2, 2, 1226,
	1224, 3, 2, 2, 2, 1226, 1227, 3, 2, 2, 2, 1227, 1229, 3, 2, 2, 2, 1228,
	1226, 3, 2, 2, 2, 1229, 1230, 7, 36, 2, 2, 1230, 131, 3, 2, 2, 2, 1231,
	1243, 5, 134, 68, 2, 1232, 1236, 5, 328, 165, 2, 1233, 1235, 7, 84, 2,
	2, 1234, 1233, 3, 2, 2, 2, 1235, 1238, 3, 2, 2, 2, 1236, 1234, 3, 2, 2,
	2, 1236, 1237, 3, 2, 2, 2, 1237, 1239, 3, 2, 2, 2, 1238, 1236, 3, 2, 2,
	2, 1239, 1240, 5, 134, 68, 2, 1240, 1242, 3, 2, 2, 2, 1241, 1232, 3, 2,
	2, 2, 1242, 1245, 3, 2, 2, 2, 1243, 1241, 3, 2, 2, 2, 1243, 1244, 3, 2,
	2, 2, 1244, 1247, 3, 2, 2, 2, 1245, 1243, 3, 2, 2, 2, 1246, 1248, 5, 328,
	165, 2, 1247, 1246, 3, 2, 2, 2, 1247, 1248, 3, 2, 2, 2, 1248, 133, 3, 2,
	2, 2, 1249, 1255, 5, 136, 69, 2, 1250, 1255, 5, 126, 64, 2, 1251, 1255,
	5, 116, 59, 2, 1252, 1255, 5, 82, 42, 2, 1253, 1255, 5, 92, 47, 2, 1254,
	1249, 3, 2, 2, 2, 1254, 1250, 3, 2, 2, 2, 1254, 1251, 3, 2, 2, 2, 1254,
	1252, 3, 2, 2, 2, 1254, 1253, 3, 2, 2, 2, 1255, 135, 3, 2, 2, 2, 1256,
	1258, 5, 278, 140, 2, 1257, 1256, 3, 2, 2, 2, 1257, 1258, 3, 2, 2, 2, 1258,
	1266, 3, 2, 2, 2, 1259, 1261, 7, 84, 2, 2, 1260, 1259, 3, 2, 2, 2, 1261,
	1264, 3, 2, 2, 2, 1262, 1260, 3, 2, 2, 2, 1262, 1263, 3, 2, 2, 2, 1263,
	1265, 3, 2, 2, 2, 1264, 1262, 3, 2, 2, 2, 1265, 1267, 5, 174, 88, 2, 1266,
	1262, 3, 2, 2, 2, 1266, 1267, 3, 2, 2, 2, 1267, 1271, 3, 2, 2, 2, 1268,
	1270, 7, 84, 2, 2, 1269, 1268, 3, 2, 2, 2, 1270, 1273, 3, 2, 2, 2, 1271,
	1269, 3, 2, 2, 2, 1271, 1272, 3, 2, 2, 2, 1272, 1274, 3, 2, 2, 2, 1273,
	1271, 3, 2, 2, 2, 1274, 1275, 5, 266, 134, 2, 1275, 1283, 5, 234, 118,
	2, 1276, 1278, 7, 84, 2, 2, 1277, 1276, 3, 2, 2, 2, 1278, 1281, 3, 2, 2,
	2, 1279, 1277, 3, 2, 2, 2, 1279, 1280, 3, 2, 2, 2, 1280, 1282, 3, 2, 2,
	2, 1281, 1279, 3, 2, 2, 2, 1282, 1284, 5, 88, 45, 2, 1283, 1279, 3, 2,
	2, 2, 1283, 1284, 3, 2, 2, 2, 1284, 137, 3, 2, 2, 2, 1285, 1287, 5, 278,
	140, 2, 1286, 1285, 3, 2, 2, 2, 1286, 1287, 3, 2, 2, 2, 1287, 1295, 3,
	2, 2, 2, 1288, 1290, 7, 84, 2, 2, 1289, 1288, 3, 2, 2, 2, 1290, 1293, 3,
	2, 2, 2, 1291, 1289, 3, 2, 2, 2, 1291, 1292, 3, 2, 2, 2, 1292, 1294, 3,
	2, 2, 2, 1293, 1291, 3, 2, 2, 2, 1294, 1296, 5, 174, 88, 2, 1295, 1291,
	3, 2, 2, 2, 1295, 1296, 3, 2, 2, 2, 1296, 1300, 3, 2, 2, 2, 1297, 1299,
	7, 84, 2, 2, 1298, 1297, 3, 2, 2, 2, 1299, 1302, 3, 2, 2, 2, 1300, 1298,
	3, 2, 2, 2, 1300, 1301, 3, 2, 2, 2, 1301, 1303, 3, 2, 2, 2, 1302, 1300,
	3, 2, 2, 2, 1303, 1304, 7, 17, 2, 2, 1304, 1306, 5, 140, 71, 2, 1305, 1307,
	5, 40, 21, 2, 1306, 1305, 3, 2, 2, 2, 1306, 1307, 3, 2, 2, 2, 1307, 1315,
	3, 2, 2, 2, 1308, 1310, 7, 84, 2, 2, 1309, 1308, 3, 2, 2, 2, 1310, 1313,
	3, 2, 2, 2, 1311, 1309, 3, 2, 2, 2, 1311, 1312, 3, 2, 2, 2, 1312, 1314,
	3, 2, 2, 2, 1313, 1311, 3, 2, 2, 2, 1314, 1316, 5, 260, 131, 2, 1315, 1311,
	3, 2, 2, 2, 1315, 1316, 3, 2, 2, 2, 1316, 1320, 3, 2, 2, 2, 1317, 1319,
	7, 84, 2, 2, 1318, 1317, 3, 2, 2, 2, 1319, 1322, 3, 2, 2, 2, 1320, 1318,
	3, 2, 2, 2, 1320, 1321, 3, 2, 2, 2, 1321, 1323, 3, 2, 2, 2, 1322, 1320,
	3, 2, 2, 2, 1323, 1324, 5, 142, 72, 2, 1324, 139, 3, 2, 2, 2, 1325, 1326,
	5, 240, 121, 2, 1326, 141, 3, 2, 2, 2, 1327, 1335, 7, 33, 2, 2, 1328, 1330,
	5, 326, 164, 2, 1329, 1328, 3, 2, 2, 2, 1330, 1333, 3, 2, 2, 2, 1331, 1329,
	3, 2, 2, 2, 1331, 1332, 3, 2, 2, 2, 1332, 1334, 3, 2, 2, 2, 1333, 1331,
	3, 2, 2, 2, 1334, 1336, 5, 280, 141, 2, 1335, 1331, 3, 2, 2, 2, 1335, 1336,
	3, 2, 2, 2, 1336, 1344, 3, 2, 2, 2, 1337, 1339, 7, 84, 2, 2, 1338, 1337,
	3, 2, 2, 2, 1339, 1342, 3, 2, 2, 2, 1340, 1338, 3, 2, 2, 2, 1340, 1341,
	3, 2, 2, 2, 1341, 1343, 3, 2, 2, 2, 1342, 1340, 3, 2, 2, 2, 1343, 1345,
	5, 144, 73, 2, 1344, 1340, 3, 2, 2, 2, 1344, 1345, 3, 2, 2, 2, 1345, 1349,
	3, 2, 2, 2, 1346, 1348, 7, 84, 2, 2, 1347, 1346, 3, 2, 2, 2, 1348, 1351,
	3, 2, 2, 2, 1349, 1347, 3, 2, 2, 2, 1349, 1350, 3, 2, 2, 2, 1350, 1352,
	3, 2, 2, 2, 1351, 1349, 3, 2, 2, 2, 1352, 1353, 7, 36, 2, 2, 1353, 143,
	3, 2, 2, 2, 1354, 1366, 5, 146, 74, 2, 1355, 1359, 5, 328, 165, 2, 1356,
	1358, 7, 84, 2, 2, 1357, 1356, 3, 2, 2, 2, 1358, 1361, 3, 2, 2, 2, 1359,
	1357, 3, 2, 2, 2, 1359, 1360, 3, 2, 2, 2, 1360, 1362, 3, 2, 2, 2, 1361,
	1359, 3, 2, 2, 2, 1362, 1363, 5, 146, 74, 2, 1363, 1365, 3, 2, 2, 2, 1364,
	1355, 3, 2, 2, 2, 1365, 1368, 3, 2, 2, 2, 1366, 1364, 3, 2, 2, 2, 1366,
	1367, 3, 2, 2, 2, 1367, 1370, 3, 2, 2, 2, 1368, 1366, 3, 2, 2, 2, 1369,
	1371, 5, 328, 165, 2, 1370, 1369, 3, 2, 2, 2, 1370, 1371, 3, 2, 2, 2, 1371,
	145, 3, 2, 2, 2, 1372, 1375, 5, 148, 75, 2, 1373, 1375, 5, 92, 47, 2, 1374,
	1372, 3, 2, 2, 2, 1374, 1373, 3, 2, 2, 2, 1375, 147, 3, 2, 2, 2, 1376,
	1378, 5, 278, 140, 2, 1377, 1376, 3, 2, 2, 2, 1377, 1378, 3, 2, 2, 2, 1378,
	1386, 3, 2, 2, 2, 1379, 1381, 7, 84, 2, 2, 1380, 1379, 3, 2, 2, 2, 1381,
	1384, 3, 2, 2, 2, 1382, 1380, 3, 2, 2, 2, 1382, 1383, 3, 2, 2, 2, 1383,
	1385, 3, 2, 2, 2, 1384, 1382, 3, 2, 2, 2, 1385, 1387, 5, 174, 88, 2, 1386,
	1382, 3, 2, 2, 2, 1386, 1387, 3, 2, 2, 2, 1387, 1391, 3, 2, 2, 2, 1388,
	1390, 7, 84, 2, 2, 1389, 1388, 3, 2, 2, 2, 1390, 1393, 3, 2, 2, 2, 1391,
	1389, 3, 2, 2, 2, 1391, 1392, 3, 2, 2, 2, 1392, 1394, 3, 2, 2, 2, 1393,
	1391, 3, 2, 2, 2, 1394, 1396, 5, 102, 52, 2, 1395, 1397, 5, 40, 21, 2,
	1396, 1395, 3, 2, 2, 2, 1396, 1397, 3, 2, 2, 2, 1397, 1401, 3, 2, 2, 2,
	1398, 1400, 7, 84, 2, 2, 1399, 1398, 3, 2, 2, 2, 1400, 1403, 3, 2, 2, 2,
	1401, 1399, 3, 2, 2, 2, 1401, 1402, 3, 2, 2, 2, 1402, 1404, 3, 2, 2, 2,
	1403, 1401, 3, 2, 2, 2, 1404, 1405, 5, 104, 53, 2, 1405, 149, 3, 2, 2,
	2, 1406, 1407, 8, 76, 1, 2, 1407, 1409, 5, 152, 77, 2, 1408, 1410, 5, 234,
	118, 2, 1409, 1408, 3, 2, 2, 2, 1409, 1410, 3, 2, 2, 2, 1410, 1424, 3,
	2, 2, 2, 1411, 1413, 5, 154, 78, 2, 1412, 1414, 5, 234, 118, 2, 1413, 1412,
	3, 2, 2, 2, 1413, 1414, 3, 2, 2, 2, 1414, 1424, 3, 2, 2, 2, 1415, 1417,
	5, 156, 79, 2, 1416, 1418, 5, 234, 118, 2, 1417, 1416, 3, 2, 2, 2, 1417,
	1418, 3, 2, 2, 2, 1418, 1424, 3, 2, 2, 2, 1419, 1424, 5, 162, 82, 2, 1420,
	1421, 7, 18, 2, 2, 1421, 1424, 5, 228, 115, 2, 1422, 1424, 5, 164, 83,
	2, 1423, 1406, 3, 2, 2, 2, 1423, 1411, 3, 2, 2, 2, 1423, 1415, 3, 2, 2,
	2, 1423, 1419, 3, 2, 2, 2, 1423, 1420, 3, 2, 2, 2, 1423, 1422, 3, 2, 2,
	2, 1424, 1430, 3, 2, 2, 2, 1425, 1426, 12, 4, 2, 2, 1426, 1427, 7, 4, 2,
	2, 1427, 1429, 5, 228, 115, 2, 1428, 1425, 3, 2, 2, 2, 1429, 1432, 3, 2,
	2, 2, 1430, 1428, 3, 2, 2, 2, 1430, 1431, 3, 2, 2, 2, 1431, 151, 3, 2,
	2, 2, 1432, 1430, 3, 2, 2, 2, 1433, 1434, 7, 44, 2, 2, 1434, 153, 3, 2,
	2, 2, 1435, 1436, 5, 266, 134, 2, 1436, 155, 3, 2, 2, 2, 1437, 1439, 7,
	34, 2, 2, 1438, 1440, 5, 158, 80, 2, 1439, 1438, 3, 2, 2, 2, 1439, 1440,
	3, 2, 2, 2, 1440, 1441, 3, 2, 2, 2, 1441, 1442, 7, 37, 2, 2, 1442, 157,
	3, 2, 2, 2, 1443, 1448, 5, 160, 81, 2, 1444, 1445, 7, 39, 2, 2, 1445, 1447,
	5, 160, 81, 2, 1446, 1444, 3, 2, 2, 2, 1447, 1450, 3, 2, 2, 2, 1448, 1446,
	3, 2, 2, 2, 1448, 1449, 3, 2, 2, 2, 1449, 159, 3, 2, 2, 2, 1450, 1448,
	3, 2, 2, 2, 1451, 1452, 5, 150, 76, 2, 1452, 161, 3, 2, 2, 2, 1453, 1454,
	5, 154, 78, 2, 1454, 1455, 7, 46, 2, 2, 1455, 163, 3, 2, 2, 2, 1456, 1457,
	5, 176, 89, 2, 1457, 165, 3, 2, 2, 2, 1458, 1459, 7, 47, 2, 2, 1459, 1461,
	5, 168, 85, 2, 1460, 1462, 5, 172, 87, 2, 1461, 1460, 3, 2, 2, 2, 1461,
	1462, 3, 2, 2, 2, 1462, 167, 3, 2, 2, 2, 1463, 1466, 5, 170, 86, 2, 1464,
	1466, 7, 75, 2, 2, 1465, 1463, 3, 2, 2, 2, 1465, 1464, 3, 2, 2, 2, 1466,
	169, 3, 2, 2, 2, 1467, 1472, 7, 67, 2, 2, 1468, 1469, 7, 32, 2, 2, 1469,
	1471, 7, 67, 2, 2, 1470, 1468, 3, 2, 2, 2, 1471, 1474, 3, 2, 2, 2, 1472,
	1470, 3, 2, 2, 2, 1472, 1473, 3, 2, 2, 2, 1473, 171, 3, 2, 2, 2, 1474,
	1472, 3, 2, 2, 2, 1475, 1483, 7, 34, 2, 2, 1476, 1478, 7, 84, 2, 2, 1477,
	1476, 3, 2, 2, 2, 1478, 1481, 3, 2, 2, 2, 1479, 1477, 3, 2, 2, 2, 1479,
	1480, 3, 2, 2, 2, 1480, 1482, 3, 2, 2, 2, 1481, 1479, 3, 2, 2, 2, 1482,
	1484, 5, 178, 90, 2, 1483, 1479, 3, 2, 2, 2, 1483, 1484, 3, 2, 2, 2, 1484,
	1488, 3, 2, 2, 2, 1485, 1487, 7, 84, 2, 2, 1486, 1485, 3, 2, 2, 2, 1487,
	1490, 3, 2, 2, 2, 1488, 1486, 3, 2, 2, 2, 1488, 1489, 3, 2, 2, 2, 1489,
	1491, 3, 2, 2, 2, 1490, 1488, 3, 2, 2, 2, 1491, 1492, 7, 37, 2, 2, 1492,
	173, 3, 2, 2, 2, 1493, 1503, 5, 166, 84, 2, 1494, 1496, 7, 84, 2, 2, 1495,
	1494, 3, 2, 2, 2, 1496, 1499, 3, 2, 2, 2, 1497, 1495, 3, 2, 2, 2, 1497,
	1498, 3, 2, 2, 2, 1498, 1500, 3, 2, 2, 2, 1499, 1497, 3, 2, 2, 2, 1500,
	1502, 5, 166, 84, 2, 1501, 1497, 3, 2, 2, 2, 1502, 1505, 3, 2, 2, 2, 1503,
	1501, 3, 2, 2, 2, 1503, 1504, 3, 2, 2, 2, 1504, 175, 3, 2, 2, 2, 1505,
	1503, 3, 2, 2, 2, 1506, 1508, 5, 180, 91, 2, 1507, 1509, 5, 184, 93, 2,
	1508, 1507, 3, 2, 2, 2, 1508, 1509, 3, 2, 2, 2, 1509, 177, 3, 2, 2, 2,
	1510, 1522, 5, 176, 89, 2, 1511, 1515, 5, 326, 164, 2, 1512, 1514, 7, 84,
	2, 2, 1513, 1512, 3, 2, 2, 2, 1514, 1517, 3, 2, 2, 2, 1515, 1513, 3, 2,
	2, 2, 1515, 1516, 3, 2, 2, 2, 1516, 1518, 3, 2, 2, 2, 1517, 1515, 3, 2,
	2, 2, 1518, 1519, 5, 176, 89, 2, 1519, 1521, 3, 2, 2, 2, 1520, 1511, 3,
	2, 2, 2, 1521, 1524, 3, 2, 2, 2, 1522, 1520, 3, 2, 2, 2, 1522, 1523, 3,
	2, 2, 2, 1523, 1526, 3, 2, 2, 2, 1524, 1522, 3, 2, 2, 2, 1525, 1527, 5,
	326, 164, 2, 1526, 1525, 3, 2, 2, 2, 1526, 1527, 3, 2, 2, 2, 1527, 179,
	3, 2, 2, 2, 1528, 1529, 5, 302, 152, 2, 1529, 1530, 5, 216, 109, 2, 1530,
	1533, 3, 2, 2, 2, 1531, 1533, 5, 216, 109, 2, 1532, 1528, 3, 2, 2, 2, 1532,
	1531, 3, 2, 2, 2, 1533, 181, 3, 2, 2, 2, 1534, 1535, 5, 300, 151, 2, 1535,
	1536, 5, 180, 91, 2, 1536, 1545, 3, 2, 2, 2, 1537, 1538, 5, 282, 142, 2,
	1538, 1539, 5, 180, 91, 2, 1539, 1545, 3, 2, 2, 2, 1540, 1541, 5, 186,
	94, 2, 1541, 1542, 5, 180, 91, 2, 1542, 1545, 3, 2, 2, 2, 1543, 1545, 5,
	188, 95, 2, 1544, 1534, 3, 2, 2, 2, 1544, 1537, 3, 2, 2, 2, 1544, 1540,
	3, 2, 2, 2, 1544, 1543, 3, 2, 2, 2, 1545, 183, 3, 2, 2, 2, 1546, 1548,
	5, 182, 92, 2, 1547, 1546, 3, 2, 2, 2, 1548, 1549, 3, 2, 2, 2, 1549, 1547,
	3, 2, 2, 2, 1549, 1550, 3, 2, 2, 2, 1550, 185, 3, 2, 2, 2, 1551, 1552,
	7, 46, 2, 2, 1552, 1553, 5, 176, 89, 2, 1553, 1554, 7, 40, 2, 2, 1554,
	187, 3, 2, 2, 2, 1555, 1556, 7, 18, 2, 2, 1556, 1560, 5, 228, 115, 2, 1557,
	1558, 7, 4, 2, 2, 1558, 1560, 5, 228, 115, 2, 1559, 1555, 3, 2, 2, 2, 1559,
	1557, 3, 2, 2, 2, 1560, 189, 3, 2, 2, 2, 1561, 1563, 5, 266, 134, 2, 1562,
	1564, 5, 46, 24, 2, 1563, 1562, 3, 2, 2, 2, 1563, 1564, 3, 2, 2, 2, 1564,
	1571, 3, 2, 2, 2, 1565, 1571, 5, 192, 97, 2, 1566, 1571, 5, 208, 105, 2,
	1567, 1571, 5, 210, 106, 2, 1568, 1571, 5, 206, 104, 2, 1569, 1571, 5,
	214, 108, 2, 1570, 1561, 3, 2, 2, 2, 1570, 1565, 3, 2, 2, 2, 1570, 1566,
	3, 2, 2, 2, 1570, 1567, 3, 2, 2, 2, 1570, 1568, 3, 2, 2, 2, 1570, 1569,
	3, 2, 2, 2, 1571, 191, 3, 2, 2, 2, 1572, 1576, 5, 316, 159, 2, 1573, 1576,
	5, 194, 98, 2, 1574, 1576, 5, 200, 101, 2, 1575, 1572, 3, 2, 2, 2, 1575,
	1573, 3, 2, 2, 2, 1575, 1574, 3, 2, 2, 2, 1576, 193, 3, 2, 2, 2, 1577,
	1585, 7, 35, 2, 2, 1578, 1580, 7, 84, 2, 2, 1579, 1578, 3, 2, 2, 2, 1580,
	1583, 3, 2, 2, 2, 1581, 1579, 3, 2, 2, 2, 1581, 1582, 3, 2, 2, 2, 1582,
	1584, 3, 2, 2, 2, 1583, 1581, 3, 2, 2, 2, 1584, 1586, 5, 196, 99, 2, 1585,
	1581, 3, 2, 2, 2, 1585, 1586, 3, 2, 2, 2, 1586, 1590, 3, 2, 2, 2, 1587,
	1589, 7, 84, 2, 2, 1588, 1587, 3, 2, 2, 2, 1589, 1592, 3, 2, 2, 2, 1590,
	1588, 3, 2, 2, 2, 1590, 1591, 3, 2, 2, 2, 1591, 1593, 3, 2, 2, 2, 1592,
	1590, 3, 2, 2, 2, 1593, 1594, 7, 38, 2, 2, 1594, 195, 3, 2, 2, 2, 1595,
	1607, 5, 198, 100, 2, 1596, 1600, 5, 326, 164, 2, 1597, 1599, 7, 84, 2,
	2, 1598, 1597, 3, 2, 2, 2, 1599, 1602, 3, 2, 2, 2, 1600, 1598, 3, 2, 2,
	2, 1600, 1601, 3, 2, 2, 2, 1601, 1603, 3, 2, 2, 2, 1602, 1600, 3, 2, 2,
	2, 1603, 1604, 5, 198, 100, 2, 1604, 1606, 3, 2, 2, 2, 1605, 1596, 3, 2,
	2, 2, 1606, 1609, 3, 2, 2, 2, 1607, 1605, 3, 2, 2, 2, 1607, 1608, 3, 2,
	2, 2, 1608, 1611, 3, 2, 2, 2, 1609, 1607, 3, 2, 2, 2, 1610, 1612, 5, 326,
	164, 2, 1611, 1610, 3, 2, 2, 2, 1611, 1612, 3, 2, 2, 2, 1612, 197, 3, 2,
	2, 2, 1613, 1614, 5, 176, 89, 2, 1614, 199, 3, 2, 2, 2, 1615, 1623, 7,
	33, 2, 2, 1616, 1618, 7, 84, 2, 2, 1617, 1616, 3, 2, 2, 2, 1618, 1621,
	3, 2, 2, 2, 1619, 1617, 3, 2, 2, 2, 1619, 1620, 3, 2, 2, 2, 1620, 1622,
	3, 2, 2, 2, 1621, 1619, 3, 2, 2, 2, 1622, 1624, 5, 202, 102, 2, 1623, 1619,
	3, 2, 2, 2, 1623, 1624, 3, 2, 2, 2, 1624, 1628, 3, 2, 2, 2, 1625, 1627,
	7, 84, 2, 2, 1626, 1625, 3, 2, 2, 2, 1627, 1630, 3, 2, 2, 2, 1628, 1626,
	3, 2, 2, 2, 1628, 1629, 3, 2, 2, 2, 1629, 1631, 3, 2, 2, 2, 1630, 1628,
	3, 2, 2, 2, 1631, 1632, 7, 36, 2, 2, 1632, 201, 3, 2, 2, 2, 1633, 1645,
	5, 204, 103, 2, 1634, 1638, 5, 330, 166, 2, 1635, 1637, 7, 84, 2, 2, 1636,
	1635, 3, 2, 2, 2, 1637, 1640, 3, 2, 2, 2, 1638, 1636, 3, 2, 2, 2, 1638,
	1639, 3, 2, 2, 2, 1639, 1641, 3, 2, 2, 2, 1640, 1638, 3, 2, 2, 2, 1641,
	1642, 5, 204, 103, 2, 1642, 1644, 3, 2, 2, 2, 1643, 1634, 3, 2, 2, 2, 1644,
	1647, 3, 2, 2, 2, 1645, 1643, 3, 2, 2, 2, 1645, 1646, 3, 2, 2, 2, 1646,
	1649, 3, 2, 2, 2, 1647, 1645, 3, 2, 2, 2, 1648, 1650, 5, 330, 166, 2, 1649,
	1648, 3, 2, 2, 2, 1649, 1650, 3, 2, 2, 2, 1650, 203, 3, 2, 2, 2, 1651,
	1653, 5, 278, 140, 2, 1652, 1651, 3, 2, 2, 2, 1652, 1653, 3, 2, 2, 2, 1653,
	1654, 3, 2, 2, 2, 1654, 1655, 5, 176, 89, 2, 1655, 1656, 7, 40, 2, 2, 1656,
	1657, 5, 176, 89, 2, 1657, 205, 3, 2, 2, 2, 1658, 1659, 7, 32, 2, 2, 1659,
	1660, 5, 268, 135, 2, 1660, 207, 3, 2, 2, 2, 1661, 1665, 7, 34, 2, 2, 1662,
	1664, 7, 84, 2, 2, 1663, 1662, 3, 2, 2, 2, 1664, 1667, 3, 2, 2, 2, 1665,
	1663, 3, 2, 2, 2, 1665, 1666, 3, 2, 2, 2, 1666, 1668, 3, 2, 2, 2, 1667,
	1665, 3, 2, 2, 2, 1668, 1672, 5, 176, 89, 2, 1669, 1671, 7, 84, 2, 2, 1670,
	1669, 3, 2, 2, 2, 1671, 1674, 3, 2, 2, 2, 1672, 1670, 3, 2, 2, 2, 1672,
	1673, 3, 2, 2, 2, 1673, 1675, 3, 2, 2, 2, 1674, 1672, 3, 2, 2, 2, 1675,
	1676, 7, 37, 2, 2, 1676, 209, 3, 2, 2, 2, 1677, 1678, 7, 34, 2, 2, 1678,
	1690, 7, 37, 2, 2, 1679, 1680, 7, 34, 2, 2, 1680, 1683, 5, 212, 107, 2,
	1681, 1682, 7, 39, 2, 2, 1682, 1684, 5, 212, 107, 2, 1683, 1681, 3, 2,
	2, 2, 1684, 1685, 3, 2, 2, 2, 1685, 1683, 3, 2, 2, 2, 1685, 1686, 3, 2,
	2, 2, 1686, 1687, 3, 2, 2, 2, 1687, 1688, 7, 37, 2, 2, 1688, 1690, 3, 2,
	2, 2, 1689, 1677, 3, 2, 2, 2, 1689, 1679, 3, 2, 2, 2, 1690, 211, 3, 2,
	2, 2, 1691, 1697, 5, 176, 89, 2, 1692, 1693, 5, 268, 135, 2, 1693, 1694,
	7, 40, 2, 2, 1694, 1695, 5, 176, 89, 2, 1695, 1697, 3, 2, 2, 2, 1696, 1691,
	3, 2, 2, 2, 1696, 1692, 3, 2, 2, 2, 1697, 213, 3, 2, 2, 2, 1698, 1699,
	7, 44, 2, 2, 1699, 215, 3, 2, 2, 2, 1700, 1701, 8, 109, 1, 2, 1701, 1702,
	5, 190, 96, 2, 1702, 1735, 3, 2, 2, 2, 1703, 1704, 12, 9, 2, 2, 1704, 1734,
	5, 304, 153, 2, 1705, 1706, 12, 8, 2, 2, 1706, 1734, 5, 218, 110, 2, 1707,
	1708, 12, 7, 2, 2, 1708, 1709, 7, 32, 2, 2, 1709, 1734, 7, 76, 2, 2, 1710,
	1711, 12, 6, 2, 2, 1711, 1712, 7, 32, 2, 2, 1712, 1714, 5, 266, 134, 2,
	1713, 1715, 5, 46, 24, 2, 1714, 1713, 3, 2, 2, 2, 1714, 1715, 3, 2, 2,
	2, 1715, 1734, 3, 2, 2, 2, 1716, 1717, 12, 5, 2, 2, 1717, 1718, 7, 32,
	2, 2, 1718, 1719, 5, 266, 134, 2, 1719, 1720, 7, 34, 2, 2, 1720, 1721,
	5, 224, 113, 2, 1721, 1722, 7, 37, 2, 2, 1722, 1734, 3, 2, 2, 2, 1723,
	1724, 12, 4, 2, 2, 1724, 1725, 7, 34, 2, 2, 1725, 1726, 5, 224, 113, 2,
	1726, 1727, 7, 37, 2, 2, 1727, 1734, 3, 2, 2, 2, 1728, 1729, 12, 3, 2,
	2, 1729, 1730, 7, 35, 2, 2, 1730, 1731, 5, 178, 90, 2, 1731, 1732, 7, 38,
	2, 2, 1732, 1734, 3, 2, 2, 2, 1733, 1703, 3, 2, 2, 2, 1733, 1705, 3, 2,
	2, 2, 1733, 1707, 3, 2, 2, 2, 1733, 1710, 3, 2, 2, 2, 1733, 1716, 3, 2,
	2, 2, 1733, 1723, 3, 2, 2, 2, 1733, 1728, 3, 2, 2, 2, 1734, 1737, 3, 2,
	2, 2, 1735, 1733, 3, 2, 2, 2, 1735, 1736, 3, 2, 2, 2, 1736, 217, 3, 2,
	2, 2, 1737, 1735, 3, 2, 2, 2, 1738, 1739, 7, 34, 2, 2, 1739, 1745, 7, 37,
	2, 2, 1740, 1741, 7, 34, 2, 2, 1741, 1742, 5, 220, 111, 2, 1742, 1743,
	7, 37, 2, 2, 1743, 1745, 3, 2, 2, 2, 1744, 1738, 3, 2, 2, 2, 1744, 1740,
	3, 2, 2, 2, 1745, 219, 3, 2, 2, 2, 1746, 1751, 5, 222, 112, 2, 1747, 1748,
	7, 39, 2, 2, 1748, 1750, 5, 222, 112, 2, 1749, 1747, 3, 2, 2, 2, 1750,
	1753, 3, 2, 2, 2, 1751, 1749, 3, 2, 2, 2, 1751, 1752, 3, 2, 2, 2, 1752,
	221, 3, 2, 2, 2, 1753, 1751, 3, 2, 2, 2, 1754, 1765, 5, 176, 89, 2, 1755,
	1756, 5, 268, 135, 2, 1756, 1757, 7, 40, 2, 2, 1757, 1758, 5, 176, 89,
	2, 1758, 1765, 3, 2, 2, 2, 1759, 1765, 5, 306, 154, 2, 1760, 1761, 5, 268,
	135, 2, 1761, 1762, 7, 40, 2, 2, 1762, 1763, 5, 306, 154, 2, 1763, 1765,
	3, 2, 2, 2, 1764, 1754, 3, 2, 2, 2, 1764, 1755, 3, 2, 2, 2, 1764, 1759,
	3, 2, 2, 2, 1764, 1760, 3, 2, 2, 2, 1765, 223, 3, 2, 2, 2, 1766, 1770,
	5, 226, 114, 2, 1767, 1769, 5, 226, 114, 2, 1768, 1767, 3, 2, 2, 2, 1769,
	1772, 3, 2, 2, 2, 1770, 1768, 3, 2, 2, 2, 1770, 1771, 3, 2, 2, 2, 1771,
	225, 3, 2, 2, 2, 1772, 1770, 3, 2, 2, 2, 1773, 1774, 5, 268, 135, 2, 1774,
	1775, 7, 40, 2, 2, 1775, 227, 3, 2, 2, 2, 1776, 1777, 8, 115, 1, 2, 1777,
	1780, 5, 230, 116, 2, 1778, 1780, 5, 248, 125, 2, 1779, 1776, 3, 2, 2,
	2, 1779, 1778, 3, 2, 2, 2, 1780, 1785, 3, 2, 2, 2, 1781, 1782, 12, 3, 2,
	2, 1782, 1784, 7, 46, 2, 2, 1783, 1781, 3, 2, 2, 2, 1784, 1787, 3, 2, 2,
	2, 1785, 1783, 3, 2, 2, 2, 1785, 1786, 3, 2, 2, 2, 1786, 229, 3, 2, 2,
	2, 1787, 1785, 3, 2, 2, 2, 1788, 1789, 8, 116, 1, 2, 1789, 1790, 5, 232,
	117, 2, 1790, 1835, 3, 2, 2, 2, 1791, 1793, 12, 5, 2, 2, 1792, 1794, 5,
	174, 88, 2, 1793, 1792, 3, 2, 2, 2, 1793, 1794, 3, 2, 2, 2, 1794, 1798,
	3, 2, 2, 2, 1795, 1797, 7, 84, 2, 2, 1796, 1795, 3, 2, 2, 2, 1797, 1800,
	3, 2, 2, 2, 1798, 1796, 3, 2, 2, 2, 1798, 1799, 3, 2, 2, 2, 1799, 1801,
	3, 2, 2, 2, 1800, 1798, 3, 2, 2, 2, 1801, 1805, 7, 51, 2, 2, 1802, 1804,
	7, 84, 2, 2, 1803, 1802, 3, 2, 2, 2, 1804, 1807, 3, 2, 2, 2, 1805, 1803,
	3, 2, 2, 2, 1805, 1806, 3, 2, 2, 2, 1806, 1808, 3, 2, 2, 2, 1807, 1805,
	3, 2, 2, 2, 1808, 1810, 5, 230, 116, 2, 1809, 1811, 5, 174, 88, 2, 1810,
	1809, 3, 2, 2, 2, 1810, 1811, 3, 2, 2, 2, 1811, 1834, 3, 2, 2, 2, 1812,
	1814, 12, 4, 2, 2, 1813, 1815, 5, 174, 88, 2, 1814, 1813, 3, 2, 2, 2, 1814,
	1815, 3, 2, 2, 2, 1815, 1819, 3, 2, 2, 2, 1816, 1818, 7, 84, 2, 2, 1817,
	1816, 3, 2, 2, 2, 1818, 1821, 3, 2, 2, 2, 1819, 1817, 3, 2, 2, 2, 1819,
	1820, 3, 2, 2, 2, 1820, 1822, 3, 2, 2, 2, 1821, 1819, 3, 2, 2, 2, 1822,
	1826, 7, 48, 2, 2, 1823, 1825, 7, 84, 2, 2, 1824, 1823, 3, 2, 2, 2, 1825,
	1828, 3, 2, 2, 2, 1826, 1824, 3, 2, 2, 2, 1826, 1827, 3, 2, 2, 2, 1827,
	1829, 3, 2, 2, 2, 1828, 1826, 3, 2, 2, 2, 1829, 1831, 5, 230, 116, 2, 1830,
	1832, 5, 174, 88, 2, 1831, 1830, 3, 2, 2, 2, 1831, 1832, 3, 2, 2, 2, 1832,
	1834, 3, 2, 2, 2, 1833, 1791, 3, 2, 2, 2, 1833, 1812, 3, 2, 2, 2, 1834,
	1837, 3, 2, 2, 2, 1835, 1833, 3, 2, 2, 2, 1835, 1836, 3, 2, 2, 2, 1836,
	231, 3, 2, 2, 2, 1837, 1835, 3, 2, 2, 2, 1838, 1843, 5, 256, 129, 2, 1839,
	1843, 5, 258, 130, 2, 1840, 1843, 5, 242, 122, 2, 1841, 1843, 5, 236, 119,
	2, 1842, 1838, 3, 2, 2, 2, 1842, 1839, 3, 2, 2, 2, 1842, 1840, 3, 2, 2,
	2, 1842, 1841, 3, 2, 2, 2, 1843, 233, 3, 2, 2, 2, 1844, 1845, 7, 40, 2,
	2, 1845, 1847, 5, 228, 115, 2, 1846, 1848, 5, 174, 88, 2, 1847, 1846, 3,
	2, 2, 2, 1847, 1848, 3, 2, 2, 2, 1848, 235, 3, 2, 2, 2, 1849, 1850, 5,
	58, 30, 2, 1850, 1851, 7, 32, 2, 2, 1851, 1853, 3, 2, 2, 2, 1852, 1849,
	3, 2, 2, 2, 1852, 1853, 3, 2, 2, 2, 1853, 1854, 3, 2, 2, 2, 1854, 1859,
	5, 238, 120, 2, 1855, 1856, 7, 32, 2, 2, 1856, 1858, 5, 238, 120, 2, 1857,
	1855, 3, 2, 2, 2, 1858, 1861, 3, 2, 2, 2, 1859, 1857, 3, 2, 2, 2, 1859,
	1860, 3, 2, 2, 2, 1860, 237, 3, 2, 2, 2, 1861, 1859, 3, 2, 2, 2, 1862,
	1864, 5, 240, 121, 2, 1863, 1865, 5, 46, 24, 2, 1864, 1863, 3, 2, 2, 2,
	1864, 1865, 3, 2, 2, 2, 1865, 239, 3, 2, 2, 2, 1866, 1867, 7, 66, 2, 2,
	1867, 241, 3, 2, 2, 2, 1868, 1876, 7, 34, 2, 2, 1869, 1871, 7, 84, 2, 2,
	1870, 1869, 3, 2, 2, 2, 1871, 1874, 3, 2, 2, 2, 1872, 1870, 3, 2, 2, 2,
	1872, 1873, 3, 2, 2, 2, 1873, 1875, 3, 2, 2, 2, 1874, 1872, 3, 2, 2, 2,
	1875, 1877, 5, 244, 123, 2, 1876, 1872, 3, 2, 2, 2, 1876, 1877, 3, 2, 2,
	2, 1877, 1881, 3, 2, 2, 2, 1878, 1880, 7, 84, 2, 2, 1879, 1878, 3, 2, 2,
	2, 1880, 1883, 3, 2, 2, 2, 1881, 1879, 3, 2, 2, 2, 1881, 1882, 3, 2, 2,
	2, 1882, 1884, 3, 2, 2, 2, 1883, 1881, 3, 2, 2, 2, 1884, 1885, 7, 37, 2,
	2, 1885, 243, 3, 2, 2, 2, 1886, 1898, 5, 246, 124, 2, 1887, 1891, 5, 330,
	166, 2, 1888, 1890, 7, 84, 2, 2, 1889, 1888, 3, 2, 2, 2, 1890, 1893, 3,
	2, 2, 2, 1891, 1889, 3, 2, 2, 2, 1891, 1892, 3, 2, 2, 2, 1892, 1894, 3,
	2, 2, 2, 1893, 1891, 3, 2, 2, 2, 1894, 1895, 5, 246, 124, 2, 1895, 1897,
	3, 2, 2, 2, 1896, 1887, 3, 2, 2, 2, 1897, 1900, 3, 2, 2, 2, 1898, 1896,
	3, 2, 2, 2, 1898, 1899, 3, 2, 2, 2, 1899, 1902, 3, 2, 2, 2, 1900, 1898,
	3, 2, 2, 2, 1901, 1903, 5, 330, 166, 2, 1902, 1901, 3, 2, 2, 2, 1902, 1903,
	3, 2, 2, 2, 1903, 245, 3, 2, 2, 2, 1904, 1905, 5, 266, 134, 2, 1905, 1906,
	7, 40, 2, 2, 1906, 1908, 3, 2, 2, 2, 1907, 1904, 3, 2, 2, 2, 1907, 1908,
	3, 2, 2, 2, 1908, 1909, 3, 2, 2, 2, 1909, 1911, 5, 228, 115, 2, 1910, 1912,
	5, 174, 88, 2, 1911, 1910, 3, 2, 2, 2, 1911, 1912, 3, 2, 2, 2, 1912, 247,
	3, 2, 2, 2, 1913, 1914, 5, 250, 126, 2, 1914, 1915, 5, 292, 147, 2, 1915,
	1916, 5, 228, 115, 2, 1916, 249, 3, 2, 2, 2, 1917, 1918, 7, 34, 2, 2, 1918,
	1927, 7, 37, 2, 2, 1919, 1920, 7, 34, 2, 2, 1920, 1922, 5, 252, 127, 2,
	1921, 1923, 5, 294, 148, 2, 1922, 1921, 3, 2, 2, 2, 1922, 1923, 3, 2, 2,
	2, 1923, 1924, 3, 2, 2, 2, 1924, 1925, 7, 37, 2, 2, 1925, 1927, 3, 2, 2,
	2, 1926, 1917, 3, 2, 2, 2, 1926, 1919, 3, 2, 2, 2, 1927, 251, 3, 2, 2,
	2, 1928, 1940, 5, 254, 128, 2, 1929, 1933, 5, 326, 164, 2, 1930, 1932,
	7, 84, 2, 2, 1931, 1930, 3, 2, 2, 2, 1932, 1935, 3, 2, 2, 2, 1933, 1931,
	3, 2, 2, 2, 1933, 1934, 3, 2, 2, 2, 1934, 1936, 3, 2, 2, 2, 1935, 1933,
	3, 2, 2, 2, 1936, 1937, 5, 254, 128, 2, 1937, 1939, 3, 2, 2, 2, 1938, 1929,
	3, 2, 2, 2, 1939, 1942, 3, 2, 2, 2, 1940, 1938, 3, 2, 2, 2, 1940, 1941,
	3, 2, 2, 2, 1941, 1944, 3, 2, 2, 2, 1942, 1940, 3, 2, 2, 2, 1943, 1945,
	5, 326, 164, 2, 1944, 1943, 3, 2, 2, 2, 1944, 1945, 3, 2, 2, 2, 1945, 253,
	3, 2, 2, 2, 1946, 1947, 5, 268, 135, 2, 1947, 1948, 7, 40, 2, 2, 1948,
	1949, 5, 228, 115, 2, 1949, 1951, 7, 65, 2, 2, 1950, 1952, 5, 174, 88,
	2, 1951, 1950, 3, 2, 2, 2, 1951, 1952, 3, 2, 2, 2, 1952, 1957, 3, 2, 2,
	2, 1953, 1954, 5, 268, 135, 2, 1954, 1955, 5, 234, 118, 2, 1955, 1957,
	3, 2, 2, 2, 1956, 1946, 3, 2, 2, 2, 1956, 1953, 3, 2, 2, 2, 1957, 255,
	3, 2, 2, 2, 1958, 1959, 7, 35, 2, 2, 1959, 1961, 5, 228, 115, 2, 1960,
	1962, 5, 174, 88, 2, 1961, 1960, 3, 2, 2, 2, 1961, 1962, 3, 2, 2, 2, 1962,
	1963, 3, 2, 2, 2, 1963, 1964, 7, 38, 2, 2, 1964, 257, 3, 2, 2, 2, 1965,
	1966, 7, 33, 2, 2, 1966, 1967, 5, 228, 115, 2, 1967, 1968, 7, 40, 2, 2,
	1968, 1970, 5, 228, 115, 2, 1969, 1971, 5, 174, 88, 2, 1970, 1969, 3, 2,
	2, 2, 1970, 1971, 3, 2, 2, 2, 1971, 1972, 3, 2, 2, 2, 1972, 1973, 7, 36,
	2, 2, 1973, 259, 3, 2, 2, 2, 1974, 1978, 7, 40, 2, 2, 1975, 1977, 7, 84,
	2, 2, 1976, 1975, 3, 2, 2, 2, 1977, 1980, 3, 2, 2, 2, 1978, 1976, 3, 2,
	2, 2, 1978, 1979, 3, 2, 2, 2, 1979, 1981, 3, 2, 2, 2, 1980, 1978, 3, 2,
	2, 2, 1981, 1982, 5, 262, 132, 2, 1982, 261, 3, 2, 2, 2, 1983, 1995, 5,
	264, 133, 2, 1984, 1988, 5, 330, 166, 2, 1985, 1987, 7, 84, 2, 2, 1986,
	1985, 3, 2, 2, 2, 1987, 1990, 3, 2, 2, 2, 1988, 1986, 3, 2, 2, 2, 1988,
	1989, 3, 2, 2, 2, 1989, 1991, 3, 2, 2, 2, 1990, 1988, 3, 2, 2, 2, 1991,
	1992, 5, 264, 133, 2, 1992, 1994, 3, 2, 2, 2, 1993, 1984, 3, 2, 2, 2, 1994,
	1997, 3, 2, 2, 2, 1995, 1993, 3, 2, 2, 2, 1995, 1996, 3, 2, 2, 2, 1996,
	1999, 3, 2, 2, 2, 1997, 1995, 3, 2, 2, 2, 1998, 2000, 5, 330, 166, 2, 1999,
	1998, 3, 2, 2, 2, 1999, 2000, 3, 2, 2, 2, 2000, 263, 3, 2, 2, 2, 2001,
	2003, 5, 236, 119, 2, 2002, 2004, 5, 174, 88, 2, 2003, 2002, 3, 2, 2, 2,
	2003, 2004, 3, 2, 2, 2, 2004, 265, 3, 2, 2, 2, 2005, 2008, 7, 67, 2, 2,
	2006, 2008, 5, 274, 138, 2, 2007, 2005, 3, 2, 2, 2, 2007, 2006, 3, 2, 2,
	2, 2008, 267, 3, 2, 2, 2, 2009, 2012, 7, 67, 2, 2, 2010, 2012, 5, 276,
	139, 2, 2011, 2009, 3, 2, 2, 2, 2011, 2010, 3, 2, 2, 2, 2012, 269, 3, 2,
	2, 2, 2013, 2018, 5, 266, 134, 2, 2014, 2015, 7, 32, 2, 2, 2015, 2017,
	5, 266, 134, 2, 2016, 2014, 3, 2, 2, 2, 2017, 2020, 3, 2, 2, 2, 2018, 2016,
	3, 2, 2, 2, 2018, 2019, 3, 2, 2, 2, 2019, 271, 3, 2, 2, 2, 2020, 2018,
	3, 2, 2, 2, 2021, 2022, 9, 2, 2, 2, 2022, 273, 3, 2, 2, 2, 2023, 2024,
	9, 3, 2, 2, 2024, 275, 3, 2, 2, 2, 2025, 2026, 9, 3, 2, 2, 2026, 277, 3,
	2, 2, 2, 2027, 2032, 7, 85, 2, 2, 2028, 2029, 7, 84, 2, 2, 2029, 2031,
	7, 85, 2, 2, 2030, 2028, 3, 2, 2, 2, 2031, 2034, 3, 2, 2, 2, 2032, 2030,
	3, 2, 2, 2, 2032, 2033, 3, 2, 2, 2, 2033, 2035, 3, 2, 2, 2, 2034, 2032,
	3, 2, 2, 2, 2035, 2036, 7, 84, 2, 2, 2036, 279, 3, 2, 2, 2, 2037, 2042,
	7, 86, 2, 2, 2038, 2039, 7, 84, 2, 2, 2039, 2041, 7, 86, 2, 2, 2040, 2038,
	3, 2, 2, 2, 2041, 2044, 3, 2, 2, 2, 2042, 2040, 3, 2, 2, 2, 2042, 2043,
	3, 2, 2, 2, 2043, 281, 3, 2, 2, 2, 2044, 2042, 3, 2, 2, 2, 2045, 2046,
	7, 50, 2, 2, 2046, 283, 3, 2, 2, 2, 2047, 2048, 7, 49, 2, 2, 2048, 285,
	3, 2, 2, 2, 2049, 2050, 7, 48, 2, 2, 2050, 2051, 7, 48, 2, 2, 2051, 287,
	3, 2, 2, 2, 2052, 2053, 7, 51, 2, 2, 2053, 2054, 7, 51, 2, 2, 2054, 289,
	3, 2, 2, 2, 2055, 2056, 7, 43, 2, 2, 2056, 2057, 7, 50, 2, 2, 2057, 291,
	3, 2, 2, 2, 2058, 2059, 7, 61, 2, 2, 2059, 293, 3, 2, 2, 2, 2060, 2061,
	7, 62, 2, 2, 2061, 295, 3, 2, 2, 2, 2062, 2063, 7, 64, 2, 2, 2063, 297,
	3, 2, 2, 2, 2064, 2065, 7, 50, 2, 2, 2065, 2066, 7, 50, 2, 2, 2066, 299,
	3, 2, 2, 2, 2067, 2068, 5, 306, 154, 2, 2068, 301, 3, 2, 2, 2, 2069, 2070,
	5, 306, 154, 2, 2070, 303, 3, 2, 2, 2, 2071, 2072, 5, 306, 154, 2, 2072,
	305, 3, 2, 2, 2, 2073, 2077, 5, 310, 156, 2, 2074, 2076, 5, 308, 155, 2,
	2075, 2074, 3, 2, 2, 2, 2076, 2079, 3, 2, 2, 2, 2077, 2075, 3, 2, 2, 2,
	2077, 2078, 3, 2, 2, 2, 2078, 2088, 3, 2, 2, 2, 2079, 2077, 3, 2, 2, 2,
	2080, 2084, 5, 312, 157, 2, 2081, 2083, 5, 314, 158, 2, 2082, 2081, 3,
	2, 2, 2, 2083, 2086, 3, 2, 2, 2, 2084, 2082, 3, 2, 2, 2, 2084, 2085, 3,
	2, 2, 2, 2085, 2088, 3, 2, 2, 2, 2086, 2084, 3, 2, 2, 2, 2087, 2073, 3,
	2, 2, 2, 2087, 2080, 3, 2, 2, 2, 2088, 307, 3, 2, 2, 2, 2089, 2092, 5,
	310, 156, 2, 2090, 2092, 7, 69, 2, 2, 2091, 2089, 3, 2, 2, 2, 2091, 2090,
	3, 2, 2, 2, 2092, 309, 3, 2, 2, 2, 2093, 2096, 9, 4, 2, 2, 2094, 2096,
	7, 68, 2, 2, 2095, 2093, 3, 2, 2, 2, 2095, 2094, 3, 2, 2, 2, 2096, 311,
	3, 2, 2, 2, 2097, 2098, 7, 32, 2, 2, 2098, 313, 3, 2, 2, 2, 2099, 2102,
	7, 32, 2, 2, 2100, 2102, 5, 308, 155, 2, 2101, 2099, 3, 2, 2, 2, 2101,
	2100, 3, 2, 2, 2, 2102, 315, 3, 2, 2, 2, 2103, 2108, 5, 318, 160, 2, 2104,
	2108, 5, 322, 162, 2, 2105, 2108, 7, 71, 2, 2, 2106, 2108, 7, 72, 2, 2,
	2107, 2103, 3, 2, 2, 2, 2107, 2104, 3, 2, 2, 2, 2107, 2105, 3, 2, 2, 2,
	2107, 2106, 3, 2, 2, 2, 2108, 317, 3, 2, 2, 2, 2109, 2111, 5, 284, 143,
	2, 2110, 2109, 3, 2, 2, 2, 2110, 2111, 3, 2, 2, 2, 2111, 2112, 3, 2, 2,
	2, 2112, 2118, 5, 320, 161, 2, 2113, 2115, 5, 284, 143, 2, 2114, 2113,
	3, 2, 2, 2, 2114, 2115, 3, 2, 2, 2, 2115, 2116, 3, 2, 2, 2, 2116, 2118,
	7, 78, 2, 2, 2117, 2110, 3, 2, 2, 2, 2117, 2114, 3, 2, 2, 2, 2118, 319,
	3, 2, 2, 2, 2119, 2120, 9, 5, 2, 2, 2120, 321, 3, 2, 2, 2, 2121, 2122,
	9, 6, 2, 2, 2122, 323, 3, 2, 2, 2, 2123, 2130, 7, 41, 2, 2, 2124, 2126,
	7, 84, 2, 2, 2125, 2124, 3, 2, 2, 2, 2126, 2127, 3, 2, 2, 2, 2127, 2125,
	3, 2, 2, 2, 2127, 2128, 3, 2, 2, 2, 2128, 2130, 3, 2, 2, 2, 2129, 2123,
	3, 2, 2, 2, 2129, 2125, 3, 2, 2, 2, 2130, 325, 3, 2, 2, 2, 2131, 2138,
	7, 39, 2, 2, 2132, 2134, 7, 84, 2, 2, 2133, 2132, 3, 2, 2, 2, 2134, 2135,
	3, 2, 2, 2, 2135, 2133, 3, 2, 2, 2, 2135, 2136, 3, 2, 2, 2, 2136, 2138,
	3, 2, 2, 2, 2137, 2131, 3, 2, 2, 2, 2137, 2133, 3, 2, 2, 2, 2138, 327,
	3, 2, 2, 2, 2139, 2147, 7, 41, 2, 2, 2140, 2142, 7, 84, 2, 2, 2141, 2140,
	3, 2, 2, 2, 2142, 2145, 3, 2, 2, 2, 2143, 2141, 3, 2, 2, 2, 2143, 2144,
	3, 2, 2, 2, 2144, 2146, 3, 2, 2, 2, 2145, 2143, 3, 2, 2, 2, 2146, 2148,
	5, 280, 141, 2, 2147, 2143, 3, 2, 2, 2, 2147, 2148, 3, 2, 2, 2, 2148, 2164,
	3, 2, 2, 2, 2149, 2151, 7, 84, 2, 2, 2150, 2149, 3, 2, 2, 2, 2151, 2154,
	3, 2, 2, 2, 2152, 2150, 3, 2, 2, 2, 2152, 2153, 3, 2, 2, 2, 2153, 2155,
	3, 2, 2, 2, 2154, 2152, 3, 2, 2, 2, 2155, 2157, 5, 280, 141, 2, 2156, 2152,
	3, 2, 2, 2, 2156, 2157, 3, 2, 2, 2, 2157, 2159, 3, 2, 2, 2, 2158, 2160,
	7, 84, 2, 2, 2159, 2158, 3, 2, 2, 2, 2160, 2161, 3, 2, 2, 2, 2161, 2159,
	3, 2, 2, 2, 2161, 2162, 3, 2, 2, 2, 2162, 2164, 3, 2, 2, 2, 2163, 2139,
	3, 2, 2, 2, 2163, 2156, 3, 2, 2, 2, 2164, 329, 3, 2, 2, 2, 2165, 2173,
	7, 39, 2, 2, 2166, 2168, 7, 84, 2, 2, 2167, 2166, 3, 2, 2, 2, 2168, 2171,
	3, 2, 2, 2, 2169, 2167, 3, 2, 2, 2, 2169, 2170, 3, 2, 2, 2, 2170, 2172,
	3, 2, 2, 2, 2171, 2169, 3, 2, 2, 2, 2172, 2174, 5, 280, 141, 2, 2173, 2169,
	3, 2, 2, 2, 2173, 2174, 3, 2, 2, 2, 2174, 2190, 3, 2, 2, 2, 2175, 2177,
	7, 84, 2, 2, 2176, 2175, 3, 2, 2, 2, 2177, 2180, 3, 2, 2, 2, 2178, 2176,
	3, 2, 2, 2, 2178, 2179, 3, 2, 2, 2, 2179, 2181, 3, 2, 2, 2, 2180, 2178,
	3, 2, 2, 2, 2181, 2183, 5, 280, 141, 2, 2182, 2178, 3, 2, 2, 2, 2182, 2183,
	3, 2, 2, 2, 2183, 2185, 3, 2, 2, 2, 2184, 2186, 7, 84, 2, 2, 2185, 2184,
	3, 2, 2, 2, 2186, 2187, 3, 2, 2, 2, 2187, 2185, 3, 2, 2, 2, 2187, 2188,
	3, 2, 2, 2, 2188, 2190, 3, 2, 2, 2, 2189, 2165, 3, 2, 2, 2, 2189, 2182,
	3, 2, 2, 2, 2190, 331, 3, 2, 2, 2, 308, 335, 339, 344, 354, 361, 368, 372,
	377, 384, 392, 402, 412, 419, 424, 431, 438, 445, 452, 456, 462, 470, 474,
	481, 488, 492, 497, 507, 514, 523, 530, 535, 540, 548, 554, 561, 571, 578,
	582, 588, 594, 601, 611, 618, 625, 636, 642, 646, 651, 657, 662, 666, 671,
	679, 683, 690, 699, 706, 720, 730, 737, 744, 750, 755, 759, 763, 767, 771,
	774, 779, 783, 788, 799, 806, 814, 820, 825, 829, 835, 846, 849, 854, 858,
	863, 869, 874, 885, 893, 899, 903, 906, 911, 915, 920, 927, 933, 937, 943,
	947, 952, 956, 962, 966, 971, 975, 980, 991, 998, 1003, 1010, 1017, 1021,
	1028, 1032, 1039, 1041, 1044, 1049, 1053, 1058, 1064, 1069, 1073, 1078,
	1087, 1091, 1096, 1100, 1105, 1117, 1124, 1128, 1131, 1136, 1140, 1145,
	1150, 1155, 1159, 1162, 1167, 1171, 1176, 1182, 1187, 1191, 1196, 1200,
	1208, 1212, 1217, 1221, 1226, 1236, 1243, 1247, 1254, 1257, 1262, 1266,
	1271, 1279, 1283, 1286, 1291, 1295, 1300, 1306, 1311, 1315, 1320, 1331,
	1335, 1340, 1344, 1349, 1359, 1366, 1370, 1374, 1377, 1382, 1386, 1391,
	1396, 1401, 1409, 1413, 1417, 1423, 1430, 1439, 1448, 1461, 1465, 1472,
	1479, 1483, 1488, 1497, 1503, 1508, 1515, 1522, 1526, 1532, 1544, 1549,
	1559, 1563, 1570, 1575, 1581, 1585, 1590, 1600, 1607, 1611, 1619, 1623,
	1628, 1638, 1645, 1649, 1652, 1665, 1672, 1685, 1689, 1696, 1714, 1733,
	1735, 1744, 1751, 1764, 1770, 1779, 1785, 1793, 1798, 1805, 1810, 1814,
	1819, 1826, 1831, 1833, 1835, 1842, 1847, 1852, 1859, 1864, 1872, 1876,
	1881, 1891, 1898, 1902, 1907, 1911, 1922, 1926, 1933, 1940, 1944, 1951,
	1956, 1961, 1970, 1978, 1988, 1995, 1999, 2003, 2007, 2011, 2018, 2032,
	2042, 2077, 2084, 2087, 2091, 2095, 2101, 2107, 2110, 2114, 2117, 2127,
	2129, 2135, 2137, 2143, 2147, 2152, 2156, 2161, 2163, 2169, 2173, 2178,
	2182, 2187, 2189,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'and'", "'as'", "'attribute'", "'break'", "'const'", "'continue'",
	"'else'", "'enum'", "'false'", "'for'", "'func'", "'if'", "'import'", "'in'",
	"'interface'", "'is'", "'match'", "'not'", "'null'", "'or'", "'package'",
	"'repeat'", "'return'", "'struct'", "'true'", "'type'", "'var'", "'while'",
	"'xor'", "'.'", "'{'", "'('", "'['", "'}'", "')'", "']'", "','", "':'",
	"';'", "'<'", "'>'", "'_'", "'!'", "'?'", "'@'", "'&'", "'-'", "'='", "'|'",
	"'/'", "'+'", "'*'", "'%'", "'^'", "'~'", "'$'",
}
var symbolicNames = []string{
	"", "KEYWORD_AND", "KEYWORD_AS", "KEYWORD_ATTRIBUTE", "KEYWORD_BREAK",
	"KEYWORD_CONST", "KEYWORD_CONTINUE", "KEYWORD_ELSE", "KEYWORD_ENUM", "KEYWORD_FALSE",
	"KEYWORD_FOR", "KEYWORD_FUNC", "KEYWORD_IF", "KEYWORD_IMPORT", "KEYWORD_IN",
	"KEYWORD_INTERFACE", "KEYWORD_IS", "KEYWORD_MATCH", "KEYWORD_NOT", "KEYWORD_NULL",
	"KEYWORD_OR", "KEYWORD_PACKAGE", "KEYWORD_REPEATE", "KEYWORD_RETURN", "KEYWORD_STRUCT",
	"KEYWORD_TRUE", "KEYWORD_TYPE", "KEYWORD_VAR", "KEYWORD_WHILE", "KEYWORD_XOR",
	"DOT", "LCURLY", "LPAREN", "LBRACK", "RCURLY", "RPAREN", "RBRACK", "COMMA",
	"COLON", "SEMI", "LT", "GT", "UNDERSCORE", "BANG", "QUESTION", "AT", "AND",
	"SUB", "EQUAL", "OR", "DIV", "ADD", "MUL", "MOD", "CARET", "TILDE", "DOLLER",
	"COLON_EQUAL", "RIGHT_RIGHT_ARROWS", "RIGHT_ARROW", "DOT_DOT", "LT_DOT_DOT",
	"DOT_DOT_LT", "ELLIPSIS", "TypeName", "Identifier", "Operator_head_other",
	"Operator_following_character", "Implicit_parameter_name", "BoolLiteral",
	"NullLiteral", "BinaryLiteral", "OctalLiteral", "DecimalLiteral", "PureDecimalDigits",
	"HexadecimalLiteral", "FloatLiteral", "StaticStringLiteral", "InterpolatedStringLiteral",
	"WS", "DelimitedComment", "LineComment", "EOL", "LineDocument", "FollowingLineDocument",
}

var ruleNames = []string{
	"mojoFile", "statement", "statements", "loopStatement", "forInStatement",
	"whileStatement", "conditions", "condition", "optionalBindingCondition",
	"branchStatement", "ifStatement", "elseClause", "matchStatement", "matchCases",
	"matchCase", "controlTransferStatement", "breakStatement", "continueStatement",
	"returnStatement", "genericParameterClause", "genericParameters", "genericParameter",
	"genericArgumentClause", "genericArguments", "genericArgument", "declaration",
	"codeBlock", "packageDeclaration", "packageIdentifier", "importDeclaration",
	"importPath", "importPathIdentifier", "importAllClause", "importValueAsClause",
	"importTypeClause", "importTypeAsClause", "importGroupClause", "importGroup",
	"importValue", "importType", "constantDeclaration", "patternInitializers",
	"patternInitializer", "initializer", "variableDeclaration", "typeAliasDeclaration",
	"typealiasName", "typealiasAssignment", "functionDeclaration", "functionHead",
	"functionName", "functionSignature", "functionResult", "functionBody",
	"functionParameterClause", "functionParameters", "functionParameter", "enumDeclaration",
	"enumBody", "enumName", "enumMembers", "enumMember", "structDeclaration",
	"structName", "structBody", "structMembers", "structMember", "structMemberDeclaration",
	"interfaceDeclaration", "interfaceName", "interfaceBody", "interfaceMembers",
	"interfaceMember", "interfaceMethodDeclaration", "pattern", "wildcard_pattern",
	"identifierPattern", "tuple_pattern", "tuple_pattern_element_list", "tuple_pattern_element",
	"optional_pattern", "expression_pattern", "attribute", "attributeName",
	"attributeNameIdentifier", "attributeArgumentClause", "attributes", "expression",
	"expressions", "prefixExpression", "binaryExpression", "binaryExpressions",
	"conditional_operator", "type_casting_operator", "primaryExpression", "literalExpression",
	"arrayLiteral", "arrayLiteralItems", "arrayLiteralItem", "objectLiteral",
	"objectLiteralItems", "objectLiteralItem", "implicitMemberExpression",
	"parenthesizedExpression", "tupleExpression", "tupleElement", "wildcardExpression",
	"postfixExpression", "functionCallArgumentClause", "function_call_argument_list",
	"function_call_argument", "argumentNameList", "argument_name", "type_",
	"basicType", "primeType", "typeAnnotation", "typeIdentifier", "typeIdentifierClause",
	"typeName", "tupleType", "tupleTypeElements", "tupleTypeElement", "functionType",
	"functionTypeArgumentClause", "functionTypeArguments", "functionTypeArgument",
	"arrayType", "dictionaryType", "typeInheritanceClause", "typeInheritances",
	"typeInheritance", "declarationIdentifier", "labelIdentifier", "path_identifier",
	"identifier", "keyword_as_identifier_in_declarations", "keyword_as_identifier_in_labels",
	"document", "followingDocument", "assignmentOperator", "negatePrefixOperator",
	"compilation_condition_AND", "compilation_condition_OR", "compilation_condition_GE",
	"arrowOperator", "range_operator", "range_right_open_operator", "same_type_equals",
	"binaryOperator", "prefixOperator", "postfixOperator", "operator", "operator_character",
	"operator_head", "dot_operator_head", "dot_operator_character", "literal",
	"numericLiteral", "integerLiteral", "stringLiteral", "eos", "eov", "eosWithDocument",
	"eovWithDocument",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type MojoParser struct {
	*antlr.BaseParser
}

func NewMojoParser(input antlr.TokenStream) *MojoParser {
	this := new(MojoParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "MojoParser.g4"

	return this
}

// MojoParser tokens.
const (
	MojoParserEOF                          = antlr.TokenEOF
	MojoParserKEYWORD_AND                  = 1
	MojoParserKEYWORD_AS                   = 2
	MojoParserKEYWORD_ATTRIBUTE            = 3
	MojoParserKEYWORD_BREAK                = 4
	MojoParserKEYWORD_CONST                = 5
	MojoParserKEYWORD_CONTINUE             = 6
	MojoParserKEYWORD_ELSE                 = 7
	MojoParserKEYWORD_ENUM                 = 8
	MojoParserKEYWORD_FALSE                = 9
	MojoParserKEYWORD_FOR                  = 10
	MojoParserKEYWORD_FUNC                 = 11
	MojoParserKEYWORD_IF                   = 12
	MojoParserKEYWORD_IMPORT               = 13
	MojoParserKEYWORD_IN                   = 14
	MojoParserKEYWORD_INTERFACE            = 15
	MojoParserKEYWORD_IS                   = 16
	MojoParserKEYWORD_MATCH                = 17
	MojoParserKEYWORD_NOT                  = 18
	MojoParserKEYWORD_NULL                 = 19
	MojoParserKEYWORD_OR                   = 20
	MojoParserKEYWORD_PACKAGE              = 21
	MojoParserKEYWORD_REPEATE              = 22
	MojoParserKEYWORD_RETURN               = 23
	MojoParserKEYWORD_STRUCT               = 24
	MojoParserKEYWORD_TRUE                 = 25
	MojoParserKEYWORD_TYPE                 = 26
	MojoParserKEYWORD_VAR                  = 27
	MojoParserKEYWORD_WHILE                = 28
	MojoParserKEYWORD_XOR                  = 29
	MojoParserDOT                          = 30
	MojoParserLCURLY                       = 31
	MojoParserLPAREN                       = 32
	MojoParserLBRACK                       = 33
	MojoParserRCURLY                       = 34
	MojoParserRPAREN                       = 35
	MojoParserRBRACK                       = 36
	MojoParserCOMMA                        = 37
	MojoParserCOLON                        = 38
	MojoParserSEMI                         = 39
	MojoParserLT                           = 40
	MojoParserGT                           = 41
	MojoParserUNDERSCORE                   = 42
	MojoParserBANG                         = 43
	MojoParserQUESTION                     = 44
	MojoParserAT                           = 45
	MojoParserAND                          = 46
	MojoParserSUB                          = 47
	MojoParserEQUAL                        = 48
	MojoParserOR                           = 49
	MojoParserDIV                          = 50
	MojoParserADD                          = 51
	MojoParserMUL                          = 52
	MojoParserMOD                          = 53
	MojoParserCARET                        = 54
	MojoParserTILDE                        = 55
	MojoParserDOLLER                       = 56
	MojoParserCOLON_EQUAL                  = 57
	MojoParserRIGHT_RIGHT_ARROWS           = 58
	MojoParserRIGHT_ARROW                  = 59
	MojoParserDOT_DOT                      = 60
	MojoParserLT_DOT_DOT                   = 61
	MojoParserDOT_DOT_LT                   = 62
	MojoParserELLIPSIS                     = 63
	MojoParserTypeName                     = 64
	MojoParserIdentifier                   = 65
	MojoParserOperator_head_other          = 66
	MojoParserOperator_following_character = 67
	MojoParserImplicit_parameter_name      = 68
	MojoParserBoolLiteral                  = 69
	MojoParserNullLiteral                  = 70
	MojoParserBinaryLiteral                = 71
	MojoParserOctalLiteral                 = 72
	MojoParserDecimalLiteral               = 73
	MojoParserPureDecimalDigits            = 74
	MojoParserHexadecimalLiteral           = 75
	MojoParserFloatLiteral                 = 76
	MojoParserStaticStringLiteral          = 77
	MojoParserInterpolatedStringLiteral    = 78
	MojoParserWS                           = 79
	MojoParserDelimitedComment             = 80
	MojoParserLineComment                  = 81
	MojoParserEOL                          = 82
	MojoParserLineDocument                 = 83
	MojoParserFollowingLineDocument        = 84
)

// MojoParser rules.
const (
	MojoParserRULE_mojoFile                              = 0
	MojoParserRULE_statement                             = 1
	MojoParserRULE_statements                            = 2
	MojoParserRULE_loopStatement                         = 3
	MojoParserRULE_forInStatement                        = 4
	MojoParserRULE_whileStatement                        = 5
	MojoParserRULE_conditions                            = 6
	MojoParserRULE_condition                             = 7
	MojoParserRULE_optionalBindingCondition              = 8
	MojoParserRULE_branchStatement                       = 9
	MojoParserRULE_ifStatement                           = 10
	MojoParserRULE_elseClause                            = 11
	MojoParserRULE_matchStatement                        = 12
	MojoParserRULE_matchCases                            = 13
	MojoParserRULE_matchCase                             = 14
	MojoParserRULE_controlTransferStatement              = 15
	MojoParserRULE_breakStatement                        = 16
	MojoParserRULE_continueStatement                     = 17
	MojoParserRULE_returnStatement                       = 18
	MojoParserRULE_genericParameterClause                = 19
	MojoParserRULE_genericParameters                     = 20
	MojoParserRULE_genericParameter                      = 21
	MojoParserRULE_genericArgumentClause                 = 22
	MojoParserRULE_genericArguments                      = 23
	MojoParserRULE_genericArgument                       = 24
	MojoParserRULE_declaration                           = 25
	MojoParserRULE_codeBlock                             = 26
	MojoParserRULE_packageDeclaration                    = 27
	MojoParserRULE_packageIdentifier                     = 28
	MojoParserRULE_importDeclaration                     = 29
	MojoParserRULE_importPath                            = 30
	MojoParserRULE_importPathIdentifier                  = 31
	MojoParserRULE_importAllClause                       = 32
	MojoParserRULE_importValueAsClause                   = 33
	MojoParserRULE_importTypeClause                      = 34
	MojoParserRULE_importTypeAsClause                    = 35
	MojoParserRULE_importGroupClause                     = 36
	MojoParserRULE_importGroup                           = 37
	MojoParserRULE_importValue                           = 38
	MojoParserRULE_importType                            = 39
	MojoParserRULE_constantDeclaration                   = 40
	MojoParserRULE_patternInitializers                   = 41
	MojoParserRULE_patternInitializer                    = 42
	MojoParserRULE_initializer                           = 43
	MojoParserRULE_variableDeclaration                   = 44
	MojoParserRULE_typeAliasDeclaration                  = 45
	MojoParserRULE_typealiasName                         = 46
	MojoParserRULE_typealiasAssignment                   = 47
	MojoParserRULE_functionDeclaration                   = 48
	MojoParserRULE_functionHead                          = 49
	MojoParserRULE_functionName                          = 50
	MojoParserRULE_functionSignature                     = 51
	MojoParserRULE_functionResult                        = 52
	MojoParserRULE_functionBody                          = 53
	MojoParserRULE_functionParameterClause               = 54
	MojoParserRULE_functionParameters                    = 55
	MojoParserRULE_functionParameter                     = 56
	MojoParserRULE_enumDeclaration                       = 57
	MojoParserRULE_enumBody                              = 58
	MojoParserRULE_enumName                              = 59
	MojoParserRULE_enumMembers                           = 60
	MojoParserRULE_enumMember                            = 61
	MojoParserRULE_structDeclaration                     = 62
	MojoParserRULE_structName                            = 63
	MojoParserRULE_structBody                            = 64
	MojoParserRULE_structMembers                         = 65
	MojoParserRULE_structMember                          = 66
	MojoParserRULE_structMemberDeclaration               = 67
	MojoParserRULE_interfaceDeclaration                  = 68
	MojoParserRULE_interfaceName                         = 69
	MojoParserRULE_interfaceBody                         = 70
	MojoParserRULE_interfaceMembers                      = 71
	MojoParserRULE_interfaceMember                       = 72
	MojoParserRULE_interfaceMethodDeclaration            = 73
	MojoParserRULE_pattern                               = 74
	MojoParserRULE_wildcard_pattern                      = 75
	MojoParserRULE_identifierPattern                     = 76
	MojoParserRULE_tuple_pattern                         = 77
	MojoParserRULE_tuple_pattern_element_list            = 78
	MojoParserRULE_tuple_pattern_element                 = 79
	MojoParserRULE_optional_pattern                      = 80
	MojoParserRULE_expression_pattern                    = 81
	MojoParserRULE_attribute                             = 82
	MojoParserRULE_attributeName                         = 83
	MojoParserRULE_attributeNameIdentifier               = 84
	MojoParserRULE_attributeArgumentClause               = 85
	MojoParserRULE_attributes                            = 86
	MojoParserRULE_expression                            = 87
	MojoParserRULE_expressions                           = 88
	MojoParserRULE_prefixExpression                      = 89
	MojoParserRULE_binaryExpression                      = 90
	MojoParserRULE_binaryExpressions                     = 91
	MojoParserRULE_conditional_operator                  = 92
	MojoParserRULE_type_casting_operator                 = 93
	MojoParserRULE_primaryExpression                     = 94
	MojoParserRULE_literalExpression                     = 95
	MojoParserRULE_arrayLiteral                          = 96
	MojoParserRULE_arrayLiteralItems                     = 97
	MojoParserRULE_arrayLiteralItem                      = 98
	MojoParserRULE_objectLiteral                         = 99
	MojoParserRULE_objectLiteralItems                    = 100
	MojoParserRULE_objectLiteralItem                     = 101
	MojoParserRULE_implicitMemberExpression              = 102
	MojoParserRULE_parenthesizedExpression               = 103
	MojoParserRULE_tupleExpression                       = 104
	MojoParserRULE_tupleElement                          = 105
	MojoParserRULE_wildcardExpression                    = 106
	MojoParserRULE_postfixExpression                     = 107
	MojoParserRULE_functionCallArgumentClause            = 108
	MojoParserRULE_function_call_argument_list           = 109
	MojoParserRULE_function_call_argument                = 110
	MojoParserRULE_argumentNameList                      = 111
	MojoParserRULE_argument_name                         = 112
	MojoParserRULE_type_                                 = 113
	MojoParserRULE_basicType                             = 114
	MojoParserRULE_primeType                             = 115
	MojoParserRULE_typeAnnotation                        = 116
	MojoParserRULE_typeIdentifier                        = 117
	MojoParserRULE_typeIdentifierClause                  = 118
	MojoParserRULE_typeName                              = 119
	MojoParserRULE_tupleType                             = 120
	MojoParserRULE_tupleTypeElements                     = 121
	MojoParserRULE_tupleTypeElement                      = 122
	MojoParserRULE_functionType                          = 123
	MojoParserRULE_functionTypeArgumentClause            = 124
	MojoParserRULE_functionTypeArguments                 = 125
	MojoParserRULE_functionTypeArgument                  = 126
	MojoParserRULE_arrayType                             = 127
	MojoParserRULE_dictionaryType                        = 128
	MojoParserRULE_typeInheritanceClause                 = 129
	MojoParserRULE_typeInheritances                      = 130
	MojoParserRULE_typeInheritance                       = 131
	MojoParserRULE_declarationIdentifier                 = 132
	MojoParserRULE_labelIdentifier                       = 133
	MojoParserRULE_path_identifier                       = 134
	MojoParserRULE_identifier                            = 135
	MojoParserRULE_keyword_as_identifier_in_declarations = 136
	MojoParserRULE_keyword_as_identifier_in_labels       = 137
	MojoParserRULE_document                              = 138
	MojoParserRULE_followingDocument                     = 139
	MojoParserRULE_assignmentOperator                    = 140
	MojoParserRULE_negatePrefixOperator                  = 141
	MojoParserRULE_compilation_condition_AND             = 142
	MojoParserRULE_compilation_condition_OR              = 143
	MojoParserRULE_compilation_condition_GE              = 144
	MojoParserRULE_arrowOperator                         = 145
	MojoParserRULE_range_operator                        = 146
	MojoParserRULE_range_right_open_operator             = 147
	MojoParserRULE_same_type_equals                      = 148
	MojoParserRULE_binaryOperator                        = 149
	MojoParserRULE_prefixOperator                        = 150
	MojoParserRULE_postfixOperator                       = 151
	MojoParserRULE_operator                              = 152
	MojoParserRULE_operator_character                    = 153
	MojoParserRULE_operator_head                         = 154
	MojoParserRULE_dot_operator_head                     = 155
	MojoParserRULE_dot_operator_character                = 156
	MojoParserRULE_literal                               = 157
	MojoParserRULE_numericLiteral                        = 158
	MojoParserRULE_integerLiteral                        = 159
	MojoParserRULE_stringLiteral                         = 160
	MojoParserRULE_eos                                   = 161
	MojoParserRULE_eov                                   = 162
	MojoParserRULE_eosWithDocument                       = 163
	MojoParserRULE_eovWithDocument                       = 164
)

// IMojoFileContext is an interface to support dynamic dispatch.
type IMojoFileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMojoFileContext differentiates from other interfaces.
	IsMojoFileContext()
}

type MojoFileContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMojoFileContext() *MojoFileContext {
	var p = new(MojoFileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_mojoFile
	return p
}

func (*MojoFileContext) IsMojoFileContext() {}

func NewMojoFileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MojoFileContext {
	var p = new(MojoFileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_mojoFile

	return p
}

func (s *MojoFileContext) GetParser() antlr.Parser { return s.parser }

func (s *MojoFileContext) EOF() antlr.TerminalNode {
	return s.GetToken(MojoParserEOF, 0)
}

func (s *MojoFileContext) Statements() IStatementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementsContext)
}

func (s *MojoFileContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MojoFileContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MojoFileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MojoFileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MojoFileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMojoFile(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MojoFile() (localctx IMojoFileContext) {
	localctx = NewMojoFileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, MojoParserRULE_mojoFile)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(337)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext()) == 1 {
		p.SetState(333)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(330)
					p.Match(MojoParserEOL)
				}

			}
			p.SetState(335)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext())
		}
		{
			p.SetState(336)
			p.Statements()
		}

	}
	p.SetState(342)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(339)
			p.Match(MojoParserEOL)
		}

		p.SetState(344)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(345)
		p.Match(MojoParserEOF)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *StatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StatementContext) LoopStatement() ILoopStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopStatementContext)
}

func (s *StatementContext) BranchStatement() IBranchStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBranchStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBranchStatementContext)
}

func (s *StatementContext) ControlTransferStatement() IControlTransferStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlTransferStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlTransferStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, MojoParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(352)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(347)
			p.Declaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(348)
			p.Expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(349)
			p.LoopStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(350)
			p.BranchStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(351)
			p.ControlTransferStatement()
		}

	}

	return localctx
}

// IStatementsContext is an interface to support dynamic dispatch.
type IStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementsContext differentiates from other interfaces.
	IsStatementsContext()
}

type StatementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementsContext() *StatementsContext {
	var p = new(StatementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_statements
	return p
}

func (*StatementsContext) IsStatementsContext() {}

func NewStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementsContext {
	var p = new(StatementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_statements

	return p
}

func (s *StatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementsContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *StatementsContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementsContext) AllEos() []IEosContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosContext)(nil)).Elem())
	var tst = make([]IEosContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosContext)
		}
	}

	return tst
}

func (s *StatementsContext) Eos(i int) IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *StatementsContext) SEMI() antlr.TerminalNode {
	return s.GetToken(MojoParserSEMI, 0)
}

func (s *StatementsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StatementsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStatements(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Statements() (localctx IStatementsContext) {
	localctx = NewStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, MojoParserRULE_statements)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(354)
		p.Statement()
	}
	p.SetState(366)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(355)
				p.Eos()
			}
			p.SetState(359)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(356)
						p.Match(MojoParserEOL)
					}

				}
				p.SetState(361)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
			}
			{
				p.SetState(362)
				p.Statement()
			}

		}
		p.SetState(368)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())
	}
	p.SetState(370)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserSEMI {
		{
			p.SetState(369)
			p.Match(MojoParserSEMI)
		}

	}

	return localctx
}

// ILoopStatementContext is an interface to support dynamic dispatch.
type ILoopStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopStatementContext differentiates from other interfaces.
	IsLoopStatementContext()
}

type LoopStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopStatementContext() *LoopStatementContext {
	var p = new(LoopStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_loopStatement
	return p
}

func (*LoopStatementContext) IsLoopStatementContext() {}

func NewLoopStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopStatementContext {
	var p = new(LoopStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_loopStatement

	return p
}

func (s *LoopStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopStatementContext) ForInStatement() IForInStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForInStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForInStatementContext)
}

func (s *LoopStatementContext) WhileStatement() IWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *LoopStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLoopStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) LoopStatement() (localctx ILoopStatementContext) {
	localctx = NewLoopStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, MojoParserRULE_loopStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(375)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserEOF, MojoParserRCURLY, MojoParserSEMI, MojoParserEOL:
		p.EnterOuterAlt(localctx, 1)

	case MojoParserKEYWORD_FOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(373)
			p.ForInStatement()
		}

	case MojoParserKEYWORD_WHILE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(374)
			p.WhileStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IForInStatementContext is an interface to support dynamic dispatch.
type IForInStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForInStatementContext differentiates from other interfaces.
	IsForInStatementContext()
}

type ForInStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForInStatementContext() *ForInStatementContext {
	var p = new(ForInStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_forInStatement
	return p
}

func (*ForInStatementContext) IsForInStatementContext() {}

func NewForInStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForInStatementContext {
	var p = new(ForInStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_forInStatement

	return p
}

func (s *ForInStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForInStatementContext) KEYWORD_FOR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FOR, 0)
}

func (s *ForInStatementContext) Pattern() IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *ForInStatementContext) KEYWORD_IN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IN, 0)
}

func (s *ForInStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForInStatementContext) CodeBlock() ICodeBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICodeBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *ForInStatementContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ForInStatementContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ForInStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForInStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitForInStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ForInStatement() (localctx IForInStatementContext) {
	localctx = NewForInStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, MojoParserRULE_forInStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(377)
		p.Match(MojoParserKEYWORD_FOR)
	}
	{
		p.SetState(378)
		p.pattern(0)
	}
	p.SetState(382)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(379)
			p.Match(MojoParserEOL)
		}

		p.SetState(384)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(385)
		p.Match(MojoParserKEYWORD_IN)
	}
	{
		p.SetState(386)
		p.Expression()
	}
	p.SetState(390)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(387)
			p.Match(MojoParserEOL)
		}

		p.SetState(392)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(393)
		p.CodeBlock()
	}

	return localctx
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_whileStatement
	return p
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) KEYWORD_WHILE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_WHILE, 0)
}

func (s *WhileStatementContext) Conditions() IConditionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionsContext)
}

func (s *WhileStatementContext) CodeBlock() ICodeBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICodeBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *WhileStatementContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *WhileStatementContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitWhileStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) WhileStatement() (localctx IWhileStatementContext) {
	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, MojoParserRULE_whileStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(395)
		p.Match(MojoParserKEYWORD_WHILE)
	}
	{
		p.SetState(396)
		p.Conditions()
	}
	p.SetState(400)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(397)
			p.Match(MojoParserEOL)
		}

		p.SetState(402)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(403)
		p.CodeBlock()
	}

	return localctx
}

// IConditionsContext is an interface to support dynamic dispatch.
type IConditionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionsContext differentiates from other interfaces.
	IsConditionsContext()
}

type ConditionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionsContext() *ConditionsContext {
	var p = new(ConditionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_conditions
	return p
}

func (*ConditionsContext) IsConditionsContext() {}

func NewConditionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionsContext {
	var p = new(ConditionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_conditions

	return p
}

func (s *ConditionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionsContext) AllCondition() []IConditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConditionContext)(nil)).Elem())
	var tst = make([]IConditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConditionContext)
		}
	}

	return tst
}

func (s *ConditionsContext) Condition(i int) IConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConditionContext)
}

func (s *ConditionsContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *ConditionsContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ConditionsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ConditionsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ConditionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitConditions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Conditions() (localctx IConditionsContext) {
	localctx = NewConditionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, MojoParserRULE_conditions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(405)
		p.Condition()
	}
	p.SetState(417)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(406)
				p.Eov()
			}
			p.SetState(410)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(407)
					p.Match(MojoParserEOL)
				}

				p.SetState(412)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(413)
				p.Condition()
			}

		}
		p.SetState(419)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())
	}

	return localctx
}

// IConditionContext is an interface to support dynamic dispatch.
type IConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionContext differentiates from other interfaces.
	IsConditionContext()
}

type ConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionContext() *ConditionContext {
	var p = new(ConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_condition
	return p
}

func (*ConditionContext) IsConditionContext() {}

func NewConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionContext {
	var p = new(ConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_condition

	return p
}

func (s *ConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionContext) OptionalBindingCondition() IOptionalBindingConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionalBindingConditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionalBindingConditionContext)
}

func (s *ConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitCondition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Condition() (localctx IConditionContext) {
	localctx = NewConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, MojoParserRULE_condition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(422)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(420)
			p.Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(421)
			p.OptionalBindingCondition()
		}

	}

	return localctx
}

// IOptionalBindingConditionContext is an interface to support dynamic dispatch.
type IOptionalBindingConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptionalBindingConditionContext differentiates from other interfaces.
	IsOptionalBindingConditionContext()
}

type OptionalBindingConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptionalBindingConditionContext() *OptionalBindingConditionContext {
	var p = new(OptionalBindingConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_optionalBindingCondition
	return p
}

func (*OptionalBindingConditionContext) IsOptionalBindingConditionContext() {}

func NewOptionalBindingConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionalBindingConditionContext {
	var p = new(OptionalBindingConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_optionalBindingCondition

	return p
}

func (s *OptionalBindingConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionalBindingConditionContext) KEYWORD_VAR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_VAR, 0)
}

func (s *OptionalBindingConditionContext) Pattern() IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *OptionalBindingConditionContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *OptionalBindingConditionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *OptionalBindingConditionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *OptionalBindingConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionalBindingConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionalBindingConditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOptionalBindingCondition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) OptionalBindingCondition() (localctx IOptionalBindingConditionContext) {
	localctx = NewOptionalBindingConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, MojoParserRULE_optionalBindingCondition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(424)
		p.Match(MojoParserKEYWORD_VAR)
	}
	{
		p.SetState(425)
		p.pattern(0)
	}
	p.SetState(429)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(426)
			p.Match(MojoParserEOL)
		}

		p.SetState(431)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(432)
		p.Initializer()
	}

	return localctx
}

// IBranchStatementContext is an interface to support dynamic dispatch.
type IBranchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBranchStatementContext differentiates from other interfaces.
	IsBranchStatementContext()
}

type BranchStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBranchStatementContext() *BranchStatementContext {
	var p = new(BranchStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_branchStatement
	return p
}

func (*BranchStatementContext) IsBranchStatementContext() {}

func NewBranchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BranchStatementContext {
	var p = new(BranchStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_branchStatement

	return p
}

func (s *BranchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BranchStatementContext) IfStatement() IIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *BranchStatementContext) MatchStatement() IMatchStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatchStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatchStatementContext)
}

func (s *BranchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BranchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BranchStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBranchStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BranchStatement() (localctx IBranchStatementContext) {
	localctx = NewBranchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, MojoParserRULE_branchStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(436)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_IF:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(434)
			p.IfStatement()
		}

	case MojoParserKEYWORD_MATCH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(435)
			p.MatchStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_ifStatement
	return p
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) KEYWORD_IF() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IF, 0)
}

func (s *IfStatementContext) Conditions() IConditionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionsContext)
}

func (s *IfStatementContext) CodeBlock() ICodeBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICodeBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *IfStatementContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *IfStatementContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *IfStatementContext) ElseClause() IElseClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElseClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElseClauseContext)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) IfStatement() (localctx IIfStatementContext) {
	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, MojoParserRULE_ifStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(438)
		p.Match(MojoParserKEYWORD_IF)
	}
	{
		p.SetState(439)
		p.Conditions()
	}
	p.SetState(443)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(440)
			p.Match(MojoParserEOL)
		}

		p.SetState(445)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(446)
		p.CodeBlock()
	}
	p.SetState(450)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(447)
				p.Match(MojoParserEOL)
			}

		}
		p.SetState(452)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())
	}
	p.SetState(454)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserKEYWORD_ELSE {
		{
			p.SetState(453)
			p.ElseClause()
		}

	}

	return localctx
}

// IElseClauseContext is an interface to support dynamic dispatch.
type IElseClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElseClauseContext differentiates from other interfaces.
	IsElseClauseContext()
}

type ElseClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElseClauseContext() *ElseClauseContext {
	var p = new(ElseClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_elseClause
	return p
}

func (*ElseClauseContext) IsElseClauseContext() {}

func NewElseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElseClauseContext {
	var p = new(ElseClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_elseClause

	return p
}

func (s *ElseClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ElseClauseContext) KEYWORD_ELSE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ELSE, 0)
}

func (s *ElseClauseContext) CodeBlock() ICodeBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICodeBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *ElseClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ElseClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ElseClauseContext) IfStatement() IIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *ElseClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElseClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitElseClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ElseClause() (localctx IElseClauseContext) {
	localctx = NewElseClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, MojoParserRULE_elseClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(472)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(456)
			p.Match(MojoParserKEYWORD_ELSE)
		}
		p.SetState(460)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(457)
				p.Match(MojoParserEOL)
			}

			p.SetState(462)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(463)
			p.CodeBlock()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(464)
			p.Match(MojoParserKEYWORD_ELSE)
		}
		p.SetState(468)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(465)
				p.Match(MojoParserEOL)
			}

			p.SetState(470)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(471)
			p.IfStatement()
		}

	}

	return localctx
}

// IMatchStatementContext is an interface to support dynamic dispatch.
type IMatchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatchStatementContext differentiates from other interfaces.
	IsMatchStatementContext()
}

type MatchStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchStatementContext() *MatchStatementContext {
	var p = new(MatchStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_matchStatement
	return p
}

func (*MatchStatementContext) IsMatchStatementContext() {}

func NewMatchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchStatementContext {
	var p = new(MatchStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_matchStatement

	return p
}

func (s *MatchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchStatementContext) KEYWORD_MATCH() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_MATCH, 0)
}

func (s *MatchStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MatchStatementContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *MatchStatementContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *MatchStatementContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MatchStatementContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MatchStatementContext) MatchCases() IMatchCasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatchCasesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatchCasesContext)
}

func (s *MatchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMatchStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MatchStatement() (localctx IMatchStatementContext) {
	localctx = NewMatchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, MojoParserRULE_matchStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(474)
		p.Match(MojoParserKEYWORD_MATCH)
	}
	{
		p.SetState(475)
		p.Expression()
	}
	p.SetState(479)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(476)
			p.Match(MojoParserEOL)
		}

		p.SetState(481)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(482)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(490)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext()) == 1 {
		p.SetState(486)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(483)
				p.Match(MojoParserEOL)
			}

			p.SetState(488)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(489)
			p.MatchCases()
		}

	}
	p.SetState(495)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(492)
			p.Match(MojoParserEOL)
		}

		p.SetState(497)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(498)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IMatchCasesContext is an interface to support dynamic dispatch.
type IMatchCasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatchCasesContext differentiates from other interfaces.
	IsMatchCasesContext()
}

type MatchCasesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchCasesContext() *MatchCasesContext {
	var p = new(MatchCasesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_matchCases
	return p
}

func (*MatchCasesContext) IsMatchCasesContext() {}

func NewMatchCasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchCasesContext {
	var p = new(MatchCasesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_matchCases

	return p
}

func (s *MatchCasesContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchCasesContext) AllMatchCase() []IMatchCaseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMatchCaseContext)(nil)).Elem())
	var tst = make([]IMatchCaseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMatchCaseContext)
		}
	}

	return tst
}

func (s *MatchCasesContext) MatchCase(i int) IMatchCaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatchCaseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMatchCaseContext)
}

func (s *MatchCasesContext) AllEos() []IEosContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosContext)(nil)).Elem())
	var tst = make([]IEosContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosContext)
		}
	}

	return tst
}

func (s *MatchCasesContext) Eos(i int) IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *MatchCasesContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MatchCasesContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MatchCasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchCasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchCasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMatchCases(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MatchCases() (localctx IMatchCasesContext) {
	localctx = NewMatchCasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, MojoParserRULE_matchCases)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(500)
		p.MatchCase()
	}
	p.SetState(512)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(501)
				p.Eos()
			}
			p.SetState(505)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(502)
					p.Match(MojoParserEOL)
				}

				p.SetState(507)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(508)
				p.MatchCase()
			}

		}
		p.SetState(514)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext())
	}
	{
		p.SetState(515)
		p.Eos()
	}

	return localctx
}

// IMatchCaseContext is an interface to support dynamic dispatch.
type IMatchCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatchCaseContext differentiates from other interfaces.
	IsMatchCaseContext()
}

type MatchCaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchCaseContext() *MatchCaseContext {
	var p = new(MatchCaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_matchCase
	return p
}

func (*MatchCaseContext) IsMatchCaseContext() {}

func NewMatchCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchCaseContext {
	var p = new(MatchCaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_matchCase

	return p
}

func (s *MatchCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchCaseContext) Pattern() IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *MatchCaseContext) RIGHT_RIGHT_ARROWS() antlr.TerminalNode {
	return s.GetToken(MojoParserRIGHT_RIGHT_ARROWS, 0)
}

func (s *MatchCaseContext) CodeBlock() ICodeBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICodeBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *MatchCaseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MatchCaseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MatchCaseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MatchCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchCaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMatchCase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MatchCase() (localctx IMatchCaseContext) {
	localctx = NewMatchCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, MojoParserRULE_matchCase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(517)
		p.pattern(0)
	}
	p.SetState(521)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(518)
			p.Match(MojoParserEOL)
		}

		p.SetState(523)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(524)
		p.Match(MojoParserRIGHT_RIGHT_ARROWS)
	}
	p.SetState(528)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(525)
			p.Match(MojoParserEOL)
		}

		p.SetState(530)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(533)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(531)
			p.CodeBlock()
		}

	case 2:
		{
			p.SetState(532)
			p.Expression()
		}

	}

	return localctx
}

// IControlTransferStatementContext is an interface to support dynamic dispatch.
type IControlTransferStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsControlTransferStatementContext differentiates from other interfaces.
	IsControlTransferStatementContext()
}

type ControlTransferStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyControlTransferStatementContext() *ControlTransferStatementContext {
	var p = new(ControlTransferStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_controlTransferStatement
	return p
}

func (*ControlTransferStatementContext) IsControlTransferStatementContext() {}

func NewControlTransferStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ControlTransferStatementContext {
	var p = new(ControlTransferStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_controlTransferStatement

	return p
}

func (s *ControlTransferStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ControlTransferStatementContext) BreakStatement() IBreakStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *ControlTransferStatementContext) ContinueStatement() IContinueStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatementContext)
}

func (s *ControlTransferStatementContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *ControlTransferStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ControlTransferStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ControlTransferStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitControlTransferStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ControlTransferStatement() (localctx IControlTransferStatementContext) {
	localctx = NewControlTransferStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, MojoParserRULE_controlTransferStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(538)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_BREAK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(535)
			p.BreakStatement()
		}

	case MojoParserKEYWORD_CONTINUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(536)
			p.ContinueStatement()
		}

	case MojoParserKEYWORD_RETURN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(537)
			p.ReturnStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBreakStatementContext is an interface to support dynamic dispatch.
type IBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStatementContext differentiates from other interfaces.
	IsBreakStatementContext()
}

type BreakStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatementContext() *BreakStatementContext {
	var p = new(BreakStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_breakStatement
	return p
}

func (*BreakStatementContext) IsBreakStatementContext() {}

func NewBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatementContext {
	var p = new(BreakStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_breakStatement

	return p
}

func (s *BreakStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatementContext) KEYWORD_BREAK() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_BREAK, 0)
}

func (s *BreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBreakStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BreakStatement() (localctx IBreakStatementContext) {
	localctx = NewBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, MojoParserRULE_breakStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(540)
		p.Match(MojoParserKEYWORD_BREAK)
	}

	return localctx
}

// IContinueStatementContext is an interface to support dynamic dispatch.
type IContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStatementContext differentiates from other interfaces.
	IsContinueStatementContext()
}

type ContinueStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatementContext() *ContinueStatementContext {
	var p = new(ContinueStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_continueStatement
	return p
}

func (*ContinueStatementContext) IsContinueStatementContext() {}

func NewContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatementContext {
	var p = new(ContinueStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_continueStatement

	return p
}

func (s *ContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatementContext) KEYWORD_CONTINUE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONTINUE, 0)
}

func (s *ContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitContinueStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ContinueStatement() (localctx IContinueStatementContext) {
	localctx = NewContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, MojoParserRULE_continueStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(542)
		p.Match(MojoParserKEYWORD_CONTINUE)
	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) KEYWORD_RETURN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_RETURN, 0)
}

func (s *ReturnStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, MojoParserRULE_returnStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(544)
		p.Match(MojoParserKEYWORD_RETURN)
	}
	p.SetState(546)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MojoParserKEYWORD_AND)|(1<<MojoParserKEYWORD_AS)|(1<<MojoParserKEYWORD_ATTRIBUTE)|(1<<MojoParserKEYWORD_BREAK)|(1<<MojoParserKEYWORD_CONST)|(1<<MojoParserKEYWORD_CONTINUE)|(1<<MojoParserKEYWORD_ELSE)|(1<<MojoParserKEYWORD_ENUM)|(1<<MojoParserKEYWORD_FALSE)|(1<<MojoParserKEYWORD_FOR)|(1<<MojoParserKEYWORD_FUNC)|(1<<MojoParserKEYWORD_IF)|(1<<MojoParserKEYWORD_IMPORT)|(1<<MojoParserKEYWORD_IN)|(1<<MojoParserKEYWORD_INTERFACE)|(1<<MojoParserKEYWORD_IS)|(1<<MojoParserKEYWORD_MATCH)|(1<<MojoParserKEYWORD_NOT)|(1<<MojoParserKEYWORD_NULL)|(1<<MojoParserKEYWORD_OR)|(1<<MojoParserKEYWORD_PACKAGE)|(1<<MojoParserKEYWORD_REPEATE)|(1<<MojoParserKEYWORD_RETURN)|(1<<MojoParserKEYWORD_STRUCT)|(1<<MojoParserKEYWORD_TRUE)|(1<<MojoParserKEYWORD_TYPE)|(1<<MojoParserKEYWORD_VAR)|(1<<MojoParserKEYWORD_WHILE)|(1<<MojoParserKEYWORD_XOR)|(1<<MojoParserDOT)|(1<<MojoParserLCURLY))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MojoParserLPAREN-32))|(1<<(MojoParserLBRACK-32))|(1<<(MojoParserLT-32))|(1<<(MojoParserGT-32))|(1<<(MojoParserUNDERSCORE-32))|(1<<(MojoParserBANG-32))|(1<<(MojoParserQUESTION-32))|(1<<(MojoParserAND-32))|(1<<(MojoParserSUB-32))|(1<<(MojoParserEQUAL-32))|(1<<(MojoParserOR-32))|(1<<(MojoParserDIV-32))|(1<<(MojoParserADD-32))|(1<<(MojoParserMUL-32))|(1<<(MojoParserMOD-32))|(1<<(MojoParserCARET-32))|(1<<(MojoParserTILDE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(MojoParserIdentifier-65))|(1<<(MojoParserOperator_head_other-65))|(1<<(MojoParserBoolLiteral-65))|(1<<(MojoParserNullLiteral-65))|(1<<(MojoParserBinaryLiteral-65))|(1<<(MojoParserOctalLiteral-65))|(1<<(MojoParserDecimalLiteral-65))|(1<<(MojoParserPureDecimalDigits-65))|(1<<(MojoParserHexadecimalLiteral-65))|(1<<(MojoParserFloatLiteral-65))|(1<<(MojoParserStaticStringLiteral-65))|(1<<(MojoParserInterpolatedStringLiteral-65)))) != 0) {
		{
			p.SetState(545)
			p.Expression()
		}

	}

	return localctx
}

// IGenericParameterClauseContext is an interface to support dynamic dispatch.
type IGenericParameterClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericParameterClauseContext differentiates from other interfaces.
	IsGenericParameterClauseContext()
}

type GenericParameterClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericParameterClauseContext() *GenericParameterClauseContext {
	var p = new(GenericParameterClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericParameterClause
	return p
}

func (*GenericParameterClauseContext) IsGenericParameterClauseContext() {}

func NewGenericParameterClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericParameterClauseContext {
	var p = new(GenericParameterClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericParameterClause

	return p
}

func (s *GenericParameterClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericParameterClauseContext) LT() antlr.TerminalNode {
	return s.GetToken(MojoParserLT, 0)
}

func (s *GenericParameterClauseContext) GenericParameters() IGenericParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParametersContext)
}

func (s *GenericParameterClauseContext) GT() antlr.TerminalNode {
	return s.GetToken(MojoParserGT, 0)
}

func (s *GenericParameterClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *GenericParameterClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *GenericParameterClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericParameterClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericParameterClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericParameterClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericParameterClause() (localctx IGenericParameterClauseContext) {
	localctx = NewGenericParameterClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, MojoParserRULE_genericParameterClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(548)
		p.Match(MojoParserLT)
	}
	p.SetState(552)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(549)
			p.Match(MojoParserEOL)
		}

		p.SetState(554)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(555)
		p.GenericParameters()
	}
	p.SetState(559)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(556)
			p.Match(MojoParserEOL)
		}

		p.SetState(561)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(562)
		p.Match(MojoParserGT)
	}

	return localctx
}

// IGenericParametersContext is an interface to support dynamic dispatch.
type IGenericParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericParametersContext differentiates from other interfaces.
	IsGenericParametersContext()
}

type GenericParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericParametersContext() *GenericParametersContext {
	var p = new(GenericParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericParameters
	return p
}

func (*GenericParametersContext) IsGenericParametersContext() {}

func NewGenericParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericParametersContext {
	var p = new(GenericParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericParameters

	return p
}

func (s *GenericParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericParametersContext) AllGenericParameter() []IGenericParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGenericParameterContext)(nil)).Elem())
	var tst = make([]IGenericParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGenericParameterContext)
		}
	}

	return tst
}

func (s *GenericParametersContext) GenericParameter(i int) IGenericParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterContext)
}

func (s *GenericParametersContext) AllEovWithDocument() []IEovWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem())
	var tst = make([]IEovWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovWithDocumentContext)
		}
	}

	return tst
}

func (s *GenericParametersContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *GenericParametersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *GenericParametersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *GenericParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericParameters() (localctx IGenericParametersContext) {
	localctx = NewGenericParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, MojoParserRULE_genericParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(564)
		p.GenericParameter()
	}
	p.SetState(576)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(565)
				p.EovWithDocument()
			}
			p.SetState(569)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(566)
					p.Match(MojoParserEOL)
				}

				p.SetState(571)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(572)
				p.GenericParameter()
			}

		}
		p.SetState(578)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())
	}
	p.SetState(580)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(579)
			p.EovWithDocument()
		}

	}

	return localctx
}

// IGenericParameterContext is an interface to support dynamic dispatch.
type IGenericParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericParameterContext differentiates from other interfaces.
	IsGenericParameterContext()
}

type GenericParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericParameterContext() *GenericParameterContext {
	var p = new(GenericParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericParameter
	return p
}

func (*GenericParameterContext) IsGenericParameterContext() {}

func NewGenericParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericParameterContext {
	var p = new(GenericParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericParameter

	return p
}

func (s *GenericParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericParameterContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *GenericParameterContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *GenericParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericParameter() (localctx IGenericParameterContext) {
	localctx = NewGenericParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, MojoParserRULE_genericParameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(586)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(582)
			p.TypeName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(583)
			p.TypeName()
		}
		{
			p.SetState(584)
			p.TypeAnnotation()
		}

	}

	return localctx
}

// IGenericArgumentClauseContext is an interface to support dynamic dispatch.
type IGenericArgumentClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericArgumentClauseContext differentiates from other interfaces.
	IsGenericArgumentClauseContext()
}

type GenericArgumentClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericArgumentClauseContext() *GenericArgumentClauseContext {
	var p = new(GenericArgumentClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericArgumentClause
	return p
}

func (*GenericArgumentClauseContext) IsGenericArgumentClauseContext() {}

func NewGenericArgumentClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericArgumentClauseContext {
	var p = new(GenericArgumentClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericArgumentClause

	return p
}

func (s *GenericArgumentClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericArgumentClauseContext) LT() antlr.TerminalNode {
	return s.GetToken(MojoParserLT, 0)
}

func (s *GenericArgumentClauseContext) GenericArguments() IGenericArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentsContext)
}

func (s *GenericArgumentClauseContext) GT() antlr.TerminalNode {
	return s.GetToken(MojoParserGT, 0)
}

func (s *GenericArgumentClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *GenericArgumentClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *GenericArgumentClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericArgumentClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericArgumentClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericArgumentClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericArgumentClause() (localctx IGenericArgumentClauseContext) {
	localctx = NewGenericArgumentClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, MojoParserRULE_genericArgumentClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(588)
		p.Match(MojoParserLT)
	}
	p.SetState(592)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(589)
			p.Match(MojoParserEOL)
		}

		p.SetState(594)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(595)
		p.GenericArguments()
	}
	p.SetState(599)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(596)
			p.Match(MojoParserEOL)
		}

		p.SetState(601)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(602)
		p.Match(MojoParserGT)
	}

	return localctx
}

// IGenericArgumentsContext is an interface to support dynamic dispatch.
type IGenericArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericArgumentsContext differentiates from other interfaces.
	IsGenericArgumentsContext()
}

type GenericArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericArgumentsContext() *GenericArgumentsContext {
	var p = new(GenericArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericArguments
	return p
}

func (*GenericArgumentsContext) IsGenericArgumentsContext() {}

func NewGenericArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericArgumentsContext {
	var p = new(GenericArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericArguments

	return p
}

func (s *GenericArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericArgumentsContext) AllGenericArgument() []IGenericArgumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGenericArgumentContext)(nil)).Elem())
	var tst = make([]IGenericArgumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGenericArgumentContext)
		}
	}

	return tst
}

func (s *GenericArgumentsContext) GenericArgument(i int) IGenericArgumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericArgumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentContext)
}

func (s *GenericArgumentsContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *GenericArgumentsContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *GenericArgumentsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *GenericArgumentsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *GenericArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericArguments() (localctx IGenericArgumentsContext) {
	localctx = NewGenericArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, MojoParserRULE_genericArguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(604)
		p.GenericArgument()
	}
	p.SetState(616)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(605)
				p.Eov()
			}
			p.SetState(609)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(606)
					p.Match(MojoParserEOL)
				}

				p.SetState(611)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(612)
				p.GenericArgument()
			}

		}
		p.SetState(618)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext())
	}
	{
		p.SetState(619)
		p.Eov()
	}

	return localctx
}

// IGenericArgumentContext is an interface to support dynamic dispatch.
type IGenericArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericArgumentContext differentiates from other interfaces.
	IsGenericArgumentContext()
}

type GenericArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericArgumentContext() *GenericArgumentContext {
	var p = new(GenericArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericArgument
	return p
}

func (*GenericArgumentContext) IsGenericArgumentContext() {}

func NewGenericArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericArgumentContext {
	var p = new(GenericArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericArgument

	return p
}

func (s *GenericArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericArgumentContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *GenericArgumentContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *GenericArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericArgument() (localctx IGenericArgumentContext) {
	localctx = NewGenericArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, MojoParserRULE_genericArgument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(621)
		p.type_(0)
	}
	p.SetState(623)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(622)
			p.Attributes()
		}

	}

	return localctx
}

// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_declaration
	return p
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) PackageDeclaration() IPackageDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageDeclarationContext)
}

func (s *DeclarationContext) ImportDeclaration() IImportDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportDeclarationContext)
}

func (s *DeclarationContext) ConstantDeclaration() IConstantDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantDeclarationContext)
}

func (s *DeclarationContext) VariableDeclaration() IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *DeclarationContext) TypeAliasDeclaration() ITypeAliasDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAliasDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAliasDeclarationContext)
}

func (s *DeclarationContext) FunctionDeclaration() IFunctionDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclarationContext)
}

func (s *DeclarationContext) EnumDeclaration() IEnumDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumDeclarationContext)
}

func (s *DeclarationContext) StructDeclaration() IStructDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructDeclarationContext)
}

func (s *DeclarationContext) InterfaceDeclaration() IInterfaceDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceDeclarationContext)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Declaration() (localctx IDeclarationContext) {
	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, MojoParserRULE_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(634)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(625)
			p.PackageDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(626)
			p.ImportDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(627)
			p.ConstantDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(628)
			p.VariableDeclaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(629)
			p.TypeAliasDeclaration()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(630)
			p.FunctionDeclaration()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(631)
			p.EnumDeclaration()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(632)
			p.StructDeclaration()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(633)
			p.InterfaceDeclaration()
		}

	}

	return localctx
}

// ICodeBlockContext is an interface to support dynamic dispatch.
type ICodeBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCodeBlockContext differentiates from other interfaces.
	IsCodeBlockContext()
}

type CodeBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCodeBlockContext() *CodeBlockContext {
	var p = new(CodeBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_codeBlock
	return p
}

func (*CodeBlockContext) IsCodeBlockContext() {}

func NewCodeBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CodeBlockContext {
	var p = new(CodeBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_codeBlock

	return p
}

func (s *CodeBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *CodeBlockContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *CodeBlockContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *CodeBlockContext) Statements() IStatementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementsContext)
}

func (s *CodeBlockContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *CodeBlockContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *CodeBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CodeBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CodeBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitCodeBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) CodeBlock() (localctx ICodeBlockContext) {
	localctx = NewCodeBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, MojoParserRULE_codeBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(636)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(644)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) == 1 {
		p.SetState(640)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(637)
					p.Match(MojoParserEOL)
				}

			}
			p.SetState(642)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext())
		}
		{
			p.SetState(643)
			p.Statements()
		}

	}
	p.SetState(649)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(646)
			p.Match(MojoParserEOL)
		}

		p.SetState(651)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(652)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IPackageDeclarationContext is an interface to support dynamic dispatch.
type IPackageDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageDeclarationContext differentiates from other interfaces.
	IsPackageDeclarationContext()
}

type PackageDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageDeclarationContext() *PackageDeclarationContext {
	var p = new(PackageDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_packageDeclaration
	return p
}

func (*PackageDeclarationContext) IsPackageDeclarationContext() {}

func NewPackageDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageDeclarationContext {
	var p = new(PackageDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_packageDeclaration

	return p
}

func (s *PackageDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageDeclarationContext) KEYWORD_PACKAGE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_PACKAGE, 0)
}

func (s *PackageDeclarationContext) PackageIdentifier() IPackageIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageIdentifierContext)
}

func (s *PackageDeclarationContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *PackageDeclarationContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *PackageDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *PackageDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *PackageDeclarationContext) ObjectLiteral() IObjectLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralContext)
}

func (s *PackageDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPackageDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PackageDeclaration() (localctx IPackageDeclarationContext) {
	localctx = NewPackageDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, MojoParserRULE_packageDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(655)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLineDocument {
		{
			p.SetState(654)
			p.Document()
		}

	}
	p.SetState(664)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext()) == 1 {
		p.SetState(660)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(657)
				p.Match(MojoParserEOL)
			}

			p.SetState(662)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(663)
			p.Attributes()
		}

	}
	p.SetState(669)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(666)
			p.Match(MojoParserEOL)
		}

		p.SetState(671)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(672)
		p.Match(MojoParserKEYWORD_PACKAGE)
	}
	{
		p.SetState(673)
		p.PackageIdentifier()
	}
	p.SetState(681)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) == 1 {
		p.SetState(677)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(674)
				p.Match(MojoParserEOL)
			}

			p.SetState(679)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(680)
			p.ObjectLiteral()
		}

	}

	return localctx
}

// IPackageIdentifierContext is an interface to support dynamic dispatch.
type IPackageIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageIdentifierContext differentiates from other interfaces.
	IsPackageIdentifierContext()
}

type PackageIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageIdentifierContext() *PackageIdentifierContext {
	var p = new(PackageIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_packageIdentifier
	return p
}

func (*PackageIdentifierContext) IsPackageIdentifierContext() {}

func NewPackageIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageIdentifierContext {
	var p = new(PackageIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_packageIdentifier

	return p
}

func (s *PackageIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageIdentifierContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(MojoParserIdentifier)
}

func (s *PackageIdentifierContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserIdentifier, i)
}

func (s *PackageIdentifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserDOT)
}

func (s *PackageIdentifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, i)
}

func (s *PackageIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPackageIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PackageIdentifier() (localctx IPackageIdentifierContext) {
	localctx = NewPackageIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, MojoParserRULE_packageIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(683)
		p.Match(MojoParserIdentifier)
	}
	p.SetState(688)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(684)
				p.Match(MojoParserDOT)
			}
			{
				p.SetState(685)
				p.Match(MojoParserIdentifier)
			}

		}
		p.SetState(690)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())
	}

	return localctx
}

// IImportDeclarationContext is an interface to support dynamic dispatch.
type IImportDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportDeclarationContext differentiates from other interfaces.
	IsImportDeclarationContext()
}

type ImportDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDeclarationContext() *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importDeclaration
	return p
}

func (*ImportDeclarationContext) IsImportDeclarationContext() {}

func NewImportDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importDeclaration

	return p
}

func (s *ImportDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDeclarationContext) KEYWORD_IMPORT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IMPORT, 0)
}

func (s *ImportDeclarationContext) ImportPath() IImportPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportPathContext)
}

func (s *ImportDeclarationContext) ImportAllClause() IImportAllClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportAllClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportAllClauseContext)
}

func (s *ImportDeclarationContext) ImportValueAsClause() IImportValueAsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportValueAsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportValueAsClauseContext)
}

func (s *ImportDeclarationContext) ImportTypeClause() IImportTypeClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportTypeClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportTypeClauseContext)
}

func (s *ImportDeclarationContext) ImportGroupClause() IImportGroupClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportGroupClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportGroupClauseContext)
}

func (s *ImportDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportDeclaration() (localctx IImportDeclarationContext) {
	localctx = NewImportDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, MojoParserRULE_importDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(691)
		p.Match(MojoParserKEYWORD_IMPORT)
	}
	{
		p.SetState(692)
		p.ImportPath()
	}
	p.SetState(697)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(693)
			p.ImportAllClause()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(694)
			p.ImportValueAsClause()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(695)
			p.ImportTypeClause()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(696)
			p.ImportGroupClause()
		}

	}

	return localctx
}

// IImportPathContext is an interface to support dynamic dispatch.
type IImportPathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportPathContext differentiates from other interfaces.
	IsImportPathContext()
}

type ImportPathContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportPathContext() *ImportPathContext {
	var p = new(ImportPathContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importPath
	return p
}

func (*ImportPathContext) IsImportPathContext() {}

func NewImportPathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportPathContext {
	var p = new(ImportPathContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importPath

	return p
}

func (s *ImportPathContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportPathContext) AllImportPathIdentifier() []IImportPathIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportPathIdentifierContext)(nil)).Elem())
	var tst = make([]IImportPathIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportPathIdentifierContext)
		}
	}

	return tst
}

func (s *ImportPathContext) ImportPathIdentifier(i int) IImportPathIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportPathIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportPathIdentifierContext)
}

func (s *ImportPathContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserDOT)
}

func (s *ImportPathContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, i)
}

func (s *ImportPathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportPathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportPathContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportPath(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportPath() (localctx IImportPathContext) {
	localctx = NewImportPathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, MojoParserRULE_importPath)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(699)
		p.ImportPathIdentifier()
	}
	p.SetState(704)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(700)
				p.Match(MojoParserDOT)
			}
			{
				p.SetState(701)
				p.ImportPathIdentifier()
			}

		}
		p.SetState(706)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())
	}

	return localctx
}

// IImportPathIdentifierContext is an interface to support dynamic dispatch.
type IImportPathIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportPathIdentifierContext differentiates from other interfaces.
	IsImportPathIdentifierContext()
}

type ImportPathIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportPathIdentifierContext() *ImportPathIdentifierContext {
	var p = new(ImportPathIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importPathIdentifier
	return p
}

func (*ImportPathIdentifierContext) IsImportPathIdentifierContext() {}

func NewImportPathIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportPathIdentifierContext {
	var p = new(ImportPathIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importPathIdentifier

	return p
}

func (s *ImportPathIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportPathIdentifierContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *ImportPathIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportPathIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportPathIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportPathIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportPathIdentifier() (localctx IImportPathIdentifierContext) {
	localctx = NewImportPathIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, MojoParserRULE_importPathIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(707)
		p.DeclarationIdentifier()
	}

	return localctx
}

// IImportAllClauseContext is an interface to support dynamic dispatch.
type IImportAllClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportAllClauseContext differentiates from other interfaces.
	IsImportAllClauseContext()
}

type ImportAllClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportAllClauseContext() *ImportAllClauseContext {
	var p = new(ImportAllClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importAllClause
	return p
}

func (*ImportAllClauseContext) IsImportAllClauseContext() {}

func NewImportAllClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportAllClauseContext {
	var p = new(ImportAllClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importAllClause

	return p
}

func (s *ImportAllClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportAllClauseContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ImportAllClauseContext) MUL() antlr.TerminalNode {
	return s.GetToken(MojoParserMUL, 0)
}

func (s *ImportAllClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportAllClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportAllClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportAllClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportAllClause() (localctx IImportAllClauseContext) {
	localctx = NewImportAllClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, MojoParserRULE_importAllClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(709)
		p.Match(MojoParserDOT)
	}
	{
		p.SetState(710)
		p.Match(MojoParserMUL)
	}

	return localctx
}

// IImportValueAsClauseContext is an interface to support dynamic dispatch.
type IImportValueAsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportValueAsClauseContext differentiates from other interfaces.
	IsImportValueAsClauseContext()
}

type ImportValueAsClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportValueAsClauseContext() *ImportValueAsClauseContext {
	var p = new(ImportValueAsClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importValueAsClause
	return p
}

func (*ImportValueAsClauseContext) IsImportValueAsClauseContext() {}

func NewImportValueAsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportValueAsClauseContext {
	var p = new(ImportValueAsClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importValueAsClause

	return p
}

func (s *ImportValueAsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportValueAsClauseContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *ImportValueAsClauseContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *ImportValueAsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportValueAsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportValueAsClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportValueAsClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportValueAsClause() (localctx IImportValueAsClauseContext) {
	localctx = NewImportValueAsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, MojoParserRULE_importValueAsClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(712)
		p.Match(MojoParserKEYWORD_AS)
	}
	{
		p.SetState(713)
		p.DeclarationIdentifier()
	}

	return localctx
}

// IImportTypeClauseContext is an interface to support dynamic dispatch.
type IImportTypeClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportTypeClauseContext differentiates from other interfaces.
	IsImportTypeClauseContext()
}

type ImportTypeClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportTypeClauseContext() *ImportTypeClauseContext {
	var p = new(ImportTypeClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importTypeClause
	return p
}

func (*ImportTypeClauseContext) IsImportTypeClauseContext() {}

func NewImportTypeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportTypeClauseContext {
	var p = new(ImportTypeClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importTypeClause

	return p
}

func (s *ImportTypeClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportTypeClauseContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ImportTypeClauseContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ImportTypeClauseContext) ImportTypeAsClause() IImportTypeAsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportTypeAsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportTypeAsClauseContext)
}

func (s *ImportTypeClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportTypeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportTypeClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportTypeClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportTypeClause() (localctx IImportTypeClauseContext) {
	localctx = NewImportTypeClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, MojoParserRULE_importTypeClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(715)
		p.Match(MojoParserDOT)
	}
	{
		p.SetState(716)
		p.TypeName()
	}
	p.SetState(718)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserKEYWORD_AS {
		{
			p.SetState(717)
			p.ImportTypeAsClause()
		}

	}

	return localctx
}

// IImportTypeAsClauseContext is an interface to support dynamic dispatch.
type IImportTypeAsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportTypeAsClauseContext differentiates from other interfaces.
	IsImportTypeAsClauseContext()
}

type ImportTypeAsClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportTypeAsClauseContext() *ImportTypeAsClauseContext {
	var p = new(ImportTypeAsClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importTypeAsClause
	return p
}

func (*ImportTypeAsClauseContext) IsImportTypeAsClauseContext() {}

func NewImportTypeAsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportTypeAsClauseContext {
	var p = new(ImportTypeAsClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importTypeAsClause

	return p
}

func (s *ImportTypeAsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportTypeAsClauseContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *ImportTypeAsClauseContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ImportTypeAsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportTypeAsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportTypeAsClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportTypeAsClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportTypeAsClause() (localctx IImportTypeAsClauseContext) {
	localctx = NewImportTypeAsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, MojoParserRULE_importTypeAsClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(720)
		p.Match(MojoParserKEYWORD_AS)
	}
	{
		p.SetState(721)
		p.TypeName()
	}

	return localctx
}

// IImportGroupClauseContext is an interface to support dynamic dispatch.
type IImportGroupClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportGroupClauseContext differentiates from other interfaces.
	IsImportGroupClauseContext()
}

type ImportGroupClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportGroupClauseContext() *ImportGroupClauseContext {
	var p = new(ImportGroupClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importGroupClause
	return p
}

func (*ImportGroupClauseContext) IsImportGroupClauseContext() {}

func NewImportGroupClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportGroupClauseContext {
	var p = new(ImportGroupClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importGroupClause

	return p
}

func (s *ImportGroupClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportGroupClauseContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ImportGroupClauseContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *ImportGroupClauseContext) ImportGroup() IImportGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportGroupContext)
}

func (s *ImportGroupClauseContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *ImportGroupClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ImportGroupClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ImportGroupClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportGroupClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportGroupClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportGroupClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportGroupClause() (localctx IImportGroupClauseContext) {
	localctx = NewImportGroupClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, MojoParserRULE_importGroupClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(723)
		p.Match(MojoParserDOT)
	}
	{
		p.SetState(724)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(728)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(725)
			p.Match(MojoParserEOL)
		}

		p.SetState(730)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(731)
		p.ImportGroup()
	}
	p.SetState(735)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(732)
			p.Match(MojoParserEOL)
		}

		p.SetState(737)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(738)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IImportGroupContext is an interface to support dynamic dispatch.
type IImportGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportGroupContext differentiates from other interfaces.
	IsImportGroupContext()
}

type ImportGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportGroupContext() *ImportGroupContext {
	var p = new(ImportGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importGroup
	return p
}

func (*ImportGroupContext) IsImportGroupContext() {}

func NewImportGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportGroupContext {
	var p = new(ImportGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importGroup

	return p
}

func (s *ImportGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportGroupContext) AllImportValue() []IImportValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportValueContext)(nil)).Elem())
	var tst = make([]IImportValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportValueContext)
		}
	}

	return tst
}

func (s *ImportGroupContext) ImportValue(i int) IImportValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportValueContext)
}

func (s *ImportGroupContext) AllImportType() []IImportTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportTypeContext)(nil)).Elem())
	var tst = make([]IImportTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportTypeContext)
		}
	}

	return tst
}

func (s *ImportGroupContext) ImportType(i int) IImportTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportTypeContext)
}

func (s *ImportGroupContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *ImportGroupContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ImportGroupContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ImportGroupContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ImportGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportGroup() (localctx IImportGroupContext) {
	localctx = NewImportGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, MojoParserRULE_importGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(742)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_CONTINUE, MojoParserKEYWORD_ELSE, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FALSE, MojoParserKEYWORD_FOR, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IF, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_IS, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_OR, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_RETURN, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TRUE, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_VAR, MojoParserKEYWORD_WHILE, MojoParserKEYWORD_XOR, MojoParserIdentifier:
		{
			p.SetState(740)
			p.ImportValue()
		}

	case MojoParserTypeName:
		{
			p.SetState(741)
			p.ImportType()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(757)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(744)
				p.Eov()
			}
			p.SetState(748)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(745)
					p.Match(MojoParserEOL)
				}

				p.SetState(750)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(753)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_CONTINUE, MojoParserKEYWORD_ELSE, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FALSE, MojoParserKEYWORD_FOR, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IF, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_IS, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_OR, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_RETURN, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TRUE, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_VAR, MojoParserKEYWORD_WHILE, MojoParserKEYWORD_XOR, MojoParserIdentifier:
				{
					p.SetState(751)
					p.ImportValue()
				}

			case MojoParserTypeName:
				{
					p.SetState(752)
					p.ImportType()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(759)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext())
	}
	p.SetState(761)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(760)
			p.Eov()
		}

	}

	return localctx
}

// IImportValueContext is an interface to support dynamic dispatch.
type IImportValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportValueContext differentiates from other interfaces.
	IsImportValueContext()
}

type ImportValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportValueContext() *ImportValueContext {
	var p = new(ImportValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importValue
	return p
}

func (*ImportValueContext) IsImportValueContext() {}

func NewImportValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportValueContext {
	var p = new(ImportValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importValue

	return p
}

func (s *ImportValueContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportValueContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *ImportValueContext) ImportValueAsClause() IImportValueAsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportValueAsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportValueAsClauseContext)
}

func (s *ImportValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportValue() (localctx IImportValueContext) {
	localctx = NewImportValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, MojoParserRULE_importValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(763)
		p.DeclarationIdentifier()
	}
	p.SetState(765)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserKEYWORD_AS {
		{
			p.SetState(764)
			p.ImportValueAsClause()
		}

	}

	return localctx
}

// IImportTypeContext is an interface to support dynamic dispatch.
type IImportTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportTypeContext differentiates from other interfaces.
	IsImportTypeContext()
}

type ImportTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportTypeContext() *ImportTypeContext {
	var p = new(ImportTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importType
	return p
}

func (*ImportTypeContext) IsImportTypeContext() {}

func NewImportTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportTypeContext {
	var p = new(ImportTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importType

	return p
}

func (s *ImportTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportTypeContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ImportTypeContext) ImportTypeAsClause() IImportTypeAsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportTypeAsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportTypeAsClauseContext)
}

func (s *ImportTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportType() (localctx IImportTypeContext) {
	localctx = NewImportTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, MojoParserRULE_importType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(767)
		p.TypeName()
	}
	p.SetState(769)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserKEYWORD_AS {
		{
			p.SetState(768)
			p.ImportTypeAsClause()
		}

	}

	return localctx
}

// IConstantDeclarationContext is an interface to support dynamic dispatch.
type IConstantDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantDeclarationContext differentiates from other interfaces.
	IsConstantDeclarationContext()
}

type ConstantDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantDeclarationContext() *ConstantDeclarationContext {
	var p = new(ConstantDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_constantDeclaration
	return p
}

func (*ConstantDeclarationContext) IsConstantDeclarationContext() {}

func NewConstantDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantDeclarationContext {
	var p = new(ConstantDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_constantDeclaration

	return p
}

func (s *ConstantDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantDeclarationContext) KEYWORD_CONST() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONST, 0)
}

func (s *ConstantDeclarationContext) PatternInitializers() IPatternInitializersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternInitializersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternInitializersContext)
}

func (s *ConstantDeclarationContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *ConstantDeclarationContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *ConstantDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ConstantDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ConstantDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitConstantDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ConstantDeclaration() (localctx IConstantDeclarationContext) {
	localctx = NewConstantDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, MojoParserRULE_constantDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(772)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLineDocument {
		{
			p.SetState(771)
			p.Document()
		}

	}
	p.SetState(781)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) == 1 {
		p.SetState(777)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(774)
				p.Match(MojoParserEOL)
			}

			p.SetState(779)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(780)
			p.Attributes()
		}

	}
	p.SetState(786)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(783)
			p.Match(MojoParserEOL)
		}

		p.SetState(788)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(789)
		p.Match(MojoParserKEYWORD_CONST)
	}
	{
		p.SetState(790)
		p.PatternInitializers()
	}

	return localctx
}

// IPatternInitializersContext is an interface to support dynamic dispatch.
type IPatternInitializersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPatternInitializersContext differentiates from other interfaces.
	IsPatternInitializersContext()
}

type PatternInitializersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternInitializersContext() *PatternInitializersContext {
	var p = new(PatternInitializersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_patternInitializers
	return p
}

func (*PatternInitializersContext) IsPatternInitializersContext() {}

func NewPatternInitializersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternInitializersContext {
	var p = new(PatternInitializersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_patternInitializers

	return p
}

func (s *PatternInitializersContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternInitializersContext) AllPatternInitializer() []IPatternInitializerContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPatternInitializerContext)(nil)).Elem())
	var tst = make([]IPatternInitializerContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPatternInitializerContext)
		}
	}

	return tst
}

func (s *PatternInitializersContext) PatternInitializer(i int) IPatternInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternInitializerContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPatternInitializerContext)
}

func (s *PatternInitializersContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MojoParserCOMMA)
}

func (s *PatternInitializersContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, i)
}

func (s *PatternInitializersContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *PatternInitializersContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *PatternInitializersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *PatternInitializersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *PatternInitializersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternInitializersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternInitializersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPatternInitializers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PatternInitializers() (localctx IPatternInitializersContext) {
	localctx = NewPatternInitializersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, MojoParserRULE_patternInitializers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(823)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(792)
			p.PatternInitializer()
		}
		p.SetState(797)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserCOMMA {
			{
				p.SetState(793)
				p.Match(MojoParserCOMMA)
			}
			{
				p.SetState(794)
				p.PatternInitializer()
			}

			p.SetState(799)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(800)
			p.Match(MojoParserLCURLY)
		}
		p.SetState(804)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(801)
				p.Match(MojoParserEOL)
			}

			p.SetState(806)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(807)
			p.PatternInitializer()
		}
		p.SetState(812)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserCOMMA {
			{
				p.SetState(808)
				p.Match(MojoParserCOMMA)
			}
			{
				p.SetState(809)
				p.PatternInitializer()
			}

			p.SetState(814)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(818)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(815)
				p.Match(MojoParserEOL)
			}

			p.SetState(820)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(821)
			p.Match(MojoParserRCURLY)
		}

	}

	return localctx
}

// IPatternInitializerContext is an interface to support dynamic dispatch.
type IPatternInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPatternInitializerContext differentiates from other interfaces.
	IsPatternInitializerContext()
}

type PatternInitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternInitializerContext() *PatternInitializerContext {
	var p = new(PatternInitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_patternInitializer
	return p
}

func (*PatternInitializerContext) IsPatternInitializerContext() {}

func NewPatternInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternInitializerContext {
	var p = new(PatternInitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_patternInitializer

	return p
}

func (s *PatternInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternInitializerContext) Pattern() IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *PatternInitializerContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *PatternInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternInitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPatternInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PatternInitializer() (localctx IPatternInitializerContext) {
	localctx = NewPatternInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, MojoParserRULE_patternInitializer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(825)
		p.pattern(0)
	}
	p.SetState(827)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserEQUAL {
		{
			p.SetState(826)
			p.Initializer()
		}

	}

	return localctx
}

// IInitializerContext is an interface to support dynamic dispatch.
type IInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializerContext differentiates from other interfaces.
	IsInitializerContext()
}

type InitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerContext() *InitializerContext {
	var p = new(InitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_initializer
	return p
}

func (*InitializerContext) IsInitializerContext() {}

func NewInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerContext {
	var p = new(InitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_initializer

	return p
}

func (s *InitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *InitializerContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InitializerContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InitializerContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Initializer() (localctx IInitializerContext) {
	localctx = NewInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, MojoParserRULE_initializer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(829)
		p.AssignmentOperator()
	}
	p.SetState(833)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(830)
			p.Match(MojoParserEOL)
		}

		p.SetState(835)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(836)
		p.Expression()
	}

	return localctx
}

// IVariableDeclarationContext is an interface to support dynamic dispatch.
type IVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationContext differentiates from other interfaces.
	IsVariableDeclarationContext()
}

type VariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationContext() *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_variableDeclaration
	return p
}

func (*VariableDeclarationContext) IsVariableDeclarationContext() {}

func NewVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_variableDeclaration

	return p
}

func (s *VariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationContext) KEYWORD_VAR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_VAR, 0)
}

func (s *VariableDeclarationContext) PatternInitializers() IPatternInitializersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternInitializersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternInitializersContext)
}

func (s *VariableDeclarationContext) IdentifierPattern() IIdentifierPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierPatternContext)
}

func (s *VariableDeclarationContext) COLON_EQUAL() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON_EQUAL, 0)
}

func (s *VariableDeclarationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *VariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitVariableDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) VariableDeclaration() (localctx IVariableDeclarationContext) {
	localctx = NewVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, MojoParserRULE_variableDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(844)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(838)
			p.Match(MojoParserKEYWORD_VAR)
		}
		{
			p.SetState(839)
			p.PatternInitializers()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(840)
			p.IdentifierPattern()
		}
		{
			p.SetState(841)
			p.Match(MojoParserCOLON_EQUAL)
		}
		{
			p.SetState(842)
			p.Expression()
		}

	}

	return localctx
}

// ITypeAliasDeclarationContext is an interface to support dynamic dispatch.
type ITypeAliasDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAliasDeclarationContext differentiates from other interfaces.
	IsTypeAliasDeclarationContext()
}

type TypeAliasDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAliasDeclarationContext() *TypeAliasDeclarationContext {
	var p = new(TypeAliasDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeAliasDeclaration
	return p
}

func (*TypeAliasDeclarationContext) IsTypeAliasDeclarationContext() {}

func NewTypeAliasDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAliasDeclarationContext {
	var p = new(TypeAliasDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeAliasDeclaration

	return p
}

func (s *TypeAliasDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAliasDeclarationContext) KEYWORD_TYPE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TYPE, 0)
}

func (s *TypeAliasDeclarationContext) TypealiasName() ITypealiasNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypealiasNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypealiasNameContext)
}

func (s *TypeAliasDeclarationContext) TypealiasAssignment() ITypealiasAssignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypealiasAssignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypealiasAssignmentContext)
}

func (s *TypeAliasDeclarationContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *TypeAliasDeclarationContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *TypeAliasDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TypeAliasDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TypeAliasDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *TypeAliasDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAliasDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAliasDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeAliasDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeAliasDeclaration() (localctx ITypeAliasDeclarationContext) {
	localctx = NewTypeAliasDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, MojoParserRULE_typeAliasDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(847)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLineDocument {
		{
			p.SetState(846)
			p.Document()
		}

	}
	p.SetState(856)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) == 1 {
		p.SetState(852)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(849)
				p.Match(MojoParserEOL)
			}

			p.SetState(854)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(855)
			p.Attributes()
		}

	}
	p.SetState(861)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(858)
			p.Match(MojoParserEOL)
		}

		p.SetState(863)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(864)
		p.Match(MojoParserKEYWORD_TYPE)
	}
	{
		p.SetState(865)
		p.TypealiasName()
	}
	p.SetState(867)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(866)
			p.GenericParameterClause()
		}

	}
	p.SetState(872)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(869)
			p.Match(MojoParserEOL)
		}

		p.SetState(874)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(875)
		p.TypealiasAssignment()
	}

	return localctx
}

// ITypealiasNameContext is an interface to support dynamic dispatch.
type ITypealiasNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypealiasNameContext differentiates from other interfaces.
	IsTypealiasNameContext()
}

type TypealiasNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypealiasNameContext() *TypealiasNameContext {
	var p = new(TypealiasNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typealiasName
	return p
}

func (*TypealiasNameContext) IsTypealiasNameContext() {}

func NewTypealiasNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypealiasNameContext {
	var p = new(TypealiasNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typealiasName

	return p
}

func (s *TypealiasNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypealiasNameContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *TypealiasNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypealiasNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypealiasNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypealiasName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypealiasName() (localctx ITypealiasNameContext) {
	localctx = NewTypealiasNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, MojoParserRULE_typealiasName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(877)
		p.TypeName()
	}

	return localctx
}

// ITypealiasAssignmentContext is an interface to support dynamic dispatch.
type ITypealiasAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypealiasAssignmentContext differentiates from other interfaces.
	IsTypealiasAssignmentContext()
}

type TypealiasAssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypealiasAssignmentContext() *TypealiasAssignmentContext {
	var p = new(TypealiasAssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typealiasAssignment
	return p
}

func (*TypealiasAssignmentContext) IsTypealiasAssignmentContext() {}

func NewTypealiasAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypealiasAssignmentContext {
	var p = new(TypealiasAssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typealiasAssignment

	return p
}

func (s *TypealiasAssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *TypealiasAssignmentContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *TypealiasAssignmentContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypealiasAssignmentContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TypealiasAssignmentContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TypealiasAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypealiasAssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypealiasAssignmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypealiasAssignment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypealiasAssignment() (localctx ITypealiasAssignmentContext) {
	localctx = NewTypealiasAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, MojoParserRULE_typealiasAssignment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(879)
		p.AssignmentOperator()
	}
	p.SetState(883)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(880)
			p.Match(MojoParserEOL)
		}

		p.SetState(885)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(886)
		p.type_(0)
	}

	return localctx
}

// IFunctionDeclarationContext is an interface to support dynamic dispatch.
type IFunctionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclarationContext differentiates from other interfaces.
	IsFunctionDeclarationContext()
}

type FunctionDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclarationContext() *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionDeclaration
	return p
}

func (*FunctionDeclarationContext) IsFunctionDeclarationContext() {}

func NewFunctionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionDeclaration

	return p
}

func (s *FunctionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclarationContext) FunctionHead() IFunctionHeadContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionHeadContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionHeadContext)
}

func (s *FunctionDeclarationContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *FunctionDeclarationContext) FunctionSignature() IFunctionSignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionSignatureContext)
}

func (s *FunctionDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *FunctionDeclarationContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionDeclaration() (localctx IFunctionDeclarationContext) {
	localctx = NewFunctionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, MojoParserRULE_functionDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(888)
		p.FunctionHead()
	}
	{
		p.SetState(889)
		p.FunctionName()
	}
	p.SetState(891)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(890)
			p.GenericParameterClause()
		}

	}
	{
		p.SetState(893)
		p.FunctionSignature()
	}
	p.SetState(901)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) == 1 {
		p.SetState(897)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(894)
				p.Match(MojoParserEOL)
			}

			p.SetState(899)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(900)
			p.FunctionBody()
		}

	}

	return localctx
}

// IFunctionHeadContext is an interface to support dynamic dispatch.
type IFunctionHeadContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionHeadContext differentiates from other interfaces.
	IsFunctionHeadContext()
}

type FunctionHeadContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionHeadContext() *FunctionHeadContext {
	var p = new(FunctionHeadContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionHead
	return p
}

func (*FunctionHeadContext) IsFunctionHeadContext() {}

func NewFunctionHeadContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionHeadContext {
	var p = new(FunctionHeadContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionHead

	return p
}

func (s *FunctionHeadContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionHeadContext) KEYWORD_FUNC() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FUNC, 0)
}

func (s *FunctionHeadContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *FunctionHeadContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *FunctionHeadContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionHeadContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionHeadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionHeadContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionHeadContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionHead(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionHead() (localctx IFunctionHeadContext) {
	localctx = NewFunctionHeadContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, MojoParserRULE_functionHead)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(904)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLineDocument {
		{
			p.SetState(903)
			p.Document()
		}

	}
	p.SetState(913)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext()) == 1 {
		p.SetState(909)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(906)
				p.Match(MojoParserEOL)
			}

			p.SetState(911)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(912)
			p.Attributes()
		}

	}
	p.SetState(918)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(915)
			p.Match(MojoParserEOL)
		}

		p.SetState(920)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(921)
		p.Match(MojoParserKEYWORD_FUNC)
	}

	return localctx
}

// IFunctionNameContext is an interface to support dynamic dispatch.
type IFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionNameContext differentiates from other interfaces.
	IsFunctionNameContext()
}

type FunctionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionNameContext() *FunctionNameContext {
	var p = new(FunctionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionName
	return p
}

func (*FunctionNameContext) IsFunctionNameContext() {}

func NewFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionNameContext {
	var p = new(FunctionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionName

	return p
}

func (s *FunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionNameContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *FunctionNameContext) Operator() IOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *FunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionName() (localctx IFunctionNameContext) {
	localctx = NewFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, MojoParserRULE_functionName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(925)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_CONTINUE, MojoParserKEYWORD_ELSE, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FALSE, MojoParserKEYWORD_FOR, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IF, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_IS, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_OR, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_RETURN, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TRUE, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_VAR, MojoParserKEYWORD_WHILE, MojoParserKEYWORD_XOR, MojoParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(923)
			p.DeclarationIdentifier()
		}

	case MojoParserDOT, MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserSUB, MojoParserEQUAL, MojoParserOR, MojoParserDIV, MojoParserADD, MojoParserMUL, MojoParserMOD, MojoParserCARET, MojoParserTILDE, MojoParserOperator_head_other:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(924)
			p.Operator()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunctionSignatureContext is an interface to support dynamic dispatch.
type IFunctionSignatureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionSignatureContext differentiates from other interfaces.
	IsFunctionSignatureContext()
}

type FunctionSignatureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionSignatureContext() *FunctionSignatureContext {
	var p = new(FunctionSignatureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionSignature
	return p
}

func (*FunctionSignatureContext) IsFunctionSignatureContext() {}

func NewFunctionSignatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionSignatureContext {
	var p = new(FunctionSignatureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionSignature

	return p
}

func (s *FunctionSignatureContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionSignatureContext) FunctionParameterClause() IFunctionParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionParameterClauseContext)
}

func (s *FunctionSignatureContext) FunctionResult() IFunctionResultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionResultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionResultContext)
}

func (s *FunctionSignatureContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionSignatureContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionSignatureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionSignatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionSignatureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionSignature(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionSignature() (localctx IFunctionSignatureContext) {
	localctx = NewFunctionSignatureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, MojoParserRULE_functionSignature)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(927)
		p.FunctionParameterClause()
	}
	p.SetState(935)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) == 1 {
		p.SetState(931)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(928)
				p.Match(MojoParserEOL)
			}

			p.SetState(933)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(934)
			p.FunctionResult()
		}

	}

	return localctx
}

// IFunctionResultContext is an interface to support dynamic dispatch.
type IFunctionResultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionResultContext differentiates from other interfaces.
	IsFunctionResultContext()
}

type FunctionResultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionResultContext() *FunctionResultContext {
	var p = new(FunctionResultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionResult
	return p
}

func (*FunctionResultContext) IsFunctionResultContext() {}

func NewFunctionResultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionResultContext {
	var p = new(FunctionResultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionResult

	return p
}

func (s *FunctionResultContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionResultContext) ArrowOperator() IArrowOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowOperatorContext)
}

func (s *FunctionResultContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FunctionResultContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *FunctionResultContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *FunctionResultContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *FunctionResultContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *FunctionResultContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionResultContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionResultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionResultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionResultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionResult(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionResult() (localctx IFunctionResultContext) {
	localctx = NewFunctionResultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, MojoParserRULE_functionResult)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(937)
		p.ArrowOperator()
	}
	p.SetState(941)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(938)
			p.LabelIdentifier()
		}
		{
			p.SetState(939)
			p.Match(MojoParserCOLON)
		}

	}
	{
		p.SetState(943)
		p.type_(0)
	}
	p.SetState(945)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(944)
			p.Attributes()
		}

	}
	p.SetState(954)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) == 1 {
		p.SetState(950)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(947)
				p.Match(MojoParserEOL)
			}

			p.SetState(952)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(953)
			p.FollowingDocument()
		}

	}

	return localctx
}

// IFunctionBodyContext is an interface to support dynamic dispatch.
type IFunctionBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionBodyContext differentiates from other interfaces.
	IsFunctionBodyContext()
}

type FunctionBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionBodyContext() *FunctionBodyContext {
	var p = new(FunctionBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionBody
	return p
}

func (*FunctionBodyContext) IsFunctionBodyContext() {}

func NewFunctionBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionBodyContext {
	var p = new(FunctionBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionBody

	return p
}

func (s *FunctionBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionBodyContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *FunctionBodyContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *FunctionBodyContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *FunctionBodyContext) Statements() IStatementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementsContext)
}

func (s *FunctionBodyContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionBodyContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionBodyContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *FunctionBodyContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *FunctionBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionBody() (localctx IFunctionBodyContext) {
	localctx = NewFunctionBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, MojoParserRULE_functionBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(956)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(964)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) == 1 {
		p.SetState(960)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserCOMMA || _la == MojoParserEOL {
			{
				p.SetState(957)
				p.Eov()
			}

			p.SetState(962)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(963)
			p.FollowingDocument()
		}

	}
	p.SetState(973)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext()) == 1 {
		p.SetState(969)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(966)
					p.Match(MojoParserEOL)
				}

			}
			p.SetState(971)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext())
		}
		{
			p.SetState(972)
			p.Statements()
		}

	}
	p.SetState(978)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(975)
			p.Match(MojoParserEOL)
		}

		p.SetState(980)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(981)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IFunctionParameterClauseContext is an interface to support dynamic dispatch.
type IFunctionParameterClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionParameterClauseContext differentiates from other interfaces.
	IsFunctionParameterClauseContext()
}

type FunctionParameterClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionParameterClauseContext() *FunctionParameterClauseContext {
	var p = new(FunctionParameterClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionParameterClause
	return p
}

func (*FunctionParameterClauseContext) IsFunctionParameterClauseContext() {}

func NewFunctionParameterClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionParameterClauseContext {
	var p = new(FunctionParameterClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionParameterClause

	return p
}

func (s *FunctionParameterClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionParameterClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *FunctionParameterClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *FunctionParameterClauseContext) FunctionParameters() IFunctionParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionParametersContext)
}

func (s *FunctionParameterClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionParameterClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionParameterClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionParameterClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionParameterClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionParameterClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionParameterClause() (localctx IFunctionParameterClauseContext) {
	localctx = NewFunctionParameterClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, MojoParserRULE_functionParameterClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1001)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(983)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(984)
			p.Match(MojoParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(985)
			p.Match(MojoParserLPAREN)
		}
		p.SetState(989)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(986)
				p.Match(MojoParserEOL)
			}

			p.SetState(991)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(992)
			p.FunctionParameters()
		}
		p.SetState(996)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(993)
				p.Match(MojoParserEOL)
			}

			p.SetState(998)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(999)
			p.Match(MojoParserRPAREN)
		}

	}

	return localctx
}

// IFunctionParametersContext is an interface to support dynamic dispatch.
type IFunctionParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionParametersContext differentiates from other interfaces.
	IsFunctionParametersContext()
}

type FunctionParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionParametersContext() *FunctionParametersContext {
	var p = new(FunctionParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionParameters
	return p
}

func (*FunctionParametersContext) IsFunctionParametersContext() {}

func NewFunctionParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionParametersContext {
	var p = new(FunctionParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionParameters

	return p
}

func (s *FunctionParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionParametersContext) AllFunctionParameter() []IFunctionParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionParameterContext)(nil)).Elem())
	var tst = make([]IFunctionParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionParameterContext)
		}
	}

	return tst
}

func (s *FunctionParametersContext) FunctionParameter(i int) IFunctionParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionParameterContext)
}

func (s *FunctionParametersContext) AllEovWithDocument() []IEovWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem())
	var tst = make([]IEovWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovWithDocumentContext)
		}
	}

	return tst
}

func (s *FunctionParametersContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *FunctionParametersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionParametersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionParameters() (localctx IFunctionParametersContext) {
	localctx = NewFunctionParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, MojoParserRULE_functionParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1003)
		p.FunctionParameter()
	}
	p.SetState(1015)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1004)
				p.EovWithDocument()
			}
			p.SetState(1008)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1005)
					p.Match(MojoParserEOL)
				}

				p.SetState(1010)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1011)
				p.FunctionParameter()
			}

		}
		p.SetState(1017)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext())
	}
	p.SetState(1019)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 110, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1018)
			p.EovWithDocument()
		}

	}

	return localctx
}

// IFunctionParameterContext is an interface to support dynamic dispatch.
type IFunctionParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionParameterContext differentiates from other interfaces.
	IsFunctionParameterContext()
}

type FunctionParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionParameterContext() *FunctionParameterContext {
	var p = new(FunctionParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionParameter
	return p
}

func (*FunctionParameterContext) IsFunctionParameterContext() {}

func NewFunctionParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionParameterContext {
	var p = new(FunctionParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionParameter

	return p
}

func (s *FunctionParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionParameterContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *FunctionParameterContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *FunctionParameterContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *FunctionParameterContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionParameterContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionParameterContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *FunctionParameterContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FunctionParameterContext) ELLIPSIS() antlr.TerminalNode {
	return s.GetToken(MojoParserELLIPSIS, 0)
}

func (s *FunctionParameterContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *FunctionParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionParameter() (localctx IFunctionParameterContext) {
	localctx = NewFunctionParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, MojoParserRULE_functionParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1039)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1021)
			p.LabelIdentifier()
		}
		{
			p.SetState(1022)
			p.TypeAnnotation()
		}
		p.SetState(1030)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) == 1 {
			p.SetState(1026)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1023)
					p.Match(MojoParserEOL)
				}

				p.SetState(1028)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1029)
				p.Initializer()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1032)
			p.LabelIdentifier()
		}
		{
			p.SetState(1033)
			p.Match(MojoParserCOLON)
		}
		{
			p.SetState(1034)
			p.type_(0)
		}
		{
			p.SetState(1035)
			p.Match(MojoParserELLIPSIS)
		}
		p.SetState(1037)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserAT {
			{
				p.SetState(1036)
				p.Attributes()
			}

		}

	}

	return localctx
}

// IEnumDeclarationContext is an interface to support dynamic dispatch.
type IEnumDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumDeclarationContext differentiates from other interfaces.
	IsEnumDeclarationContext()
}

type EnumDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumDeclarationContext() *EnumDeclarationContext {
	var p = new(EnumDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumDeclaration
	return p
}

func (*EnumDeclarationContext) IsEnumDeclarationContext() {}

func NewEnumDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumDeclarationContext {
	var p = new(EnumDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumDeclaration

	return p
}

func (s *EnumDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumDeclarationContext) KEYWORD_ENUM() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ENUM, 0)
}

func (s *EnumDeclarationContext) EnumName() IEnumNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumNameContext)
}

func (s *EnumDeclarationContext) EnumBody() IEnumBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumBodyContext)
}

func (s *EnumDeclarationContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *EnumDeclarationContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *EnumDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EnumDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EnumDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *EnumDeclarationContext) TypeInheritanceClause() ITypeInheritanceClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeInheritanceClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeInheritanceClauseContext)
}

func (s *EnumDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumDeclaration() (localctx IEnumDeclarationContext) {
	localctx = NewEnumDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, MojoParserRULE_enumDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1042)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLineDocument {
		{
			p.SetState(1041)
			p.Document()
		}

	}
	p.SetState(1051)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext()) == 1 {
		p.SetState(1047)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1044)
				p.Match(MojoParserEOL)
			}

			p.SetState(1049)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1050)
			p.Attributes()
		}

	}
	p.SetState(1056)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1053)
			p.Match(MojoParserEOL)
		}

		p.SetState(1058)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1059)
		p.Match(MojoParserKEYWORD_ENUM)
	}
	{
		p.SetState(1060)
		p.EnumName()
	}
	p.SetState(1062)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1061)
			p.GenericParameterClause()
		}

	}
	p.SetState(1071)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 121, p.GetParserRuleContext()) == 1 {
		p.SetState(1067)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1064)
				p.Match(MojoParserEOL)
			}

			p.SetState(1069)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1070)
			p.TypeInheritanceClause()
		}

	}
	p.SetState(1076)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1073)
			p.Match(MojoParserEOL)
		}

		p.SetState(1078)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1079)
		p.EnumBody()
	}

	return localctx
}

// IEnumBodyContext is an interface to support dynamic dispatch.
type IEnumBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumBodyContext differentiates from other interfaces.
	IsEnumBodyContext()
}

type EnumBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumBodyContext() *EnumBodyContext {
	var p = new(EnumBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumBody
	return p
}

func (*EnumBodyContext) IsEnumBodyContext() {}

func NewEnumBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumBodyContext {
	var p = new(EnumBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumBody

	return p
}

func (s *EnumBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumBodyContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *EnumBodyContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *EnumBodyContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *EnumBodyContext) EnumMembers() IEnumMembersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumMembersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumMembersContext)
}

func (s *EnumBodyContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EnumBodyContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EnumBodyContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *EnumBodyContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *EnumBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumBody() (localctx IEnumBodyContext) {
	localctx = NewEnumBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, MojoParserRULE_enumBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1081)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(1089)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 1 {
		p.SetState(1085)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserCOMMA || _la == MojoParserEOL {
			{
				p.SetState(1082)
				p.Eov()
			}

			p.SetState(1087)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1088)
			p.FollowingDocument()
		}

	}
	p.SetState(1098)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext()) == 1 {
		p.SetState(1094)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1091)
					p.Match(MojoParserEOL)
				}

			}
			p.SetState(1096)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext())
		}
		{
			p.SetState(1097)
			p.EnumMembers()
		}

	}
	p.SetState(1103)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1100)
			p.Match(MojoParserEOL)
		}

		p.SetState(1105)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1106)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IEnumNameContext is an interface to support dynamic dispatch.
type IEnumNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumNameContext differentiates from other interfaces.
	IsEnumNameContext()
}

type EnumNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumNameContext() *EnumNameContext {
	var p = new(EnumNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumName
	return p
}

func (*EnumNameContext) IsEnumNameContext() {}

func NewEnumNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumNameContext {
	var p = new(EnumNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumName

	return p
}

func (s *EnumNameContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumNameContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *EnumNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumName() (localctx IEnumNameContext) {
	localctx = NewEnumNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, MojoParserRULE_enumName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1108)
		p.TypeName()
	}

	return localctx
}

// IEnumMembersContext is an interface to support dynamic dispatch.
type IEnumMembersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumMembersContext differentiates from other interfaces.
	IsEnumMembersContext()
}

type EnumMembersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumMembersContext() *EnumMembersContext {
	var p = new(EnumMembersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumMembers
	return p
}

func (*EnumMembersContext) IsEnumMembersContext() {}

func NewEnumMembersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumMembersContext {
	var p = new(EnumMembersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumMembers

	return p
}

func (s *EnumMembersContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumMembersContext) AllEnumMember() []IEnumMemberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumMemberContext)(nil)).Elem())
	var tst = make([]IEnumMemberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumMemberContext)
		}
	}

	return tst
}

func (s *EnumMembersContext) EnumMember(i int) IEnumMemberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumMemberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumMemberContext)
}

func (s *EnumMembersContext) AllEovWithDocument() []IEovWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem())
	var tst = make([]IEovWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovWithDocumentContext)
		}
	}

	return tst
}

func (s *EnumMembersContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *EnumMembersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EnumMembersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EnumMembersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumMembersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumMembersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumMembers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumMembers() (localctx IEnumMembersContext) {
	localctx = NewEnumMembersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, MojoParserRULE_enumMembers)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1110)
		p.EnumMember()
	}
	p.SetState(1122)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1111)
				p.EovWithDocument()
			}
			p.SetState(1115)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1112)
						p.Match(MojoParserEOL)
					}

				}
				p.SetState(1117)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext())
			}
			{
				p.SetState(1118)
				p.EnumMember()
			}

		}
		p.SetState(1124)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext())
	}
	p.SetState(1126)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1125)
			p.EovWithDocument()
		}

	}

	return localctx
}

// IEnumMemberContext is an interface to support dynamic dispatch.
type IEnumMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumMemberContext differentiates from other interfaces.
	IsEnumMemberContext()
}

type EnumMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumMemberContext() *EnumMemberContext {
	var p = new(EnumMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumMember
	return p
}

func (*EnumMemberContext) IsEnumMemberContext() {}

func NewEnumMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumMemberContext {
	var p = new(EnumMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumMember

	return p
}

func (s *EnumMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumMemberContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *EnumMemberContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *EnumMemberContext) AllAttributes() []IAttributesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttributesContext)(nil)).Elem())
	var tst = make([]IAttributesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttributesContext)
		}
	}

	return tst
}

func (s *EnumMemberContext) Attributes(i int) IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *EnumMemberContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EnumMemberContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EnumMemberContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *EnumMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumMember() (localctx IEnumMemberContext) {
	localctx = NewEnumMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, MojoParserRULE_enumMember)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1129)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLineDocument {
		{
			p.SetState(1128)
			p.Document()
		}

	}
	p.SetState(1138)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) == 1 {
		p.SetState(1134)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1131)
				p.Match(MojoParserEOL)
			}

			p.SetState(1136)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1137)
			p.Attributes()
		}

	}
	p.SetState(1143)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1140)
			p.Match(MojoParserEOL)
		}

		p.SetState(1145)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1146)
		p.DeclarationIdentifier()
	}
	p.SetState(1148)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(1147)
			p.Attributes()
		}

	}
	p.SetState(1157)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) == 1 {
		p.SetState(1153)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1150)
				p.Match(MojoParserEOL)
			}

			p.SetState(1155)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1156)
			p.Initializer()
		}

	}

	return localctx
}

// IStructDeclarationContext is an interface to support dynamic dispatch.
type IStructDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructDeclarationContext differentiates from other interfaces.
	IsStructDeclarationContext()
}

type StructDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructDeclarationContext() *StructDeclarationContext {
	var p = new(StructDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structDeclaration
	return p
}

func (*StructDeclarationContext) IsStructDeclarationContext() {}

func NewStructDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructDeclarationContext {
	var p = new(StructDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structDeclaration

	return p
}

func (s *StructDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StructDeclarationContext) KEYWORD_TYPE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TYPE, 0)
}

func (s *StructDeclarationContext) StructName() IStructNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructNameContext)
}

func (s *StructDeclarationContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *StructDeclarationContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *StructDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StructDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StructDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *StructDeclarationContext) TypeInheritanceClause() ITypeInheritanceClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeInheritanceClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeInheritanceClauseContext)
}

func (s *StructDeclarationContext) StructBody() IStructBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructBodyContext)
}

func (s *StructDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructDeclaration() (localctx IStructDeclarationContext) {
	localctx = NewStructDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, MojoParserRULE_structDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1160)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLineDocument {
		{
			p.SetState(1159)
			p.Document()
		}

	}
	p.SetState(1169)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext()) == 1 {
		p.SetState(1165)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1162)
				p.Match(MojoParserEOL)
			}

			p.SetState(1167)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1168)
			p.Attributes()
		}

	}
	p.SetState(1174)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1171)
			p.Match(MojoParserEOL)
		}

		p.SetState(1176)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1177)
		p.Match(MojoParserKEYWORD_TYPE)
	}
	{
		p.SetState(1178)
		p.StructName()
	}
	p.SetState(1180)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1179)
			p.GenericParameterClause()
		}

	}
	p.SetState(1189)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 144, p.GetParserRuleContext()) == 1 {
		p.SetState(1185)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1182)
				p.Match(MojoParserEOL)
			}

			p.SetState(1187)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1188)
			p.TypeInheritanceClause()
		}

	}
	p.SetState(1198)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext()) == 1 {
		p.SetState(1194)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1191)
				p.Match(MojoParserEOL)
			}

			p.SetState(1196)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1197)
			p.StructBody()
		}

	}

	return localctx
}

// IStructNameContext is an interface to support dynamic dispatch.
type IStructNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructNameContext differentiates from other interfaces.
	IsStructNameContext()
}

type StructNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructNameContext() *StructNameContext {
	var p = new(StructNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structName
	return p
}

func (*StructNameContext) IsStructNameContext() {}

func NewStructNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructNameContext {
	var p = new(StructNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structName

	return p
}

func (s *StructNameContext) GetParser() antlr.Parser { return s.parser }

func (s *StructNameContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *StructNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructName() (localctx IStructNameContext) {
	localctx = NewStructNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, MojoParserRULE_structName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1200)
		p.TypeName()
	}

	return localctx
}

// IStructBodyContext is an interface to support dynamic dispatch.
type IStructBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructBodyContext differentiates from other interfaces.
	IsStructBodyContext()
}

type StructBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructBodyContext() *StructBodyContext {
	var p = new(StructBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structBody
	return p
}

func (*StructBodyContext) IsStructBodyContext() {}

func NewStructBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructBodyContext {
	var p = new(StructBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structBody

	return p
}

func (s *StructBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *StructBodyContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *StructBodyContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *StructBodyContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *StructBodyContext) StructMembers() IStructMembersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructMembersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructMembersContext)
}

func (s *StructBodyContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StructBodyContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StructBodyContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *StructBodyContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *StructBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructBody() (localctx IStructBodyContext) {
	localctx = NewStructBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, MojoParserRULE_structBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1202)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(1210)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext()) == 1 {
		p.SetState(1206)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserCOMMA || _la == MojoParserEOL {
			{
				p.SetState(1203)
				p.Eov()
			}

			p.SetState(1208)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1209)
			p.FollowingDocument()
		}

	}
	p.SetState(1219)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext()) == 1 {
		p.SetState(1215)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 149, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1212)
					p.Match(MojoParserEOL)
				}

			}
			p.SetState(1217)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 149, p.GetParserRuleContext())
		}
		{
			p.SetState(1218)
			p.StructMembers()
		}

	}
	p.SetState(1224)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1221)
			p.Match(MojoParserEOL)
		}

		p.SetState(1226)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1227)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IStructMembersContext is an interface to support dynamic dispatch.
type IStructMembersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructMembersContext differentiates from other interfaces.
	IsStructMembersContext()
}

type StructMembersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructMembersContext() *StructMembersContext {
	var p = new(StructMembersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structMembers
	return p
}

func (*StructMembersContext) IsStructMembersContext() {}

func NewStructMembersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructMembersContext {
	var p = new(StructMembersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structMembers

	return p
}

func (s *StructMembersContext) GetParser() antlr.Parser { return s.parser }

func (s *StructMembersContext) AllStructMember() []IStructMemberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStructMemberContext)(nil)).Elem())
	var tst = make([]IStructMemberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStructMemberContext)
		}
	}

	return tst
}

func (s *StructMembersContext) StructMember(i int) IStructMemberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructMemberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStructMemberContext)
}

func (s *StructMembersContext) AllEosWithDocument() []IEosWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosWithDocumentContext)(nil)).Elem())
	var tst = make([]IEosWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosWithDocumentContext)
		}
	}

	return tst
}

func (s *StructMembersContext) EosWithDocument(i int) IEosWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosWithDocumentContext)
}

func (s *StructMembersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StructMembersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StructMembersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructMembersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructMembersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructMembers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructMembers() (localctx IStructMembersContext) {
	localctx = NewStructMembersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, MojoParserRULE_structMembers)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1229)
		p.StructMember()
	}
	p.SetState(1241)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1230)
				p.EosWithDocument()
			}
			p.SetState(1234)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1231)
						p.Match(MojoParserEOL)
					}

				}
				p.SetState(1236)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext())
			}
			{
				p.SetState(1237)
				p.StructMember()
			}

		}
		p.SetState(1243)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext())
	}
	p.SetState(1245)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 154, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1244)
			p.EosWithDocument()
		}

	}

	return localctx
}

// IStructMemberContext is an interface to support dynamic dispatch.
type IStructMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructMemberContext differentiates from other interfaces.
	IsStructMemberContext()
}

type StructMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructMemberContext() *StructMemberContext {
	var p = new(StructMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structMember
	return p
}

func (*StructMemberContext) IsStructMemberContext() {}

func NewStructMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructMemberContext {
	var p = new(StructMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structMember

	return p
}

func (s *StructMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *StructMemberContext) StructMemberDeclaration() IStructMemberDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructMemberDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructMemberDeclarationContext)
}

func (s *StructMemberContext) StructDeclaration() IStructDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructDeclarationContext)
}

func (s *StructMemberContext) EnumDeclaration() IEnumDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumDeclarationContext)
}

func (s *StructMemberContext) ConstantDeclaration() IConstantDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantDeclarationContext)
}

func (s *StructMemberContext) TypeAliasDeclaration() ITypeAliasDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAliasDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAliasDeclarationContext)
}

func (s *StructMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructMember() (localctx IStructMemberContext) {
	localctx = NewStructMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, MojoParserRULE_structMember)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1252)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 155, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1247)
			p.StructMemberDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1248)
			p.StructDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1249)
			p.EnumDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1250)
			p.ConstantDeclaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1251)
			p.TypeAliasDeclaration()
		}

	}

	return localctx
}

// IStructMemberDeclarationContext is an interface to support dynamic dispatch.
type IStructMemberDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructMemberDeclarationContext differentiates from other interfaces.
	IsStructMemberDeclarationContext()
}

type StructMemberDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructMemberDeclarationContext() *StructMemberDeclarationContext {
	var p = new(StructMemberDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structMemberDeclaration
	return p
}

func (*StructMemberDeclarationContext) IsStructMemberDeclarationContext() {}

func NewStructMemberDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructMemberDeclarationContext {
	var p = new(StructMemberDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structMemberDeclaration

	return p
}

func (s *StructMemberDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StructMemberDeclarationContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *StructMemberDeclarationContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *StructMemberDeclarationContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *StructMemberDeclarationContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *StructMemberDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StructMemberDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StructMemberDeclarationContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *StructMemberDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructMemberDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructMemberDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructMemberDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructMemberDeclaration() (localctx IStructMemberDeclarationContext) {
	localctx = NewStructMemberDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, MojoParserRULE_structMemberDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1255)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLineDocument {
		{
			p.SetState(1254)
			p.Document()
		}

	}
	p.SetState(1264)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) == 1 {
		p.SetState(1260)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1257)
				p.Match(MojoParserEOL)
			}

			p.SetState(1262)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1263)
			p.Attributes()
		}

	}
	p.SetState(1269)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1266)
			p.Match(MojoParserEOL)
		}

		p.SetState(1271)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1272)
		p.DeclarationIdentifier()
	}
	{
		p.SetState(1273)
		p.TypeAnnotation()
	}
	p.SetState(1281)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext()) == 1 {
		p.SetState(1277)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1274)
				p.Match(MojoParserEOL)
			}

			p.SetState(1279)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1280)
			p.Initializer()
		}

	}

	return localctx
}

// IInterfaceDeclarationContext is an interface to support dynamic dispatch.
type IInterfaceDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceDeclarationContext differentiates from other interfaces.
	IsInterfaceDeclarationContext()
}

type InterfaceDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceDeclarationContext() *InterfaceDeclarationContext {
	var p = new(InterfaceDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceDeclaration
	return p
}

func (*InterfaceDeclarationContext) IsInterfaceDeclarationContext() {}

func NewInterfaceDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceDeclarationContext {
	var p = new(InterfaceDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceDeclaration

	return p
}

func (s *InterfaceDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceDeclarationContext) KEYWORD_INTERFACE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_INTERFACE, 0)
}

func (s *InterfaceDeclarationContext) InterfaceName() IInterfaceNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceNameContext)
}

func (s *InterfaceDeclarationContext) InterfaceBody() IInterfaceBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceBodyContext)
}

func (s *InterfaceDeclarationContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *InterfaceDeclarationContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *InterfaceDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InterfaceDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InterfaceDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *InterfaceDeclarationContext) TypeInheritanceClause() ITypeInheritanceClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeInheritanceClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeInheritanceClauseContext)
}

func (s *InterfaceDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceDeclaration() (localctx IInterfaceDeclarationContext) {
	localctx = NewInterfaceDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, MojoParserRULE_interfaceDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1284)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLineDocument {
		{
			p.SetState(1283)
			p.Document()
		}

	}
	p.SetState(1293)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 164, p.GetParserRuleContext()) == 1 {
		p.SetState(1289)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1286)
				p.Match(MojoParserEOL)
			}

			p.SetState(1291)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1292)
			p.Attributes()
		}

	}
	p.SetState(1298)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1295)
			p.Match(MojoParserEOL)
		}

		p.SetState(1300)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1301)
		p.Match(MojoParserKEYWORD_INTERFACE)
	}
	{
		p.SetState(1302)
		p.InterfaceName()
	}
	p.SetState(1304)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1303)
			p.GenericParameterClause()
		}

	}
	p.SetState(1313)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext()) == 1 {
		p.SetState(1309)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1306)
				p.Match(MojoParserEOL)
			}

			p.SetState(1311)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1312)
			p.TypeInheritanceClause()
		}

	}
	p.SetState(1318)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1315)
			p.Match(MojoParserEOL)
		}

		p.SetState(1320)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1321)
		p.InterfaceBody()
	}

	return localctx
}

// IInterfaceNameContext is an interface to support dynamic dispatch.
type IInterfaceNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceNameContext differentiates from other interfaces.
	IsInterfaceNameContext()
}

type InterfaceNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceNameContext() *InterfaceNameContext {
	var p = new(InterfaceNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceName
	return p
}

func (*InterfaceNameContext) IsInterfaceNameContext() {}

func NewInterfaceNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceNameContext {
	var p = new(InterfaceNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceName

	return p
}

func (s *InterfaceNameContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceNameContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *InterfaceNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceName() (localctx IInterfaceNameContext) {
	localctx = NewInterfaceNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, MojoParserRULE_interfaceName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1323)
		p.TypeName()
	}

	return localctx
}

// IInterfaceBodyContext is an interface to support dynamic dispatch.
type IInterfaceBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceBodyContext differentiates from other interfaces.
	IsInterfaceBodyContext()
}

type InterfaceBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceBodyContext() *InterfaceBodyContext {
	var p = new(InterfaceBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceBody
	return p
}

func (*InterfaceBodyContext) IsInterfaceBodyContext() {}

func NewInterfaceBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceBodyContext {
	var p = new(InterfaceBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceBody

	return p
}

func (s *InterfaceBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceBodyContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *InterfaceBodyContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *InterfaceBodyContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *InterfaceBodyContext) InterfaceMembers() IInterfaceMembersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceMembersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceMembersContext)
}

func (s *InterfaceBodyContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InterfaceBodyContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InterfaceBodyContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *InterfaceBodyContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *InterfaceBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceBody() (localctx IInterfaceBodyContext) {
	localctx = NewInterfaceBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, MojoParserRULE_interfaceBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1325)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(1333)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext()) == 1 {
		p.SetState(1329)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserCOMMA || _la == MojoParserEOL {
			{
				p.SetState(1326)
				p.Eov()
			}

			p.SetState(1331)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1332)
			p.FollowingDocument()
		}

	}
	p.SetState(1342)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext()) == 1 {
		p.SetState(1338)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 172, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1335)
					p.Match(MojoParserEOL)
				}

			}
			p.SetState(1340)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 172, p.GetParserRuleContext())
		}
		{
			p.SetState(1341)
			p.InterfaceMembers()
		}

	}
	p.SetState(1347)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1344)
			p.Match(MojoParserEOL)
		}

		p.SetState(1349)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1350)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IInterfaceMembersContext is an interface to support dynamic dispatch.
type IInterfaceMembersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceMembersContext differentiates from other interfaces.
	IsInterfaceMembersContext()
}

type InterfaceMembersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceMembersContext() *InterfaceMembersContext {
	var p = new(InterfaceMembersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceMembers
	return p
}

func (*InterfaceMembersContext) IsInterfaceMembersContext() {}

func NewInterfaceMembersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceMembersContext {
	var p = new(InterfaceMembersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceMembers

	return p
}

func (s *InterfaceMembersContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceMembersContext) AllInterfaceMember() []IInterfaceMemberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInterfaceMemberContext)(nil)).Elem())
	var tst = make([]IInterfaceMemberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInterfaceMemberContext)
		}
	}

	return tst
}

func (s *InterfaceMembersContext) InterfaceMember(i int) IInterfaceMemberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceMemberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInterfaceMemberContext)
}

func (s *InterfaceMembersContext) AllEosWithDocument() []IEosWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosWithDocumentContext)(nil)).Elem())
	var tst = make([]IEosWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosWithDocumentContext)
		}
	}

	return tst
}

func (s *InterfaceMembersContext) EosWithDocument(i int) IEosWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosWithDocumentContext)
}

func (s *InterfaceMembersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InterfaceMembersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InterfaceMembersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceMembersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceMembersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceMembers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceMembers() (localctx IInterfaceMembersContext) {
	localctx = NewInterfaceMembersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, MojoParserRULE_interfaceMembers)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1352)
		p.InterfaceMember()
	}
	p.SetState(1364)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1353)
				p.EosWithDocument()
			}
			p.SetState(1357)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1354)
						p.Match(MojoParserEOL)
					}

				}
				p.SetState(1359)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext())
			}
			{
				p.SetState(1360)
				p.InterfaceMember()
			}

		}
		p.SetState(1366)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext())
	}
	p.SetState(1368)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1367)
			p.EosWithDocument()
		}

	}

	return localctx
}

// IInterfaceMemberContext is an interface to support dynamic dispatch.
type IInterfaceMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceMemberContext differentiates from other interfaces.
	IsInterfaceMemberContext()
}

type InterfaceMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceMemberContext() *InterfaceMemberContext {
	var p = new(InterfaceMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceMember
	return p
}

func (*InterfaceMemberContext) IsInterfaceMemberContext() {}

func NewInterfaceMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceMemberContext {
	var p = new(InterfaceMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceMember

	return p
}

func (s *InterfaceMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceMemberContext) InterfaceMethodDeclaration() IInterfaceMethodDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceMethodDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceMethodDeclarationContext)
}

func (s *InterfaceMemberContext) TypeAliasDeclaration() ITypeAliasDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAliasDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAliasDeclarationContext)
}

func (s *InterfaceMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceMember() (localctx IInterfaceMemberContext) {
	localctx = NewInterfaceMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, MojoParserRULE_interfaceMember)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1372)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1370)
			p.InterfaceMethodDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1371)
			p.TypeAliasDeclaration()
		}

	}

	return localctx
}

// IInterfaceMethodDeclarationContext is an interface to support dynamic dispatch.
type IInterfaceMethodDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceMethodDeclarationContext differentiates from other interfaces.
	IsInterfaceMethodDeclarationContext()
}

type InterfaceMethodDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceMethodDeclarationContext() *InterfaceMethodDeclarationContext {
	var p = new(InterfaceMethodDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceMethodDeclaration
	return p
}

func (*InterfaceMethodDeclarationContext) IsInterfaceMethodDeclarationContext() {}

func NewInterfaceMethodDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceMethodDeclarationContext {
	var p = new(InterfaceMethodDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceMethodDeclaration

	return p
}

func (s *InterfaceMethodDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceMethodDeclarationContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *InterfaceMethodDeclarationContext) FunctionSignature() IFunctionSignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionSignatureContext)
}

func (s *InterfaceMethodDeclarationContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *InterfaceMethodDeclarationContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *InterfaceMethodDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InterfaceMethodDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InterfaceMethodDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *InterfaceMethodDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceMethodDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceMethodDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceMethodDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceMethodDeclaration() (localctx IInterfaceMethodDeclarationContext) {
	localctx = NewInterfaceMethodDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, MojoParserRULE_interfaceMethodDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1375)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLineDocument {
		{
			p.SetState(1374)
			p.Document()
		}

	}
	p.SetState(1384)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 181, p.GetParserRuleContext()) == 1 {
		p.SetState(1380)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1377)
				p.Match(MojoParserEOL)
			}

			p.SetState(1382)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1383)
			p.Attributes()
		}

	}
	p.SetState(1389)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1386)
			p.Match(MojoParserEOL)
		}

		p.SetState(1391)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1392)
		p.FunctionName()
	}
	p.SetState(1394)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1393)
			p.GenericParameterClause()
		}

	}
	p.SetState(1399)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1396)
			p.Match(MojoParserEOL)
		}

		p.SetState(1401)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1402)
		p.FunctionSignature()
	}

	return localctx
}

// IPatternContext is an interface to support dynamic dispatch.
type IPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPatternContext differentiates from other interfaces.
	IsPatternContext()
}

type PatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternContext() *PatternContext {
	var p = new(PatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_pattern
	return p
}

func (*PatternContext) IsPatternContext() {}

func NewPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternContext {
	var p = new(PatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_pattern

	return p
}

func (s *PatternContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternContext) Wildcard_pattern() IWildcard_patternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWildcard_patternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWildcard_patternContext)
}

func (s *PatternContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *PatternContext) IdentifierPattern() IIdentifierPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierPatternContext)
}

func (s *PatternContext) Tuple_pattern() ITuple_patternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITuple_patternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITuple_patternContext)
}

func (s *PatternContext) Optional_pattern() IOptional_patternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptional_patternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptional_patternContext)
}

func (s *PatternContext) KEYWORD_IS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IS, 0)
}

func (s *PatternContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *PatternContext) Expression_pattern() IExpression_patternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_patternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_patternContext)
}

func (s *PatternContext) Pattern() IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *PatternContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *PatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Pattern() (localctx IPatternContext) {
	return p.pattern(0)
}

func (p *MojoParser) pattern(_p int) (localctx IPatternContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPatternContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPatternContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 148
	p.EnterRecursionRule(localctx, 148, MojoParserRULE_pattern, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1421)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 188, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1405)
			p.Wildcard_pattern()
		}
		p.SetState(1407)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 185, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1406)
				p.TypeAnnotation()
			}

		}

	case 2:
		{
			p.SetState(1409)
			p.IdentifierPattern()
		}
		p.SetState(1411)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1410)
				p.TypeAnnotation()
			}

		}

	case 3:
		{
			p.SetState(1413)
			p.Tuple_pattern()
		}
		p.SetState(1415)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 187, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1414)
				p.TypeAnnotation()
			}

		}

	case 4:
		{
			p.SetState(1417)
			p.Optional_pattern()
		}

	case 5:
		{
			p.SetState(1418)
			p.Match(MojoParserKEYWORD_IS)
		}
		{
			p.SetState(1419)
			p.type_(0)
		}

	case 6:
		{
			p.SetState(1420)
			p.Expression_pattern()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1428)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewPatternContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_pattern)
			p.SetState(1423)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1424)
				p.Match(MojoParserKEYWORD_AS)
			}
			{
				p.SetState(1425)
				p.type_(0)
			}

		}
		p.SetState(1430)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext())
	}

	return localctx
}

// IWildcard_patternContext is an interface to support dynamic dispatch.
type IWildcard_patternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWildcard_patternContext differentiates from other interfaces.
	IsWildcard_patternContext()
}

type Wildcard_patternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWildcard_patternContext() *Wildcard_patternContext {
	var p = new(Wildcard_patternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_wildcard_pattern
	return p
}

func (*Wildcard_patternContext) IsWildcard_patternContext() {}

func NewWildcard_patternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Wildcard_patternContext {
	var p = new(Wildcard_patternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_wildcard_pattern

	return p
}

func (s *Wildcard_patternContext) GetParser() antlr.Parser { return s.parser }

func (s *Wildcard_patternContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(MojoParserUNDERSCORE, 0)
}

func (s *Wildcard_patternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Wildcard_patternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Wildcard_patternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitWildcard_pattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Wildcard_pattern() (localctx IWildcard_patternContext) {
	localctx = NewWildcard_patternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, MojoParserRULE_wildcard_pattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1431)
		p.Match(MojoParserUNDERSCORE)
	}

	return localctx
}

// IIdentifierPatternContext is an interface to support dynamic dispatch.
type IIdentifierPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierPatternContext differentiates from other interfaces.
	IsIdentifierPatternContext()
}

type IdentifierPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierPatternContext() *IdentifierPatternContext {
	var p = new(IdentifierPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_identifierPattern
	return p
}

func (*IdentifierPatternContext) IsIdentifierPatternContext() {}

func NewIdentifierPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierPatternContext {
	var p = new(IdentifierPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_identifierPattern

	return p
}

func (s *IdentifierPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierPatternContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *IdentifierPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIdentifierPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) IdentifierPattern() (localctx IIdentifierPatternContext) {
	localctx = NewIdentifierPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, MojoParserRULE_identifierPattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1433)
		p.DeclarationIdentifier()
	}

	return localctx
}

// ITuple_patternContext is an interface to support dynamic dispatch.
type ITuple_patternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTuple_patternContext differentiates from other interfaces.
	IsTuple_patternContext()
}

type Tuple_patternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTuple_patternContext() *Tuple_patternContext {
	var p = new(Tuple_patternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tuple_pattern
	return p
}

func (*Tuple_patternContext) IsTuple_patternContext() {}

func NewTuple_patternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tuple_patternContext {
	var p = new(Tuple_patternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tuple_pattern

	return p
}

func (s *Tuple_patternContext) GetParser() antlr.Parser { return s.parser }

func (s *Tuple_patternContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *Tuple_patternContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *Tuple_patternContext) Tuple_pattern_element_list() ITuple_pattern_element_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITuple_pattern_element_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITuple_pattern_element_listContext)
}

func (s *Tuple_patternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tuple_patternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tuple_patternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTuple_pattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Tuple_pattern() (localctx ITuple_patternContext) {
	localctx = NewTuple_patternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, MojoParserRULE_tuple_pattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1435)
		p.Match(MojoParserLPAREN)
	}
	p.SetState(1437)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MojoParserKEYWORD_AND)|(1<<MojoParserKEYWORD_AS)|(1<<MojoParserKEYWORD_ATTRIBUTE)|(1<<MojoParserKEYWORD_BREAK)|(1<<MojoParserKEYWORD_CONST)|(1<<MojoParserKEYWORD_CONTINUE)|(1<<MojoParserKEYWORD_ELSE)|(1<<MojoParserKEYWORD_ENUM)|(1<<MojoParserKEYWORD_FALSE)|(1<<MojoParserKEYWORD_FOR)|(1<<MojoParserKEYWORD_FUNC)|(1<<MojoParserKEYWORD_IF)|(1<<MojoParserKEYWORD_IMPORT)|(1<<MojoParserKEYWORD_IN)|(1<<MojoParserKEYWORD_INTERFACE)|(1<<MojoParserKEYWORD_IS)|(1<<MojoParserKEYWORD_MATCH)|(1<<MojoParserKEYWORD_NOT)|(1<<MojoParserKEYWORD_NULL)|(1<<MojoParserKEYWORD_OR)|(1<<MojoParserKEYWORD_PACKAGE)|(1<<MojoParserKEYWORD_REPEATE)|(1<<MojoParserKEYWORD_RETURN)|(1<<MojoParserKEYWORD_STRUCT)|(1<<MojoParserKEYWORD_TRUE)|(1<<MojoParserKEYWORD_TYPE)|(1<<MojoParserKEYWORD_VAR)|(1<<MojoParserKEYWORD_WHILE)|(1<<MojoParserKEYWORD_XOR)|(1<<MojoParserDOT)|(1<<MojoParserLCURLY))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MojoParserLPAREN-32))|(1<<(MojoParserLBRACK-32))|(1<<(MojoParserLT-32))|(1<<(MojoParserGT-32))|(1<<(MojoParserUNDERSCORE-32))|(1<<(MojoParserBANG-32))|(1<<(MojoParserQUESTION-32))|(1<<(MojoParserAND-32))|(1<<(MojoParserSUB-32))|(1<<(MojoParserEQUAL-32))|(1<<(MojoParserOR-32))|(1<<(MojoParserDIV-32))|(1<<(MojoParserADD-32))|(1<<(MojoParserMUL-32))|(1<<(MojoParserMOD-32))|(1<<(MojoParserCARET-32))|(1<<(MojoParserTILDE-32)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(MojoParserIdentifier-65))|(1<<(MojoParserOperator_head_other-65))|(1<<(MojoParserBoolLiteral-65))|(1<<(MojoParserNullLiteral-65))|(1<<(MojoParserBinaryLiteral-65))|(1<<(MojoParserOctalLiteral-65))|(1<<(MojoParserDecimalLiteral-65))|(1<<(MojoParserPureDecimalDigits-65))|(1<<(MojoParserHexadecimalLiteral-65))|(1<<(MojoParserFloatLiteral-65))|(1<<(MojoParserStaticStringLiteral-65))|(1<<(MojoParserInterpolatedStringLiteral-65)))) != 0) {
		{
			p.SetState(1436)
			p.Tuple_pattern_element_list()
		}

	}
	{
		p.SetState(1439)
		p.Match(MojoParserRPAREN)
	}

	return localctx
}

// ITuple_pattern_element_listContext is an interface to support dynamic dispatch.
type ITuple_pattern_element_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTuple_pattern_element_listContext differentiates from other interfaces.
	IsTuple_pattern_element_listContext()
}

type Tuple_pattern_element_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTuple_pattern_element_listContext() *Tuple_pattern_element_listContext {
	var p = new(Tuple_pattern_element_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tuple_pattern_element_list
	return p
}

func (*Tuple_pattern_element_listContext) IsTuple_pattern_element_listContext() {}

func NewTuple_pattern_element_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tuple_pattern_element_listContext {
	var p = new(Tuple_pattern_element_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tuple_pattern_element_list

	return p
}

func (s *Tuple_pattern_element_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Tuple_pattern_element_listContext) AllTuple_pattern_element() []ITuple_pattern_elementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITuple_pattern_elementContext)(nil)).Elem())
	var tst = make([]ITuple_pattern_elementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITuple_pattern_elementContext)
		}
	}

	return tst
}

func (s *Tuple_pattern_element_listContext) Tuple_pattern_element(i int) ITuple_pattern_elementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITuple_pattern_elementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITuple_pattern_elementContext)
}

func (s *Tuple_pattern_element_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MojoParserCOMMA)
}

func (s *Tuple_pattern_element_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, i)
}

func (s *Tuple_pattern_element_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tuple_pattern_element_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tuple_pattern_element_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTuple_pattern_element_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Tuple_pattern_element_list() (localctx ITuple_pattern_element_listContext) {
	localctx = NewTuple_pattern_element_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, MojoParserRULE_tuple_pattern_element_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1441)
		p.Tuple_pattern_element()
	}
	p.SetState(1446)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserCOMMA {
		{
			p.SetState(1442)
			p.Match(MojoParserCOMMA)
		}
		{
			p.SetState(1443)
			p.Tuple_pattern_element()
		}

		p.SetState(1448)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITuple_pattern_elementContext is an interface to support dynamic dispatch.
type ITuple_pattern_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTuple_pattern_elementContext differentiates from other interfaces.
	IsTuple_pattern_elementContext()
}

type Tuple_pattern_elementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTuple_pattern_elementContext() *Tuple_pattern_elementContext {
	var p = new(Tuple_pattern_elementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tuple_pattern_element
	return p
}

func (*Tuple_pattern_elementContext) IsTuple_pattern_elementContext() {}

func NewTuple_pattern_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tuple_pattern_elementContext {
	var p = new(Tuple_pattern_elementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tuple_pattern_element

	return p
}

func (s *Tuple_pattern_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Tuple_pattern_elementContext) Pattern() IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *Tuple_pattern_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tuple_pattern_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tuple_pattern_elementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTuple_pattern_element(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Tuple_pattern_element() (localctx ITuple_pattern_elementContext) {
	localctx = NewTuple_pattern_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, MojoParserRULE_tuple_pattern_element)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1449)
		p.pattern(0)
	}

	return localctx
}

// IOptional_patternContext is an interface to support dynamic dispatch.
type IOptional_patternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptional_patternContext differentiates from other interfaces.
	IsOptional_patternContext()
}

type Optional_patternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptional_patternContext() *Optional_patternContext {
	var p = new(Optional_patternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_optional_pattern
	return p
}

func (*Optional_patternContext) IsOptional_patternContext() {}

func NewOptional_patternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Optional_patternContext {
	var p = new(Optional_patternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_optional_pattern

	return p
}

func (s *Optional_patternContext) GetParser() antlr.Parser { return s.parser }

func (s *Optional_patternContext) IdentifierPattern() IIdentifierPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierPatternContext)
}

func (s *Optional_patternContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(MojoParserQUESTION, 0)
}

func (s *Optional_patternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Optional_patternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Optional_patternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOptional_pattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Optional_pattern() (localctx IOptional_patternContext) {
	localctx = NewOptional_patternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, MojoParserRULE_optional_pattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1451)
		p.IdentifierPattern()
	}
	{
		p.SetState(1452)
		p.Match(MojoParserQUESTION)
	}

	return localctx
}

// IExpression_patternContext is an interface to support dynamic dispatch.
type IExpression_patternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_patternContext differentiates from other interfaces.
	IsExpression_patternContext()
}

type Expression_patternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_patternContext() *Expression_patternContext {
	var p = new(Expression_patternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_expression_pattern
	return p
}

func (*Expression_patternContext) IsExpression_patternContext() {}

func NewExpression_patternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_patternContext {
	var p = new(Expression_patternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_expression_pattern

	return p
}

func (s *Expression_patternContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_patternContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_patternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_patternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_patternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExpression_pattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Expression_pattern() (localctx IExpression_patternContext) {
	localctx = NewExpression_patternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, MojoParserRULE_expression_pattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1454)
		p.Expression()
	}

	return localctx
}

// IAttributeContext is an interface to support dynamic dispatch.
type IAttributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeContext differentiates from other interfaces.
	IsAttributeContext()
}

type AttributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeContext() *AttributeContext {
	var p = new(AttributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attribute
	return p
}

func (*AttributeContext) IsAttributeContext() {}

func NewAttributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeContext {
	var p = new(AttributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attribute

	return p
}

func (s *AttributeContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeContext) AT() antlr.TerminalNode {
	return s.GetToken(MojoParserAT, 0)
}

func (s *AttributeContext) AttributeName() IAttributeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeNameContext)
}

func (s *AttributeContext) AttributeArgumentClause() IAttributeArgumentClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeArgumentClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeArgumentClauseContext)
}

func (s *AttributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Attribute() (localctx IAttributeContext) {
	localctx = NewAttributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, MojoParserRULE_attribute)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1456)
		p.Match(MojoParserAT)
	}
	{
		p.SetState(1457)
		p.AttributeName()
	}
	p.SetState(1459)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 192, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1458)
			p.AttributeArgumentClause()
		}

	}

	return localctx
}

// IAttributeNameContext is an interface to support dynamic dispatch.
type IAttributeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeNameContext differentiates from other interfaces.
	IsAttributeNameContext()
}

type AttributeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeNameContext() *AttributeNameContext {
	var p = new(AttributeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeName
	return p
}

func (*AttributeNameContext) IsAttributeNameContext() {}

func NewAttributeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeNameContext {
	var p = new(AttributeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeName

	return p
}

func (s *AttributeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeNameContext) AttributeNameIdentifier() IAttributeNameIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeNameIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeNameIdentifierContext)
}

func (s *AttributeNameContext) DecimalLiteral() antlr.TerminalNode {
	return s.GetToken(MojoParserDecimalLiteral, 0)
}

func (s *AttributeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeName() (localctx IAttributeNameContext) {
	localctx = NewAttributeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, MojoParserRULE_attributeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1463)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1461)
			p.AttributeNameIdentifier()
		}

	case MojoParserDecimalLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1462)
			p.Match(MojoParserDecimalLiteral)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAttributeNameIdentifierContext is an interface to support dynamic dispatch.
type IAttributeNameIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeNameIdentifierContext differentiates from other interfaces.
	IsAttributeNameIdentifierContext()
}

type AttributeNameIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeNameIdentifierContext() *AttributeNameIdentifierContext {
	var p = new(AttributeNameIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeNameIdentifier
	return p
}

func (*AttributeNameIdentifierContext) IsAttributeNameIdentifierContext() {}

func NewAttributeNameIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeNameIdentifierContext {
	var p = new(AttributeNameIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeNameIdentifier

	return p
}

func (s *AttributeNameIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeNameIdentifierContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(MojoParserIdentifier)
}

func (s *AttributeNameIdentifierContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserIdentifier, i)
}

func (s *AttributeNameIdentifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserDOT)
}

func (s *AttributeNameIdentifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, i)
}

func (s *AttributeNameIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeNameIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeNameIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeNameIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeNameIdentifier() (localctx IAttributeNameIdentifierContext) {
	localctx = NewAttributeNameIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, MojoParserRULE_attributeNameIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1465)
		p.Match(MojoParserIdentifier)
	}
	p.SetState(1470)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1466)
				p.Match(MojoParserDOT)
			}
			{
				p.SetState(1467)
				p.Match(MojoParserIdentifier)
			}

		}
		p.SetState(1472)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext())
	}

	return localctx
}

// IAttributeArgumentClauseContext is an interface to support dynamic dispatch.
type IAttributeArgumentClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeArgumentClauseContext differentiates from other interfaces.
	IsAttributeArgumentClauseContext()
}

type AttributeArgumentClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeArgumentClauseContext() *AttributeArgumentClauseContext {
	var p = new(AttributeArgumentClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeArgumentClause
	return p
}

func (*AttributeArgumentClauseContext) IsAttributeArgumentClauseContext() {}

func NewAttributeArgumentClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeArgumentClauseContext {
	var p = new(AttributeArgumentClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeArgumentClause

	return p
}

func (s *AttributeArgumentClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeArgumentClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *AttributeArgumentClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *AttributeArgumentClauseContext) Expressions() IExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsContext)
}

func (s *AttributeArgumentClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *AttributeArgumentClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *AttributeArgumentClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeArgumentClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeArgumentClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeArgumentClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeArgumentClause() (localctx IAttributeArgumentClauseContext) {
	localctx = NewAttributeArgumentClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, MojoParserRULE_attributeArgumentClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1473)
		p.Match(MojoParserLPAREN)
	}
	p.SetState(1481)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext()) == 1 {
		p.SetState(1477)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1474)
				p.Match(MojoParserEOL)
			}

			p.SetState(1479)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1480)
			p.Expressions()
		}

	}
	p.SetState(1486)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1483)
			p.Match(MojoParserEOL)
		}

		p.SetState(1488)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1489)
		p.Match(MojoParserRPAREN)
	}

	return localctx
}

// IAttributesContext is an interface to support dynamic dispatch.
type IAttributesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributesContext differentiates from other interfaces.
	IsAttributesContext()
}

type AttributesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributesContext() *AttributesContext {
	var p = new(AttributesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributes
	return p
}

func (*AttributesContext) IsAttributesContext() {}

func NewAttributesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributesContext {
	var p = new(AttributesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributes

	return p
}

func (s *AttributesContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributesContext) AllAttribute() []IAttributeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttributeContext)(nil)).Elem())
	var tst = make([]IAttributeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttributeContext)
		}
	}

	return tst
}

func (s *AttributesContext) Attribute(i int) IAttributeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttributeContext)
}

func (s *AttributesContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *AttributesContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *AttributesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Attributes() (localctx IAttributesContext) {
	localctx = NewAttributesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, MojoParserRULE_attributes)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1491)
		p.Attribute()
	}
	p.SetState(1501)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 199, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1495)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1492)
					p.Match(MojoParserEOL)
				}

				p.SetState(1497)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1498)
				p.Attribute()
			}

		}
		p.SetState(1503)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 199, p.GetParserRuleContext())
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) PrefixExpression() IPrefixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixExpressionContext)
}

func (s *ExpressionContext) BinaryExpressions() IBinaryExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBinaryExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBinaryExpressionsContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Expression() (localctx IExpressionContext) {
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, MojoParserRULE_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1504)
		p.PrefixExpression()
	}
	p.SetState(1506)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 200, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1505)
			p.BinaryExpressions()
		}

	}

	return localctx
}

// IExpressionsContext is an interface to support dynamic dispatch.
type IExpressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionsContext differentiates from other interfaces.
	IsExpressionsContext()
}

type ExpressionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionsContext() *ExpressionsContext {
	var p = new(ExpressionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_expressions
	return p
}

func (*ExpressionsContext) IsExpressionsContext() {}

func NewExpressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionsContext {
	var p = new(ExpressionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_expressions

	return p
}

func (s *ExpressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionsContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionsContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionsContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *ExpressionsContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ExpressionsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ExpressionsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ExpressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExpressions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Expressions() (localctx IExpressionsContext) {
	localctx = NewExpressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, MojoParserRULE_expressions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1508)
		p.Expression()
	}
	p.SetState(1520)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1509)
				p.Eov()
			}
			p.SetState(1513)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1510)
					p.Match(MojoParserEOL)
				}

				p.SetState(1515)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1516)
				p.Expression()
			}

		}
		p.SetState(1522)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext())
	}
	p.SetState(1524)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 203, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1523)
			p.Eov()
		}

	}

	return localctx
}

// IPrefixExpressionContext is an interface to support dynamic dispatch.
type IPrefixExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixExpressionContext differentiates from other interfaces.
	IsPrefixExpressionContext()
}

type PrefixExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixExpressionContext() *PrefixExpressionContext {
	var p = new(PrefixExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_prefixExpression
	return p
}

func (*PrefixExpressionContext) IsPrefixExpressionContext() {}

func NewPrefixExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixExpressionContext {
	var p = new(PrefixExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_prefixExpression

	return p
}

func (s *PrefixExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixExpressionContext) PrefixOperator() IPrefixOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixOperatorContext)
}

func (s *PrefixExpressionContext) PostfixExpression() IPostfixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *PrefixExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrefixExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrefixExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PrefixExpression() (localctx IPrefixExpressionContext) {
	localctx = NewPrefixExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, MojoParserRULE_prefixExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1530)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1526)
			p.PrefixOperator()
		}
		{
			p.SetState(1527)
			p.postfixExpression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1529)
			p.postfixExpression(0)
		}

	}

	return localctx
}

// IBinaryExpressionContext is an interface to support dynamic dispatch.
type IBinaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinaryExpressionContext differentiates from other interfaces.
	IsBinaryExpressionContext()
}

type BinaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinaryExpressionContext() *BinaryExpressionContext {
	var p = new(BinaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_binaryExpression
	return p
}

func (*BinaryExpressionContext) IsBinaryExpressionContext() {}

func NewBinaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BinaryExpressionContext {
	var p = new(BinaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_binaryExpression

	return p
}

func (s *BinaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *BinaryExpressionContext) BinaryOperator() IBinaryOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBinaryOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBinaryOperatorContext)
}

func (s *BinaryExpressionContext) PrefixExpression() IPrefixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixExpressionContext)
}

func (s *BinaryExpressionContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *BinaryExpressionContext) Conditional_operator() IConditional_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditional_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditional_operatorContext)
}

func (s *BinaryExpressionContext) Type_casting_operator() IType_casting_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_casting_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_casting_operatorContext)
}

func (s *BinaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BinaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBinaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BinaryExpression() (localctx IBinaryExpressionContext) {
	localctx = NewBinaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, MojoParserRULE_binaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1542)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 205, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1532)
			p.BinaryOperator()
		}
		{
			p.SetState(1533)
			p.PrefixExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1535)
			p.AssignmentOperator()
		}
		{
			p.SetState(1536)
			p.PrefixExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1538)
			p.Conditional_operator()
		}
		{
			p.SetState(1539)
			p.PrefixExpression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1541)
			p.Type_casting_operator()
		}

	}

	return localctx
}

// IBinaryExpressionsContext is an interface to support dynamic dispatch.
type IBinaryExpressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinaryExpressionsContext differentiates from other interfaces.
	IsBinaryExpressionsContext()
}

type BinaryExpressionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinaryExpressionsContext() *BinaryExpressionsContext {
	var p = new(BinaryExpressionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_binaryExpressions
	return p
}

func (*BinaryExpressionsContext) IsBinaryExpressionsContext() {}

func NewBinaryExpressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BinaryExpressionsContext {
	var p = new(BinaryExpressionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_binaryExpressions

	return p
}

func (s *BinaryExpressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *BinaryExpressionsContext) AllBinaryExpression() []IBinaryExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBinaryExpressionContext)(nil)).Elem())
	var tst = make([]IBinaryExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBinaryExpressionContext)
		}
	}

	return tst
}

func (s *BinaryExpressionsContext) BinaryExpression(i int) IBinaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBinaryExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBinaryExpressionContext)
}

func (s *BinaryExpressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryExpressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BinaryExpressionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBinaryExpressions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BinaryExpressions() (localctx IBinaryExpressionsContext) {
	localctx = NewBinaryExpressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, MojoParserRULE_binaryExpressions)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1545)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1544)
				p.BinaryExpression()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1547)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 206, p.GetParserRuleContext())
	}

	return localctx
}

// IConditional_operatorContext is an interface to support dynamic dispatch.
type IConditional_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditional_operatorContext differentiates from other interfaces.
	IsConditional_operatorContext()
}

type Conditional_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditional_operatorContext() *Conditional_operatorContext {
	var p = new(Conditional_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_conditional_operator
	return p
}

func (*Conditional_operatorContext) IsConditional_operatorContext() {}

func NewConditional_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Conditional_operatorContext {
	var p = new(Conditional_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_conditional_operator

	return p
}

func (s *Conditional_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Conditional_operatorContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(MojoParserQUESTION, 0)
}

func (s *Conditional_operatorContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Conditional_operatorContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *Conditional_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Conditional_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Conditional_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitConditional_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Conditional_operator() (localctx IConditional_operatorContext) {
	localctx = NewConditional_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, MojoParserRULE_conditional_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1549)
		p.Match(MojoParserQUESTION)
	}
	{
		p.SetState(1550)
		p.Expression()
	}
	{
		p.SetState(1551)
		p.Match(MojoParserCOLON)
	}

	return localctx
}

// IType_casting_operatorContext is an interface to support dynamic dispatch.
type IType_casting_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_casting_operatorContext differentiates from other interfaces.
	IsType_casting_operatorContext()
}

type Type_casting_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_casting_operatorContext() *Type_casting_operatorContext {
	var p = new(Type_casting_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_type_casting_operator
	return p
}

func (*Type_casting_operatorContext) IsType_casting_operatorContext() {}

func NewType_casting_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_casting_operatorContext {
	var p = new(Type_casting_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_type_casting_operator

	return p
}

func (s *Type_casting_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_casting_operatorContext) KEYWORD_IS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IS, 0)
}

func (s *Type_casting_operatorContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *Type_casting_operatorContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *Type_casting_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_casting_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_casting_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitType_casting_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Type_casting_operator() (localctx IType_casting_operatorContext) {
	localctx = NewType_casting_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, MojoParserRULE_type_casting_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1557)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_IS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1553)
			p.Match(MojoParserKEYWORD_IS)
		}
		{
			p.SetState(1554)
			p.type_(0)
		}

	case MojoParserKEYWORD_AS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1555)
			p.Match(MojoParserKEYWORD_AS)
		}
		{
			p.SetState(1556)
			p.type_(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *PrimaryExpressionContext) GenericArgumentClause() IGenericArgumentClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericArgumentClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentClauseContext)
}

func (s *PrimaryExpressionContext) LiteralExpression() ILiteralExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralExpressionContext)
}

func (s *PrimaryExpressionContext) ParenthesizedExpression() IParenthesizedExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParenthesizedExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParenthesizedExpressionContext)
}

func (s *PrimaryExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *PrimaryExpressionContext) ImplicitMemberExpression() IImplicitMemberExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplicitMemberExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplicitMemberExpressionContext)
}

func (s *PrimaryExpressionContext) WildcardExpression() IWildcardExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWildcardExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWildcardExpressionContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrimaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, MojoParserRULE_primaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1568)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1559)
			p.DeclarationIdentifier()
		}
		p.SetState(1561)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 208, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1560)
				p.GenericArgumentClause()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1563)
			p.LiteralExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1564)
			p.ParenthesizedExpression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1565)
			p.TupleExpression()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1566)
			p.ImplicitMemberExpression()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1567)
			p.WildcardExpression()
		}

	}

	return localctx
}

// ILiteralExpressionContext is an interface to support dynamic dispatch.
type ILiteralExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralExpressionContext differentiates from other interfaces.
	IsLiteralExpressionContext()
}

type LiteralExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralExpressionContext() *LiteralExpressionContext {
	var p = new(LiteralExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_literalExpression
	return p
}

func (*LiteralExpressionContext) IsLiteralExpressionContext() {}

func NewLiteralExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralExpressionContext {
	var p = new(LiteralExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_literalExpression

	return p
}

func (s *LiteralExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralExpressionContext) Literal() ILiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *LiteralExpressionContext) ArrayLiteral() IArrayLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralContext)
}

func (s *LiteralExpressionContext) ObjectLiteral() IObjectLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralContext)
}

func (s *LiteralExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLiteralExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) LiteralExpression() (localctx ILiteralExpressionContext) {
	localctx = NewLiteralExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, MojoParserRULE_literalExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1573)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserSUB, MojoParserBoolLiteral, MojoParserNullLiteral, MojoParserBinaryLiteral, MojoParserOctalLiteral, MojoParserDecimalLiteral, MojoParserPureDecimalDigits, MojoParserHexadecimalLiteral, MojoParserFloatLiteral, MojoParserStaticStringLiteral, MojoParserInterpolatedStringLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1570)
			p.Literal()
		}

	case MojoParserLBRACK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1571)
			p.ArrayLiteral()
		}

	case MojoParserLCURLY:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1572)
			p.ObjectLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IArrayLiteralContext is an interface to support dynamic dispatch.
type IArrayLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLiteralContext differentiates from other interfaces.
	IsArrayLiteralContext()
}

type ArrayLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteralContext() *ArrayLiteralContext {
	var p = new(ArrayLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrayLiteral
	return p
}

func (*ArrayLiteralContext) IsArrayLiteralContext() {}

func NewArrayLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteralContext {
	var p = new(ArrayLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrayLiteral

	return p
}

func (s *ArrayLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteralContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserLBRACK, 0)
}

func (s *ArrayLiteralContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserRBRACK, 0)
}

func (s *ArrayLiteralContext) ArrayLiteralItems() IArrayLiteralItemsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLiteralItemsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralItemsContext)
}

func (s *ArrayLiteralContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ArrayLiteralContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ArrayLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrayLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrayLiteral() (localctx IArrayLiteralContext) {
	localctx = NewArrayLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, MojoParserRULE_arrayLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1575)
		p.Match(MojoParserLBRACK)
	}
	p.SetState(1583)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 212, p.GetParserRuleContext()) == 1 {
		p.SetState(1579)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1576)
				p.Match(MojoParserEOL)
			}

			p.SetState(1581)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1582)
			p.ArrayLiteralItems()
		}

	}
	p.SetState(1588)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1585)
			p.Match(MojoParserEOL)
		}

		p.SetState(1590)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1591)
		p.Match(MojoParserRBRACK)
	}

	return localctx
}

// IArrayLiteralItemsContext is an interface to support dynamic dispatch.
type IArrayLiteralItemsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLiteralItemsContext differentiates from other interfaces.
	IsArrayLiteralItemsContext()
}

type ArrayLiteralItemsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteralItemsContext() *ArrayLiteralItemsContext {
	var p = new(ArrayLiteralItemsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrayLiteralItems
	return p
}

func (*ArrayLiteralItemsContext) IsArrayLiteralItemsContext() {}

func NewArrayLiteralItemsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteralItemsContext {
	var p = new(ArrayLiteralItemsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrayLiteralItems

	return p
}

func (s *ArrayLiteralItemsContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteralItemsContext) AllArrayLiteralItem() []IArrayLiteralItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IArrayLiteralItemContext)(nil)).Elem())
	var tst = make([]IArrayLiteralItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IArrayLiteralItemContext)
		}
	}

	return tst
}

func (s *ArrayLiteralItemsContext) ArrayLiteralItem(i int) IArrayLiteralItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLiteralItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralItemContext)
}

func (s *ArrayLiteralItemsContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *ArrayLiteralItemsContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ArrayLiteralItemsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ArrayLiteralItemsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ArrayLiteralItemsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteralItemsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteralItemsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrayLiteralItems(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrayLiteralItems() (localctx IArrayLiteralItemsContext) {
	localctx = NewArrayLiteralItemsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, MojoParserRULE_arrayLiteralItems)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1593)
		p.ArrayLiteralItem()
	}
	p.SetState(1605)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 215, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1594)
				p.Eov()
			}
			p.SetState(1598)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1595)
					p.Match(MojoParserEOL)
				}

				p.SetState(1600)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1601)
				p.ArrayLiteralItem()
			}

		}
		p.SetState(1607)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 215, p.GetParserRuleContext())
	}
	p.SetState(1609)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 216, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1608)
			p.Eov()
		}

	}

	return localctx
}

// IArrayLiteralItemContext is an interface to support dynamic dispatch.
type IArrayLiteralItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLiteralItemContext differentiates from other interfaces.
	IsArrayLiteralItemContext()
}

type ArrayLiteralItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteralItemContext() *ArrayLiteralItemContext {
	var p = new(ArrayLiteralItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrayLiteralItem
	return p
}

func (*ArrayLiteralItemContext) IsArrayLiteralItemContext() {}

func NewArrayLiteralItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteralItemContext {
	var p = new(ArrayLiteralItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrayLiteralItem

	return p
}

func (s *ArrayLiteralItemContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteralItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayLiteralItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteralItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteralItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrayLiteralItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrayLiteralItem() (localctx IArrayLiteralItemContext) {
	localctx = NewArrayLiteralItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, MojoParserRULE_arrayLiteralItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1611)
		p.Expression()
	}

	return localctx
}

// IObjectLiteralContext is an interface to support dynamic dispatch.
type IObjectLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteralContext differentiates from other interfaces.
	IsObjectLiteralContext()
}

type ObjectLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteralContext() *ObjectLiteralContext {
	var p = new(ObjectLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_objectLiteral
	return p
}

func (*ObjectLiteralContext) IsObjectLiteralContext() {}

func NewObjectLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteralContext {
	var p = new(ObjectLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_objectLiteral

	return p
}

func (s *ObjectLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteralContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *ObjectLiteralContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *ObjectLiteralContext) ObjectLiteralItems() IObjectLiteralItemsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralItemsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralItemsContext)
}

func (s *ObjectLiteralContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ObjectLiteralContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ObjectLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitObjectLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ObjectLiteral() (localctx IObjectLiteralContext) {
	localctx = NewObjectLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, MojoParserRULE_objectLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1613)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(1621)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext()) == 1 {
		p.SetState(1617)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1614)
				p.Match(MojoParserEOL)
			}

			p.SetState(1619)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1620)
			p.ObjectLiteralItems()
		}

	}
	p.SetState(1626)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1623)
			p.Match(MojoParserEOL)
		}

		p.SetState(1628)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1629)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IObjectLiteralItemsContext is an interface to support dynamic dispatch.
type IObjectLiteralItemsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteralItemsContext differentiates from other interfaces.
	IsObjectLiteralItemsContext()
}

type ObjectLiteralItemsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteralItemsContext() *ObjectLiteralItemsContext {
	var p = new(ObjectLiteralItemsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_objectLiteralItems
	return p
}

func (*ObjectLiteralItemsContext) IsObjectLiteralItemsContext() {}

func NewObjectLiteralItemsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteralItemsContext {
	var p = new(ObjectLiteralItemsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_objectLiteralItems

	return p
}

func (s *ObjectLiteralItemsContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteralItemsContext) AllObjectLiteralItem() []IObjectLiteralItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IObjectLiteralItemContext)(nil)).Elem())
	var tst = make([]IObjectLiteralItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IObjectLiteralItemContext)
		}
	}

	return tst
}

func (s *ObjectLiteralItemsContext) ObjectLiteralItem(i int) IObjectLiteralItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralItemContext)
}

func (s *ObjectLiteralItemsContext) AllEovWithDocument() []IEovWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem())
	var tst = make([]IEovWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovWithDocumentContext)
		}
	}

	return tst
}

func (s *ObjectLiteralItemsContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *ObjectLiteralItemsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ObjectLiteralItemsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ObjectLiteralItemsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteralItemsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteralItemsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitObjectLiteralItems(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ObjectLiteralItems() (localctx IObjectLiteralItemsContext) {
	localctx = NewObjectLiteralItemsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, MojoParserRULE_objectLiteralItems)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1631)
		p.ObjectLiteralItem()
	}
	p.SetState(1643)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1632)
				p.EovWithDocument()
			}
			p.SetState(1636)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1633)
					p.Match(MojoParserEOL)
				}

				p.SetState(1638)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1639)
				p.ObjectLiteralItem()
			}

		}
		p.SetState(1645)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext())
	}
	p.SetState(1647)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1646)
			p.EovWithDocument()
		}

	}

	return localctx
}

// IObjectLiteralItemContext is an interface to support dynamic dispatch.
type IObjectLiteralItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteralItemContext differentiates from other interfaces.
	IsObjectLiteralItemContext()
}

type ObjectLiteralItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteralItemContext() *ObjectLiteralItemContext {
	var p = new(ObjectLiteralItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_objectLiteralItem
	return p
}

func (*ObjectLiteralItemContext) IsObjectLiteralItemContext() {}

func NewObjectLiteralItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteralItemContext {
	var p = new(ObjectLiteralItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_objectLiteralItem

	return p
}

func (s *ObjectLiteralItemContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteralItemContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ObjectLiteralItemContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ObjectLiteralItemContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *ObjectLiteralItemContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *ObjectLiteralItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteralItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteralItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitObjectLiteralItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ObjectLiteralItem() (localctx IObjectLiteralItemContext) {
	localctx = NewObjectLiteralItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, MojoParserRULE_objectLiteralItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1650)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLineDocument {
		{
			p.SetState(1649)
			p.Document()
		}

	}
	{
		p.SetState(1652)
		p.Expression()
	}
	{
		p.SetState(1653)
		p.Match(MojoParserCOLON)
	}
	{
		p.SetState(1654)
		p.Expression()
	}

	return localctx
}

// IImplicitMemberExpressionContext is an interface to support dynamic dispatch.
type IImplicitMemberExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImplicitMemberExpressionContext differentiates from other interfaces.
	IsImplicitMemberExpressionContext()
}

type ImplicitMemberExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplicitMemberExpressionContext() *ImplicitMemberExpressionContext {
	var p = new(ImplicitMemberExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_implicitMemberExpression
	return p
}

func (*ImplicitMemberExpressionContext) IsImplicitMemberExpressionContext() {}

func NewImplicitMemberExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplicitMemberExpressionContext {
	var p = new(ImplicitMemberExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_implicitMemberExpression

	return p
}

func (s *ImplicitMemberExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplicitMemberExpressionContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ImplicitMemberExpressionContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *ImplicitMemberExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplicitMemberExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplicitMemberExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImplicitMemberExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImplicitMemberExpression() (localctx IImplicitMemberExpressionContext) {
	localctx = NewImplicitMemberExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, MojoParserRULE_implicitMemberExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1656)
		p.Match(MojoParserDOT)
	}
	{
		p.SetState(1657)
		p.LabelIdentifier()
	}

	return localctx
}

// IParenthesizedExpressionContext is an interface to support dynamic dispatch.
type IParenthesizedExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParenthesizedExpressionContext differentiates from other interfaces.
	IsParenthesizedExpressionContext()
}

type ParenthesizedExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesizedExpressionContext() *ParenthesizedExpressionContext {
	var p = new(ParenthesizedExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_parenthesizedExpression
	return p
}

func (*ParenthesizedExpressionContext) IsParenthesizedExpressionContext() {}

func NewParenthesizedExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParenthesizedExpressionContext {
	var p = new(ParenthesizedExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_parenthesizedExpression

	return p
}

func (s *ParenthesizedExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ParenthesizedExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *ParenthesizedExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParenthesizedExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *ParenthesizedExpressionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ParenthesizedExpressionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ParenthesizedExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParenthesizedExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitParenthesizedExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ParenthesizedExpression() (localctx IParenthesizedExpressionContext) {
	localctx = NewParenthesizedExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, MojoParserRULE_parenthesizedExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1659)
		p.Match(MojoParserLPAREN)
	}
	p.SetState(1663)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1660)
			p.Match(MojoParserEOL)
		}

		p.SetState(1665)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1666)
		p.Expression()
	}
	p.SetState(1670)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1667)
			p.Match(MojoParserEOL)
		}

		p.SetState(1672)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1673)
		p.Match(MojoParserRPAREN)
	}

	return localctx
}

// ITupleExpressionContext is an interface to support dynamic dispatch.
type ITupleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleExpressionContext differentiates from other interfaces.
	IsTupleExpressionContext()
}

type TupleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleExpressionContext() *TupleExpressionContext {
	var p = new(TupleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleExpression
	return p
}

func (*TupleExpressionContext) IsTupleExpressionContext() {}

func NewTupleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleExpressionContext {
	var p = new(TupleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleExpression

	return p
}

func (s *TupleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *TupleExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *TupleExpressionContext) AllTupleElement() []ITupleElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITupleElementContext)(nil)).Elem())
	var tst = make([]ITupleElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITupleElementContext)
		}
	}

	return tst
}

func (s *TupleExpressionContext) TupleElement(i int) ITupleElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITupleElementContext)
}

func (s *TupleExpressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MojoParserCOMMA)
}

func (s *TupleExpressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, i)
}

func (s *TupleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleExpression() (localctx ITupleExpressionContext) {
	localctx = NewTupleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, MojoParserRULE_tupleExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1687)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 227, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1675)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1676)
			p.Match(MojoParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1677)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1678)
			p.TupleElement()
		}
		p.SetState(1681)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MojoParserCOMMA {
			{
				p.SetState(1679)
				p.Match(MojoParserCOMMA)
			}
			{
				p.SetState(1680)
				p.TupleElement()
			}

			p.SetState(1683)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1685)
			p.Match(MojoParserRPAREN)
		}

	}

	return localctx
}

// ITupleElementContext is an interface to support dynamic dispatch.
type ITupleElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleElementContext differentiates from other interfaces.
	IsTupleElementContext()
}

type TupleElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleElementContext() *TupleElementContext {
	var p = new(TupleElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleElement
	return p
}

func (*TupleElementContext) IsTupleElementContext() {}

func NewTupleElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleElementContext {
	var p = new(TupleElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleElement

	return p
}

func (s *TupleElementContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleElementContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *TupleElementContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *TupleElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleElement() (localctx ITupleElementContext) {
	localctx = NewTupleElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, MojoParserRULE_tupleElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1694)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 228, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1689)
			p.Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1690)
			p.LabelIdentifier()
		}
		{
			p.SetState(1691)
			p.Match(MojoParserCOLON)
		}
		{
			p.SetState(1692)
			p.Expression()
		}

	}

	return localctx
}

// IWildcardExpressionContext is an interface to support dynamic dispatch.
type IWildcardExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWildcardExpressionContext differentiates from other interfaces.
	IsWildcardExpressionContext()
}

type WildcardExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWildcardExpressionContext() *WildcardExpressionContext {
	var p = new(WildcardExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_wildcardExpression
	return p
}

func (*WildcardExpressionContext) IsWildcardExpressionContext() {}

func NewWildcardExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WildcardExpressionContext {
	var p = new(WildcardExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_wildcardExpression

	return p
}

func (s *WildcardExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *WildcardExpressionContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(MojoParserUNDERSCORE, 0)
}

func (s *WildcardExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildcardExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WildcardExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitWildcardExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) WildcardExpression() (localctx IWildcardExpressionContext) {
	localctx = NewWildcardExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, MojoParserRULE_wildcardExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1696)
		p.Match(MojoParserUNDERSCORE)
	}

	return localctx
}

// IPostfixExpressionContext is an interface to support dynamic dispatch.
type IPostfixExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixExpressionContext differentiates from other interfaces.
	IsPostfixExpressionContext()
}

type PostfixExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixExpressionContext() *PostfixExpressionContext {
	var p = new(PostfixExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_postfixExpression
	return p
}

func (*PostfixExpressionContext) IsPostfixExpressionContext() {}

func NewPostfixExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixExpressionContext {
	var p = new(PostfixExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_postfixExpression

	return p
}

func (s *PostfixExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixExpressionContext) CopyFrom(ctx *PostfixExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PostfixExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExplicitMemberExpression1Context struct {
	*PostfixExpressionContext
}

func NewExplicitMemberExpression1Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExplicitMemberExpression1Context {
	var p = new(ExplicitMemberExpression1Context)

	p.PostfixExpressionContext = NewEmptyPostfixExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PostfixExpressionContext))

	return p
}

func (s *ExplicitMemberExpression1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitMemberExpression1Context) PostfixExpression() IPostfixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *ExplicitMemberExpression1Context) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ExplicitMemberExpression1Context) PureDecimalDigits() antlr.TerminalNode {
	return s.GetToken(MojoParserPureDecimalDigits, 0)
}

func (s *ExplicitMemberExpression1Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExplicitMemberExpression1(s)

	default:
		return t.VisitChildren(s)
	}
}

type PostfixOperationContext struct {
	*PostfixExpressionContext
}

func NewPostfixOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PostfixOperationContext {
	var p = new(PostfixOperationContext)

	p.PostfixExpressionContext = NewEmptyPostfixExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PostfixExpressionContext))

	return p
}

func (s *PostfixOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixOperationContext) PostfixExpression() IPostfixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *PostfixOperationContext) PostfixOperator() IPostfixOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixOperatorContext)
}

func (s *PostfixOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPostfixOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExplicitMemberExpression4Context struct {
	*PostfixExpressionContext
}

func NewExplicitMemberExpression4Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExplicitMemberExpression4Context {
	var p = new(ExplicitMemberExpression4Context)

	p.PostfixExpressionContext = NewEmptyPostfixExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PostfixExpressionContext))

	return p
}

func (s *ExplicitMemberExpression4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitMemberExpression4Context) PostfixExpression() IPostfixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *ExplicitMemberExpression4Context) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *ExplicitMemberExpression4Context) ArgumentNameList() IArgumentNameListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentNameListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentNameListContext)
}

func (s *ExplicitMemberExpression4Context) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *ExplicitMemberExpression4Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExplicitMemberExpression4(s)

	default:
		return t.VisitChildren(s)
	}
}

type SubscriptExpressionContext struct {
	*PostfixExpressionContext
}

func NewSubscriptExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubscriptExpressionContext {
	var p = new(SubscriptExpressionContext)

	p.PostfixExpressionContext = NewEmptyPostfixExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PostfixExpressionContext))

	return p
}

func (s *SubscriptExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubscriptExpressionContext) PostfixExpression() IPostfixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *SubscriptExpressionContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserLBRACK, 0)
}

func (s *SubscriptExpressionContext) Expressions() IExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsContext)
}

func (s *SubscriptExpressionContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserRBRACK, 0)
}

func (s *SubscriptExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitSubscriptExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExplicitMemberExpression3Context struct {
	*PostfixExpressionContext
}

func NewExplicitMemberExpression3Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExplicitMemberExpression3Context {
	var p = new(ExplicitMemberExpression3Context)

	p.PostfixExpressionContext = NewEmptyPostfixExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PostfixExpressionContext))

	return p
}

func (s *ExplicitMemberExpression3Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitMemberExpression3Context) PostfixExpression() IPostfixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *ExplicitMemberExpression3Context) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ExplicitMemberExpression3Context) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *ExplicitMemberExpression3Context) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *ExplicitMemberExpression3Context) ArgumentNameList() IArgumentNameListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentNameListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentNameListContext)
}

func (s *ExplicitMemberExpression3Context) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *ExplicitMemberExpression3Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExplicitMemberExpression3(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExplicitMemberExpression2Context struct {
	*PostfixExpressionContext
}

func NewExplicitMemberExpression2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExplicitMemberExpression2Context {
	var p = new(ExplicitMemberExpression2Context)

	p.PostfixExpressionContext = NewEmptyPostfixExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PostfixExpressionContext))

	return p
}

func (s *ExplicitMemberExpression2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitMemberExpression2Context) PostfixExpression() IPostfixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *ExplicitMemberExpression2Context) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ExplicitMemberExpression2Context) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *ExplicitMemberExpression2Context) GenericArgumentClause() IGenericArgumentClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericArgumentClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentClauseContext)
}

func (s *ExplicitMemberExpression2Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExplicitMemberExpression2(s)

	default:
		return t.VisitChildren(s)
	}
}

type FunctionCallExpressionContext struct {
	*PostfixExpressionContext
}

func NewFunctionCallExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionCallExpressionContext {
	var p = new(FunctionCallExpressionContext)

	p.PostfixExpressionContext = NewEmptyPostfixExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PostfixExpressionContext))

	return p
}

func (s *FunctionCallExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallExpressionContext) PostfixExpression() IPostfixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *FunctionCallExpressionContext) FunctionCallArgumentClause() IFunctionCallArgumentClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallArgumentClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallArgumentClauseContext)
}

func (s *FunctionCallExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionCallExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type PrimaryContext struct {
	*PostfixExpressionContext
}

func NewPrimaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryContext {
	var p = new(PrimaryContext)

	p.PostfixExpressionContext = NewEmptyPostfixExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PostfixExpressionContext))

	return p
}

func (s *PrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *PrimaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrimary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PostfixExpression() (localctx IPostfixExpressionContext) {
	return p.postfixExpression(0)
}

func (p *MojoParser) postfixExpression(_p int) (localctx IPostfixExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPostfixExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPostfixExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 214
	p.EnterRecursionRule(localctx, 214, MojoParserRULE_postfixExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewPrimaryContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(1699)
		p.PrimaryExpression()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1733)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1731)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) {
			case 1:
				localctx = NewPostfixOperationContext(p, NewPostfixExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_postfixExpression)
				p.SetState(1701)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(1702)
					p.PostfixOperator()
				}

			case 2:
				localctx = NewFunctionCallExpressionContext(p, NewPostfixExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_postfixExpression)
				p.SetState(1703)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(1704)
					p.FunctionCallArgumentClause()
				}

			case 3:
				localctx = NewExplicitMemberExpression1Context(p, NewPostfixExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_postfixExpression)
				p.SetState(1705)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(1706)
					p.Match(MojoParserDOT)
				}
				{
					p.SetState(1707)
					p.Match(MojoParserPureDecimalDigits)
				}

			case 4:
				localctx = NewExplicitMemberExpression2Context(p, NewPostfixExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_postfixExpression)
				p.SetState(1708)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(1709)
					p.Match(MojoParserDOT)
				}
				{
					p.SetState(1710)
					p.DeclarationIdentifier()
				}
				p.SetState(1712)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 229, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1711)
						p.GenericArgumentClause()
					}

				}

			case 5:
				localctx = NewExplicitMemberExpression3Context(p, NewPostfixExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_postfixExpression)
				p.SetState(1714)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1715)
					p.Match(MojoParserDOT)
				}
				{
					p.SetState(1716)
					p.DeclarationIdentifier()
				}
				{
					p.SetState(1717)
					p.Match(MojoParserLPAREN)
				}
				{
					p.SetState(1718)
					p.ArgumentNameList()
				}
				{
					p.SetState(1719)
					p.Match(MojoParserRPAREN)
				}

			case 6:
				localctx = NewExplicitMemberExpression4Context(p, NewPostfixExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_postfixExpression)
				p.SetState(1721)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1722)
					p.Match(MojoParserLPAREN)
				}
				{
					p.SetState(1723)
					p.ArgumentNameList()
				}
				{
					p.SetState(1724)
					p.Match(MojoParserRPAREN)
				}

			case 7:
				localctx = NewSubscriptExpressionContext(p, NewPostfixExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_postfixExpression)
				p.SetState(1726)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(1727)
					p.Match(MojoParserLBRACK)
				}
				{
					p.SetState(1728)
					p.Expressions()
				}
				{
					p.SetState(1729)
					p.Match(MojoParserRBRACK)
				}

			}

		}
		p.SetState(1735)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext())
	}

	return localctx
}

// IFunctionCallArgumentClauseContext is an interface to support dynamic dispatch.
type IFunctionCallArgumentClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallArgumentClauseContext differentiates from other interfaces.
	IsFunctionCallArgumentClauseContext()
}

type FunctionCallArgumentClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallArgumentClauseContext() *FunctionCallArgumentClauseContext {
	var p = new(FunctionCallArgumentClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionCallArgumentClause
	return p
}

func (*FunctionCallArgumentClauseContext) IsFunctionCallArgumentClauseContext() {}

func NewFunctionCallArgumentClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallArgumentClauseContext {
	var p = new(FunctionCallArgumentClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionCallArgumentClause

	return p
}

func (s *FunctionCallArgumentClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallArgumentClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *FunctionCallArgumentClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *FunctionCallArgumentClauseContext) Function_call_argument_list() IFunction_call_argument_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_argument_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_argument_listContext)
}

func (s *FunctionCallArgumentClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallArgumentClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallArgumentClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionCallArgumentClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionCallArgumentClause() (localctx IFunctionCallArgumentClauseContext) {
	localctx = NewFunctionCallArgumentClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, MojoParserRULE_functionCallArgumentClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1742)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 232, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1736)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1737)
			p.Match(MojoParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1738)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1739)
			p.Function_call_argument_list()
		}
		{
			p.SetState(1740)
			p.Match(MojoParserRPAREN)
		}

	}

	return localctx
}

// IFunction_call_argument_listContext is an interface to support dynamic dispatch.
type IFunction_call_argument_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_call_argument_listContext differentiates from other interfaces.
	IsFunction_call_argument_listContext()
}

type Function_call_argument_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_call_argument_listContext() *Function_call_argument_listContext {
	var p = new(Function_call_argument_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_function_call_argument_list
	return p
}

func (*Function_call_argument_listContext) IsFunction_call_argument_listContext() {}

func NewFunction_call_argument_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_call_argument_listContext {
	var p = new(Function_call_argument_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_function_call_argument_list

	return p
}

func (s *Function_call_argument_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_call_argument_listContext) AllFunction_call_argument() []IFunction_call_argumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_call_argumentContext)(nil)).Elem())
	var tst = make([]IFunction_call_argumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_call_argumentContext)
		}
	}

	return tst
}

func (s *Function_call_argument_listContext) Function_call_argument(i int) IFunction_call_argumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_argumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_argumentContext)
}

func (s *Function_call_argument_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MojoParserCOMMA)
}

func (s *Function_call_argument_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, i)
}

func (s *Function_call_argument_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_argument_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_call_argument_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunction_call_argument_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Function_call_argument_list() (localctx IFunction_call_argument_listContext) {
	localctx = NewFunction_call_argument_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, MojoParserRULE_function_call_argument_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1744)
		p.Function_call_argument()
	}
	p.SetState(1749)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserCOMMA {
		{
			p.SetState(1745)
			p.Match(MojoParserCOMMA)
		}
		{
			p.SetState(1746)
			p.Function_call_argument()
		}

		p.SetState(1751)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunction_call_argumentContext is an interface to support dynamic dispatch.
type IFunction_call_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_call_argumentContext differentiates from other interfaces.
	IsFunction_call_argumentContext()
}

type Function_call_argumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_call_argumentContext() *Function_call_argumentContext {
	var p = new(Function_call_argumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_function_call_argument
	return p
}

func (*Function_call_argumentContext) IsFunction_call_argumentContext() {}

func NewFunction_call_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_call_argumentContext {
	var p = new(Function_call_argumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_function_call_argument

	return p
}

func (s *Function_call_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_call_argumentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Function_call_argumentContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *Function_call_argumentContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *Function_call_argumentContext) Operator() IOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *Function_call_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_call_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunction_call_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Function_call_argument() (localctx IFunction_call_argumentContext) {
	localctx = NewFunction_call_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, MojoParserRULE_function_call_argument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1762)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1752)
			p.Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1753)
			p.LabelIdentifier()
		}
		{
			p.SetState(1754)
			p.Match(MojoParserCOLON)
		}
		{
			p.SetState(1755)
			p.Expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1757)
			p.Operator()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1758)
			p.LabelIdentifier()
		}
		{
			p.SetState(1759)
			p.Match(MojoParserCOLON)
		}
		{
			p.SetState(1760)
			p.Operator()
		}

	}

	return localctx
}

// IArgumentNameListContext is an interface to support dynamic dispatch.
type IArgumentNameListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentNameListContext differentiates from other interfaces.
	IsArgumentNameListContext()
}

type ArgumentNameListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentNameListContext() *ArgumentNameListContext {
	var p = new(ArgumentNameListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_argumentNameList
	return p
}

func (*ArgumentNameListContext) IsArgumentNameListContext() {}

func NewArgumentNameListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentNameListContext {
	var p = new(ArgumentNameListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_argumentNameList

	return p
}

func (s *ArgumentNameListContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentNameListContext) AllArgument_name() []IArgument_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IArgument_nameContext)(nil)).Elem())
	var tst = make([]IArgument_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IArgument_nameContext)
		}
	}

	return tst
}

func (s *ArgumentNameListContext) Argument_name(i int) IArgument_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgument_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IArgument_nameContext)
}

func (s *ArgumentNameListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentNameListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentNameListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArgumentNameList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArgumentNameList() (localctx IArgumentNameListContext) {
	localctx = NewArgumentNameListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, MojoParserRULE_argumentNameList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1764)
		p.Argument_name()
	}
	p.SetState(1768)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MojoParserKEYWORD_AND)|(1<<MojoParserKEYWORD_AS)|(1<<MojoParserKEYWORD_ATTRIBUTE)|(1<<MojoParserKEYWORD_BREAK)|(1<<MojoParserKEYWORD_CONST)|(1<<MojoParserKEYWORD_CONTINUE)|(1<<MojoParserKEYWORD_ELSE)|(1<<MojoParserKEYWORD_ENUM)|(1<<MojoParserKEYWORD_FALSE)|(1<<MojoParserKEYWORD_FOR)|(1<<MojoParserKEYWORD_FUNC)|(1<<MojoParserKEYWORD_IF)|(1<<MojoParserKEYWORD_IMPORT)|(1<<MojoParserKEYWORD_IN)|(1<<MojoParserKEYWORD_INTERFACE)|(1<<MojoParserKEYWORD_IS)|(1<<MojoParserKEYWORD_MATCH)|(1<<MojoParserKEYWORD_NOT)|(1<<MojoParserKEYWORD_NULL)|(1<<MojoParserKEYWORD_OR)|(1<<MojoParserKEYWORD_PACKAGE)|(1<<MojoParserKEYWORD_REPEATE)|(1<<MojoParserKEYWORD_RETURN)|(1<<MojoParserKEYWORD_STRUCT)|(1<<MojoParserKEYWORD_TRUE)|(1<<MojoParserKEYWORD_TYPE)|(1<<MojoParserKEYWORD_VAR)|(1<<MojoParserKEYWORD_WHILE)|(1<<MojoParserKEYWORD_XOR))) != 0) || _la == MojoParserIdentifier {
		{
			p.SetState(1765)
			p.Argument_name()
		}

		p.SetState(1770)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IArgument_nameContext is an interface to support dynamic dispatch.
type IArgument_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgument_nameContext differentiates from other interfaces.
	IsArgument_nameContext()
}

type Argument_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgument_nameContext() *Argument_nameContext {
	var p = new(Argument_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_argument_name
	return p
}

func (*Argument_nameContext) IsArgument_nameContext() {}

func NewArgument_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Argument_nameContext {
	var p = new(Argument_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_argument_name

	return p
}

func (s *Argument_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Argument_nameContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *Argument_nameContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *Argument_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Argument_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Argument_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArgument_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Argument_name() (localctx IArgument_nameContext) {
	localctx = NewArgument_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, MojoParserRULE_argument_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1771)
		p.LabelIdentifier()
	}
	{
		p.SetState(1772)
		p.Match(MojoParserCOLON)
	}

	return localctx
}

// IType_Context is an interface to support dynamic dispatch.
type IType_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_Context differentiates from other interfaces.
	IsType_Context()
}

type Type_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_Context() *Type_Context {
	var p = new(Type_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_type_
	return p
}

func (*Type_Context) IsType_Context() {}

func NewType_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_Context {
	var p = new(Type_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_type_

	return p
}

func (s *Type_Context) GetParser() antlr.Parser { return s.parser }

func (s *Type_Context) BasicType() IBasicTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeContext)
}

func (s *Type_Context) FunctionType() IFunctionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeContext)
}

func (s *Type_Context) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *Type_Context) QUESTION() antlr.TerminalNode {
	return s.GetToken(MojoParserQUESTION, 0)
}

func (s *Type_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitType_(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Type_() (localctx IType_Context) {
	return p.type_(0)
}

func (p *MojoParser) type_(_p int) (localctx IType_Context) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewType_Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IType_Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 226
	p.EnterRecursionRule(localctx, 226, MojoParserRULE_type_, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1777)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 236, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1775)
			p.basicType(0)
		}

	case 2:
		{
			p.SetState(1776)
			p.FunctionType()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1783)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 237, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewType_Context(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_type_)
			p.SetState(1779)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1780)
				p.Match(MojoParserQUESTION)
			}

		}
		p.SetState(1785)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 237, p.GetParserRuleContext())
	}

	return localctx
}

// IBasicTypeContext is an interface to support dynamic dispatch.
type IBasicTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBasicTypeContext differentiates from other interfaces.
	IsBasicTypeContext()
}

type BasicTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBasicTypeContext() *BasicTypeContext {
	var p = new(BasicTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_basicType
	return p
}

func (*BasicTypeContext) IsBasicTypeContext() {}

func NewBasicTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasicTypeContext {
	var p = new(BasicTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_basicType

	return p
}

func (s *BasicTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *BasicTypeContext) CopyFrom(ctx *BasicTypeContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *BasicTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasicTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IntersectionContext struct {
	*BasicTypeContext
}

func NewIntersectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntersectionContext {
	var p = new(IntersectionContext)

	p.BasicTypeContext = NewEmptyBasicTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BasicTypeContext))

	return p
}

func (s *IntersectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntersectionContext) AllBasicType() []IBasicTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBasicTypeContext)(nil)).Elem())
	var tst = make([]IBasicTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBasicTypeContext)
		}
	}

	return tst
}

func (s *IntersectionContext) BasicType(i int) IBasicTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeContext)
}

func (s *IntersectionContext) AND() antlr.TerminalNode {
	return s.GetToken(MojoParserAND, 0)
}

func (s *IntersectionContext) AllAttributes() []IAttributesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttributesContext)(nil)).Elem())
	var tst = make([]IAttributesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttributesContext)
		}
	}

	return tst
}

func (s *IntersectionContext) Attributes(i int) IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *IntersectionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *IntersectionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *IntersectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIntersection(s)

	default:
		return t.VisitChildren(s)
	}
}

type PrimeContext struct {
	*BasicTypeContext
}

func NewPrimeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimeContext {
	var p = new(PrimeContext)

	p.BasicTypeContext = NewEmptyBasicTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BasicTypeContext))

	return p
}

func (s *PrimeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimeContext) PrimeType() IPrimeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimeTypeContext)
}

func (s *PrimeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrime(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnionContext struct {
	*BasicTypeContext
}

func NewUnionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnionContext {
	var p = new(UnionContext)

	p.BasicTypeContext = NewEmptyBasicTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BasicTypeContext))

	return p
}

func (s *UnionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionContext) AllBasicType() []IBasicTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBasicTypeContext)(nil)).Elem())
	var tst = make([]IBasicTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBasicTypeContext)
		}
	}

	return tst
}

func (s *UnionContext) BasicType(i int) IBasicTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeContext)
}

func (s *UnionContext) OR() antlr.TerminalNode {
	return s.GetToken(MojoParserOR, 0)
}

func (s *UnionContext) AllAttributes() []IAttributesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttributesContext)(nil)).Elem())
	var tst = make([]IAttributesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttributesContext)
		}
	}

	return tst
}

func (s *UnionContext) Attributes(i int) IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *UnionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *UnionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *UnionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitUnion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BasicType() (localctx IBasicTypeContext) {
	return p.basicType(0)
}

func (p *MojoParser) basicType(_p int) (localctx IBasicTypeContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBasicTypeContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBasicTypeContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 228
	p.EnterRecursionRule(localctx, 228, MojoParserRULE_basicType, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewPrimeContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(1787)
		p.PrimeType()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1833)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 247, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1831)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 246, p.GetParserRuleContext()) {
			case 1:
				localctx = NewUnionContext(p, NewBasicTypeContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_basicType)
				p.SetState(1789)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				p.SetState(1791)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MojoParserAT {
					{
						p.SetState(1790)
						p.Attributes()
					}

				}
				p.SetState(1796)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MojoParserEOL {
					{
						p.SetState(1793)
						p.Match(MojoParserEOL)
					}

					p.SetState(1798)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1799)
					p.Match(MojoParserOR)
				}
				p.SetState(1803)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MojoParserEOL {
					{
						p.SetState(1800)
						p.Match(MojoParserEOL)
					}

					p.SetState(1805)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1806)
					p.basicType(0)
				}
				p.SetState(1808)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 241, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1807)
						p.Attributes()
					}

				}

			case 2:
				localctx = NewIntersectionContext(p, NewBasicTypeContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_basicType)
				p.SetState(1810)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				p.SetState(1812)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MojoParserAT {
					{
						p.SetState(1811)
						p.Attributes()
					}

				}
				p.SetState(1817)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MojoParserEOL {
					{
						p.SetState(1814)
						p.Match(MojoParserEOL)
					}

					p.SetState(1819)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1820)
					p.Match(MojoParserAND)
				}
				p.SetState(1824)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MojoParserEOL {
					{
						p.SetState(1821)
						p.Match(MojoParserEOL)
					}

					p.SetState(1826)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1827)
					p.basicType(0)
				}
				p.SetState(1829)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1828)
						p.Attributes()
					}

				}

			}

		}
		p.SetState(1835)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 247, p.GetParserRuleContext())
	}

	return localctx
}

// IPrimeTypeContext is an interface to support dynamic dispatch.
type IPrimeTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimeTypeContext differentiates from other interfaces.
	IsPrimeTypeContext()
}

type PrimeTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimeTypeContext() *PrimeTypeContext {
	var p = new(PrimeTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_primeType
	return p
}

func (*PrimeTypeContext) IsPrimeTypeContext() {}

func NewPrimeTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimeTypeContext {
	var p = new(PrimeTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_primeType

	return p
}

func (s *PrimeTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimeTypeContext) ArrayType() IArrayTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayTypeContext)
}

func (s *PrimeTypeContext) DictionaryType() IDictionaryTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDictionaryTypeContext)
}

func (s *PrimeTypeContext) TupleType() ITupleTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleTypeContext)
}

func (s *PrimeTypeContext) TypeIdentifier() ITypeIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeIdentifierContext)
}

func (s *PrimeTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimeTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimeTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrimeType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PrimeType() (localctx IPrimeTypeContext) {
	localctx = NewPrimeTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, MojoParserRULE_primeType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1840)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserLBRACK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1836)
			p.ArrayType()
		}

	case MojoParserLCURLY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1837)
			p.DictionaryType()
		}

	case MojoParserLPAREN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1838)
			p.TupleType()
		}

	case MojoParserTypeName, MojoParserIdentifier:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1839)
			p.TypeIdentifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeAnnotationContext is an interface to support dynamic dispatch.
type ITypeAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAnnotationContext differentiates from other interfaces.
	IsTypeAnnotationContext()
}

type TypeAnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAnnotationContext() *TypeAnnotationContext {
	var p = new(TypeAnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeAnnotation
	return p
}

func (*TypeAnnotationContext) IsTypeAnnotationContext() {}

func NewTypeAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAnnotationContext {
	var p = new(TypeAnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeAnnotation

	return p
}

func (s *TypeAnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAnnotationContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *TypeAnnotationContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeAnnotationContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *TypeAnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAnnotationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeAnnotation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeAnnotation() (localctx ITypeAnnotationContext) {
	localctx = NewTypeAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, MojoParserRULE_typeAnnotation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1842)
		p.Match(MojoParserCOLON)
	}
	{
		p.SetState(1843)
		p.type_(0)
	}
	p.SetState(1845)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 249, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1844)
			p.Attributes()
		}

	}

	return localctx
}

// ITypeIdentifierContext is an interface to support dynamic dispatch.
type ITypeIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeIdentifierContext differentiates from other interfaces.
	IsTypeIdentifierContext()
}

type TypeIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeIdentifierContext() *TypeIdentifierContext {
	var p = new(TypeIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeIdentifier
	return p
}

func (*TypeIdentifierContext) IsTypeIdentifierContext() {}

func NewTypeIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeIdentifierContext {
	var p = new(TypeIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeIdentifier

	return p
}

func (s *TypeIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeIdentifierContext) AllTypeIdentifierClause() []ITypeIdentifierClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeIdentifierClauseContext)(nil)).Elem())
	var tst = make([]ITypeIdentifierClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeIdentifierClauseContext)
		}
	}

	return tst
}

func (s *TypeIdentifierContext) TypeIdentifierClause(i int) ITypeIdentifierClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeIdentifierClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeIdentifierClauseContext)
}

func (s *TypeIdentifierContext) PackageIdentifier() IPackageIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageIdentifierContext)
}

func (s *TypeIdentifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserDOT)
}

func (s *TypeIdentifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, i)
}

func (s *TypeIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeIdentifier() (localctx ITypeIdentifierContext) {
	localctx = NewTypeIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, MojoParserRULE_typeIdentifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1850)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserIdentifier {
		{
			p.SetState(1847)
			p.PackageIdentifier()
		}
		{
			p.SetState(1848)
			p.Match(MojoParserDOT)
		}

	}
	{
		p.SetState(1852)
		p.TypeIdentifierClause()
	}
	p.SetState(1857)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1853)
				p.Match(MojoParserDOT)
			}
			{
				p.SetState(1854)
				p.TypeIdentifierClause()
			}

		}
		p.SetState(1859)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext())
	}

	return localctx
}

// ITypeIdentifierClauseContext is an interface to support dynamic dispatch.
type ITypeIdentifierClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeIdentifierClauseContext differentiates from other interfaces.
	IsTypeIdentifierClauseContext()
}

type TypeIdentifierClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeIdentifierClauseContext() *TypeIdentifierClauseContext {
	var p = new(TypeIdentifierClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeIdentifierClause
	return p
}

func (*TypeIdentifierClauseContext) IsTypeIdentifierClauseContext() {}

func NewTypeIdentifierClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeIdentifierClauseContext {
	var p = new(TypeIdentifierClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeIdentifierClause

	return p
}

func (s *TypeIdentifierClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeIdentifierClauseContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *TypeIdentifierClauseContext) GenericArgumentClause() IGenericArgumentClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericArgumentClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentClauseContext)
}

func (s *TypeIdentifierClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeIdentifierClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeIdentifierClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeIdentifierClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeIdentifierClause() (localctx ITypeIdentifierClauseContext) {
	localctx = NewTypeIdentifierClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, MojoParserRULE_typeIdentifierClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1860)
		p.TypeName()
	}
	p.SetState(1862)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 252, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1861)
			p.GenericArgumentClause()
		}

	}

	return localctx
}

// ITypeNameContext is an interface to support dynamic dispatch.
type ITypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNameContext differentiates from other interfaces.
	IsTypeNameContext()
}

type TypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameContext() *TypeNameContext {
	var p = new(TypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeName
	return p
}

func (*TypeNameContext) IsTypeNameContext() {}

func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameContext {
	var p = new(TypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeName

	return p
}

func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameContext) TypeName() antlr.TerminalNode {
	return s.GetToken(MojoParserTypeName, 0)
}

func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeName() (localctx ITypeNameContext) {
	localctx = NewTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, MojoParserRULE_typeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1864)
		p.Match(MojoParserTypeName)
	}

	return localctx
}

// ITupleTypeContext is an interface to support dynamic dispatch.
type ITupleTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleTypeContext differentiates from other interfaces.
	IsTupleTypeContext()
}

type TupleTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleTypeContext() *TupleTypeContext {
	var p = new(TupleTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleType
	return p
}

func (*TupleTypeContext) IsTupleTypeContext() {}

func NewTupleTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleTypeContext {
	var p = new(TupleTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleType

	return p
}

func (s *TupleTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleTypeContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *TupleTypeContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *TupleTypeContext) TupleTypeElements() ITupleTypeElementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleTypeElementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleTypeElementsContext)
}

func (s *TupleTypeContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TupleTypeContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TupleTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleType() (localctx ITupleTypeContext) {
	localctx = NewTupleTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, MojoParserRULE_tupleType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1866)
		p.Match(MojoParserLPAREN)
	}
	p.SetState(1874)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 254, p.GetParserRuleContext()) == 1 {
		p.SetState(1870)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1867)
				p.Match(MojoParserEOL)
			}

			p.SetState(1872)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1873)
			p.TupleTypeElements()
		}

	}
	p.SetState(1879)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1876)
			p.Match(MojoParserEOL)
		}

		p.SetState(1881)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1882)
		p.Match(MojoParserRPAREN)
	}

	return localctx
}

// ITupleTypeElementsContext is an interface to support dynamic dispatch.
type ITupleTypeElementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleTypeElementsContext differentiates from other interfaces.
	IsTupleTypeElementsContext()
}

type TupleTypeElementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleTypeElementsContext() *TupleTypeElementsContext {
	var p = new(TupleTypeElementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleTypeElements
	return p
}

func (*TupleTypeElementsContext) IsTupleTypeElementsContext() {}

func NewTupleTypeElementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleTypeElementsContext {
	var p = new(TupleTypeElementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleTypeElements

	return p
}

func (s *TupleTypeElementsContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleTypeElementsContext) AllTupleTypeElement() []ITupleTypeElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITupleTypeElementContext)(nil)).Elem())
	var tst = make([]ITupleTypeElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITupleTypeElementContext)
		}
	}

	return tst
}

func (s *TupleTypeElementsContext) TupleTypeElement(i int) ITupleTypeElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleTypeElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITupleTypeElementContext)
}

func (s *TupleTypeElementsContext) AllEovWithDocument() []IEovWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem())
	var tst = make([]IEovWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovWithDocumentContext)
		}
	}

	return tst
}

func (s *TupleTypeElementsContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *TupleTypeElementsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TupleTypeElementsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TupleTypeElementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleTypeElementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleTypeElementsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleTypeElements(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleTypeElements() (localctx ITupleTypeElementsContext) {
	localctx = NewTupleTypeElementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, MojoParserRULE_tupleTypeElements)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1884)
		p.TupleTypeElement()
	}
	p.SetState(1896)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 257, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1885)
				p.EovWithDocument()
			}
			p.SetState(1889)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1886)
					p.Match(MojoParserEOL)
				}

				p.SetState(1891)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1892)
				p.TupleTypeElement()
			}

		}
		p.SetState(1898)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 257, p.GetParserRuleContext())
	}
	p.SetState(1900)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 258, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1899)
			p.EovWithDocument()
		}

	}

	return localctx
}

// ITupleTypeElementContext is an interface to support dynamic dispatch.
type ITupleTypeElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleTypeElementContext differentiates from other interfaces.
	IsTupleTypeElementContext()
}

type TupleTypeElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleTypeElementContext() *TupleTypeElementContext {
	var p = new(TupleTypeElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleTypeElement
	return p
}

func (*TupleTypeElementContext) IsTupleTypeElementContext() {}

func NewTupleTypeElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleTypeElementContext {
	var p = new(TupleTypeElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleTypeElement

	return p
}

func (s *TupleTypeElementContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleTypeElementContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TupleTypeElementContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *TupleTypeElementContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *TupleTypeElementContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *TupleTypeElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleTypeElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleTypeElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleTypeElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleTypeElement() (localctx ITupleTypeElementContext) {
	localctx = NewTupleTypeElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, MojoParserRULE_tupleTypeElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1905)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 259, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1902)
			p.DeclarationIdentifier()
		}
		{
			p.SetState(1903)
			p.Match(MojoParserCOLON)
		}

	}
	{
		p.SetState(1907)
		p.type_(0)
	}
	p.SetState(1909)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(1908)
			p.Attributes()
		}

	}

	return localctx
}

// IFunctionTypeContext is an interface to support dynamic dispatch.
type IFunctionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeContext differentiates from other interfaces.
	IsFunctionTypeContext()
}

type FunctionTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeContext() *FunctionTypeContext {
	var p = new(FunctionTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionType
	return p
}

func (*FunctionTypeContext) IsFunctionTypeContext() {}

func NewFunctionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeContext {
	var p = new(FunctionTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionType

	return p
}

func (s *FunctionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeContext) FunctionTypeArgumentClause() IFunctionTypeArgumentClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeArgumentClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeArgumentClauseContext)
}

func (s *FunctionTypeContext) ArrowOperator() IArrowOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowOperatorContext)
}

func (s *FunctionTypeContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FunctionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionType() (localctx IFunctionTypeContext) {
	localctx = NewFunctionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, MojoParserRULE_functionType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1911)
		p.FunctionTypeArgumentClause()
	}
	{
		p.SetState(1912)
		p.ArrowOperator()
	}
	{
		p.SetState(1913)
		p.type_(0)
	}

	return localctx
}

// IFunctionTypeArgumentClauseContext is an interface to support dynamic dispatch.
type IFunctionTypeArgumentClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeArgumentClauseContext differentiates from other interfaces.
	IsFunctionTypeArgumentClauseContext()
}

type FunctionTypeArgumentClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeArgumentClauseContext() *FunctionTypeArgumentClauseContext {
	var p = new(FunctionTypeArgumentClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionTypeArgumentClause
	return p
}

func (*FunctionTypeArgumentClauseContext) IsFunctionTypeArgumentClauseContext() {}

func NewFunctionTypeArgumentClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeArgumentClauseContext {
	var p = new(FunctionTypeArgumentClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionTypeArgumentClause

	return p
}

func (s *FunctionTypeArgumentClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeArgumentClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *FunctionTypeArgumentClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *FunctionTypeArgumentClauseContext) FunctionTypeArguments() IFunctionTypeArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeArgumentsContext)
}

func (s *FunctionTypeArgumentClauseContext) Range_operator() IRange_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRange_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRange_operatorContext)
}

func (s *FunctionTypeArgumentClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeArgumentClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeArgumentClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionTypeArgumentClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionTypeArgumentClause() (localctx IFunctionTypeArgumentClauseContext) {
	localctx = NewFunctionTypeArgumentClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, MojoParserRULE_functionTypeArgumentClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1924)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 262, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1915)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1916)
			p.Match(MojoParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1917)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1918)
			p.FunctionTypeArguments()
		}
		p.SetState(1920)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserDOT_DOT {
			{
				p.SetState(1919)
				p.Range_operator()
			}

		}
		{
			p.SetState(1922)
			p.Match(MojoParserRPAREN)
		}

	}

	return localctx
}

// IFunctionTypeArgumentsContext is an interface to support dynamic dispatch.
type IFunctionTypeArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeArgumentsContext differentiates from other interfaces.
	IsFunctionTypeArgumentsContext()
}

type FunctionTypeArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeArgumentsContext() *FunctionTypeArgumentsContext {
	var p = new(FunctionTypeArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionTypeArguments
	return p
}

func (*FunctionTypeArgumentsContext) IsFunctionTypeArgumentsContext() {}

func NewFunctionTypeArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeArgumentsContext {
	var p = new(FunctionTypeArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionTypeArguments

	return p
}

func (s *FunctionTypeArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeArgumentsContext) AllFunctionTypeArgument() []IFunctionTypeArgumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionTypeArgumentContext)(nil)).Elem())
	var tst = make([]IFunctionTypeArgumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionTypeArgumentContext)
		}
	}

	return tst
}

func (s *FunctionTypeArgumentsContext) FunctionTypeArgument(i int) IFunctionTypeArgumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeArgumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeArgumentContext)
}

func (s *FunctionTypeArgumentsContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *FunctionTypeArgumentsContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *FunctionTypeArgumentsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionTypeArgumentsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionTypeArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionTypeArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionTypeArguments() (localctx IFunctionTypeArgumentsContext) {
	localctx = NewFunctionTypeArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, MojoParserRULE_functionTypeArguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1926)
		p.FunctionTypeArgument()
	}
	p.SetState(1938)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 264, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1927)
				p.Eov()
			}
			p.SetState(1931)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1928)
					p.Match(MojoParserEOL)
				}

				p.SetState(1933)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1934)
				p.FunctionTypeArgument()
			}

		}
		p.SetState(1940)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 264, p.GetParserRuleContext())
	}
	p.SetState(1942)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserCOMMA || _la == MojoParserEOL {
		{
			p.SetState(1941)
			p.Eov()
		}

	}

	return localctx
}

// IFunctionTypeArgumentContext is an interface to support dynamic dispatch.
type IFunctionTypeArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeArgumentContext differentiates from other interfaces.
	IsFunctionTypeArgumentContext()
}

type FunctionTypeArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeArgumentContext() *FunctionTypeArgumentContext {
	var p = new(FunctionTypeArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionTypeArgument
	return p
}

func (*FunctionTypeArgumentContext) IsFunctionTypeArgumentContext() {}

func NewFunctionTypeArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeArgumentContext {
	var p = new(FunctionTypeArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionTypeArgument

	return p
}

func (s *FunctionTypeArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeArgumentContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *FunctionTypeArgumentContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *FunctionTypeArgumentContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FunctionTypeArgumentContext) ELLIPSIS() antlr.TerminalNode {
	return s.GetToken(MojoParserELLIPSIS, 0)
}

func (s *FunctionTypeArgumentContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *FunctionTypeArgumentContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *FunctionTypeArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionTypeArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionTypeArgument() (localctx IFunctionTypeArgumentContext) {
	localctx = NewFunctionTypeArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, MojoParserRULE_functionTypeArgument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1954)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 267, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1944)
			p.LabelIdentifier()
		}
		{
			p.SetState(1945)
			p.Match(MojoParserCOLON)
		}
		{
			p.SetState(1946)
			p.type_(0)
		}
		{
			p.SetState(1947)
			p.Match(MojoParserELLIPSIS)
		}
		p.SetState(1949)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserAT {
			{
				p.SetState(1948)
				p.Attributes()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1951)
			p.LabelIdentifier()
		}
		{
			p.SetState(1952)
			p.TypeAnnotation()
		}

	}

	return localctx
}

// IArrayTypeContext is an interface to support dynamic dispatch.
type IArrayTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayTypeContext differentiates from other interfaces.
	IsArrayTypeContext()
}

type ArrayTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayTypeContext() *ArrayTypeContext {
	var p = new(ArrayTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrayType
	return p
}

func (*ArrayTypeContext) IsArrayTypeContext() {}

func NewArrayTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayTypeContext {
	var p = new(ArrayTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrayType

	return p
}

func (s *ArrayTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayTypeContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserLBRACK, 0)
}

func (s *ArrayTypeContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ArrayTypeContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserRBRACK, 0)
}

func (s *ArrayTypeContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *ArrayTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrayType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrayType() (localctx IArrayTypeContext) {
	localctx = NewArrayTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, MojoParserRULE_arrayType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1956)
		p.Match(MojoParserLBRACK)
	}
	{
		p.SetState(1957)
		p.type_(0)
	}
	p.SetState(1959)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(1958)
			p.Attributes()
		}

	}
	{
		p.SetState(1961)
		p.Match(MojoParserRBRACK)
	}

	return localctx
}

// IDictionaryTypeContext is an interface to support dynamic dispatch.
type IDictionaryTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDictionaryTypeContext differentiates from other interfaces.
	IsDictionaryTypeContext()
}

type DictionaryTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryTypeContext() *DictionaryTypeContext {
	var p = new(DictionaryTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_dictionaryType
	return p
}

func (*DictionaryTypeContext) IsDictionaryTypeContext() {}

func NewDictionaryTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryTypeContext {
	var p = new(DictionaryTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_dictionaryType

	return p
}

func (s *DictionaryTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryTypeContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *DictionaryTypeContext) AllType_() []IType_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_Context)(nil)).Elem())
	var tst = make([]IType_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_Context)
		}
	}

	return tst
}

func (s *DictionaryTypeContext) Type_(i int) IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *DictionaryTypeContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *DictionaryTypeContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *DictionaryTypeContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *DictionaryTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDictionaryType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) DictionaryType() (localctx IDictionaryTypeContext) {
	localctx = NewDictionaryTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, MojoParserRULE_dictionaryType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1963)
		p.Match(MojoParserLCURLY)
	}
	{
		p.SetState(1964)
		p.type_(0)
	}
	{
		p.SetState(1965)
		p.Match(MojoParserCOLON)
	}
	{
		p.SetState(1966)
		p.type_(0)
	}
	p.SetState(1968)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(1967)
			p.Attributes()
		}

	}
	{
		p.SetState(1970)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// ITypeInheritanceClauseContext is an interface to support dynamic dispatch.
type ITypeInheritanceClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeInheritanceClauseContext differentiates from other interfaces.
	IsTypeInheritanceClauseContext()
}

type TypeInheritanceClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeInheritanceClauseContext() *TypeInheritanceClauseContext {
	var p = new(TypeInheritanceClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeInheritanceClause
	return p
}

func (*TypeInheritanceClauseContext) IsTypeInheritanceClauseContext() {}

func NewTypeInheritanceClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeInheritanceClauseContext {
	var p = new(TypeInheritanceClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeInheritanceClause

	return p
}

func (s *TypeInheritanceClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeInheritanceClauseContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *TypeInheritanceClauseContext) TypeInheritances() ITypeInheritancesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeInheritancesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeInheritancesContext)
}

func (s *TypeInheritanceClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TypeInheritanceClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TypeInheritanceClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeInheritanceClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeInheritanceClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeInheritanceClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeInheritanceClause() (localctx ITypeInheritanceClauseContext) {
	localctx = NewTypeInheritanceClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, MojoParserRULE_typeInheritanceClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1972)
		p.Match(MojoParserCOLON)
	}
	p.SetState(1976)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1973)
			p.Match(MojoParserEOL)
		}

		p.SetState(1978)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1979)
		p.TypeInheritances()
	}

	return localctx
}

// ITypeInheritancesContext is an interface to support dynamic dispatch.
type ITypeInheritancesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeInheritancesContext differentiates from other interfaces.
	IsTypeInheritancesContext()
}

type TypeInheritancesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeInheritancesContext() *TypeInheritancesContext {
	var p = new(TypeInheritancesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeInheritances
	return p
}

func (*TypeInheritancesContext) IsTypeInheritancesContext() {}

func NewTypeInheritancesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeInheritancesContext {
	var p = new(TypeInheritancesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeInheritances

	return p
}

func (s *TypeInheritancesContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeInheritancesContext) AllTypeInheritance() []ITypeInheritanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeInheritanceContext)(nil)).Elem())
	var tst = make([]ITypeInheritanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeInheritanceContext)
		}
	}

	return tst
}

func (s *TypeInheritancesContext) TypeInheritance(i int) ITypeInheritanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeInheritanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeInheritanceContext)
}

func (s *TypeInheritancesContext) AllEovWithDocument() []IEovWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem())
	var tst = make([]IEovWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovWithDocumentContext)
		}
	}

	return tst
}

func (s *TypeInheritancesContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *TypeInheritancesContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TypeInheritancesContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TypeInheritancesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeInheritancesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeInheritancesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeInheritances(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeInheritances() (localctx ITypeInheritancesContext) {
	localctx = NewTypeInheritancesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, MojoParserRULE_typeInheritances)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1981)
		p.TypeInheritance()
	}
	p.SetState(1993)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 272, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1982)
				p.EovWithDocument()
			}
			p.SetState(1986)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1983)
					p.Match(MojoParserEOL)
				}

				p.SetState(1988)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1989)
				p.TypeInheritance()
			}

		}
		p.SetState(1995)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 272, p.GetParserRuleContext())
	}
	p.SetState(1997)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1996)
			p.EovWithDocument()
		}

	}

	return localctx
}

// ITypeInheritanceContext is an interface to support dynamic dispatch.
type ITypeInheritanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeInheritanceContext differentiates from other interfaces.
	IsTypeInheritanceContext()
}

type TypeInheritanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeInheritanceContext() *TypeInheritanceContext {
	var p = new(TypeInheritanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeInheritance
	return p
}

func (*TypeInheritanceContext) IsTypeInheritanceContext() {}

func NewTypeInheritanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeInheritanceContext {
	var p = new(TypeInheritanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeInheritance

	return p
}

func (s *TypeInheritanceContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeInheritanceContext) TypeIdentifier() ITypeIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeIdentifierContext)
}

func (s *TypeInheritanceContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *TypeInheritanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeInheritanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeInheritanceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeInheritance(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeInheritance() (localctx ITypeInheritanceContext) {
	localctx = NewTypeInheritanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, MojoParserRULE_typeInheritance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1999)
		p.TypeIdentifier()
	}
	p.SetState(2001)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(2000)
			p.Attributes()
		}

	}

	return localctx
}

// IDeclarationIdentifierContext is an interface to support dynamic dispatch.
type IDeclarationIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationIdentifierContext differentiates from other interfaces.
	IsDeclarationIdentifierContext()
}

type DeclarationIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationIdentifierContext() *DeclarationIdentifierContext {
	var p = new(DeclarationIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_declarationIdentifier
	return p
}

func (*DeclarationIdentifierContext) IsDeclarationIdentifierContext() {}

func NewDeclarationIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationIdentifierContext {
	var p = new(DeclarationIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_declarationIdentifier

	return p
}

func (s *DeclarationIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationIdentifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(MojoParserIdentifier, 0)
}

func (s *DeclarationIdentifierContext) Keyword_as_identifier_in_declarations() IKeyword_as_identifier_in_declarationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyword_as_identifier_in_declarationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyword_as_identifier_in_declarationsContext)
}

func (s *DeclarationIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDeclarationIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) DeclarationIdentifier() (localctx IDeclarationIdentifierContext) {
	localctx = NewDeclarationIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, MojoParserRULE_declarationIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2005)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2003)
			p.Match(MojoParserIdentifier)
		}

	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_CONTINUE, MojoParserKEYWORD_ELSE, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FALSE, MojoParserKEYWORD_FOR, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IF, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_IS, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_OR, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_RETURN, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TRUE, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_VAR, MojoParserKEYWORD_WHILE, MojoParserKEYWORD_XOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2004)
			p.Keyword_as_identifier_in_declarations()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILabelIdentifierContext is an interface to support dynamic dispatch.
type ILabelIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelIdentifierContext differentiates from other interfaces.
	IsLabelIdentifierContext()
}

type LabelIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelIdentifierContext() *LabelIdentifierContext {
	var p = new(LabelIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_labelIdentifier
	return p
}

func (*LabelIdentifierContext) IsLabelIdentifierContext() {}

func NewLabelIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelIdentifierContext {
	var p = new(LabelIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_labelIdentifier

	return p
}

func (s *LabelIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelIdentifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(MojoParserIdentifier, 0)
}

func (s *LabelIdentifierContext) Keyword_as_identifier_in_labels() IKeyword_as_identifier_in_labelsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyword_as_identifier_in_labelsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyword_as_identifier_in_labelsContext)
}

func (s *LabelIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLabelIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) LabelIdentifier() (localctx ILabelIdentifierContext) {
	localctx = NewLabelIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, MojoParserRULE_labelIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2009)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2007)
			p.Match(MojoParserIdentifier)
		}

	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_CONTINUE, MojoParserKEYWORD_ELSE, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FALSE, MojoParserKEYWORD_FOR, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IF, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_IS, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_OR, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_RETURN, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TRUE, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_VAR, MojoParserKEYWORD_WHILE, MojoParserKEYWORD_XOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2008)
			p.Keyword_as_identifier_in_labels()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPath_identifierContext is an interface to support dynamic dispatch.
type IPath_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPath_identifierContext differentiates from other interfaces.
	IsPath_identifierContext()
}

type Path_identifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_identifierContext() *Path_identifierContext {
	var p = new(Path_identifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_path_identifier
	return p
}

func (*Path_identifierContext) IsPath_identifierContext() {}

func NewPath_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_identifierContext {
	var p = new(Path_identifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_path_identifier

	return p
}

func (s *Path_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_identifierContext) AllDeclarationIdentifier() []IDeclarationIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem())
	var tst = make([]IDeclarationIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclarationIdentifierContext)
		}
	}

	return tst
}

func (s *Path_identifierContext) DeclarationIdentifier(i int) IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *Path_identifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserDOT)
}

func (s *Path_identifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, i)
}

func (s *Path_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPath_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Path_identifier() (localctx IPath_identifierContext) {
	localctx = NewPath_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, MojoParserRULE_path_identifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2011)
		p.DeclarationIdentifier()
	}
	p.SetState(2016)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserDOT {
		{
			p.SetState(2012)
			p.Match(MojoParserDOT)
		}
		{
			p.SetState(2013)
			p.DeclarationIdentifier()
		}

		p.SetState(2018)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(MojoParserIdentifier, 0)
}

func (s *IdentifierContext) Implicit_parameter_name() antlr.TerminalNode {
	return s.GetToken(MojoParserImplicit_parameter_name, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, MojoParserRULE_identifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2019)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserIdentifier || _la == MojoParserImplicit_parameter_name) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IKeyword_as_identifier_in_declarationsContext is an interface to support dynamic dispatch.
type IKeyword_as_identifier_in_declarationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyword_as_identifier_in_declarationsContext differentiates from other interfaces.
	IsKeyword_as_identifier_in_declarationsContext()
}

type Keyword_as_identifier_in_declarationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyword_as_identifier_in_declarationsContext() *Keyword_as_identifier_in_declarationsContext {
	var p = new(Keyword_as_identifier_in_declarationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_keyword_as_identifier_in_declarations
	return p
}

func (*Keyword_as_identifier_in_declarationsContext) IsKeyword_as_identifier_in_declarationsContext() {
}

func NewKeyword_as_identifier_in_declarationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Keyword_as_identifier_in_declarationsContext {
	var p = new(Keyword_as_identifier_in_declarationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_keyword_as_identifier_in_declarations

	return p
}

func (s *Keyword_as_identifier_in_declarationsContext) GetParser() antlr.Parser { return s.parser }

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_AND() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AND, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ATTRIBUTE, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_BREAK() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_BREAK, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_CONST() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONST, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_CONTINUE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONTINUE, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_ELSE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ELSE, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_ENUM() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ENUM, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_FALSE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FALSE, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_FOR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FOR, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_FUNC() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FUNC, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_IF() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IF, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_IMPORT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IMPORT, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_IN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IN, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_INTERFACE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_INTERFACE, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_IS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IS, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_MATCH() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_MATCH, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_NOT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NOT, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_NULL() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NULL, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_OR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_OR, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_PACKAGE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_PACKAGE, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_REPEATE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_REPEATE, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_RETURN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_RETURN, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_STRUCT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_STRUCT, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_TRUE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TRUE, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_TYPE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TYPE, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_VAR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_VAR, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_WHILE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_WHILE, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) KEYWORD_XOR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_XOR, 0)
}

func (s *Keyword_as_identifier_in_declarationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Keyword_as_identifier_in_declarationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Keyword_as_identifier_in_declarationsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitKeyword_as_identifier_in_declarations(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Keyword_as_identifier_in_declarations() (localctx IKeyword_as_identifier_in_declarationsContext) {
	localctx = NewKeyword_as_identifier_in_declarationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, MojoParserRULE_keyword_as_identifier_in_declarations)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2021)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MojoParserKEYWORD_AND)|(1<<MojoParserKEYWORD_AS)|(1<<MojoParserKEYWORD_ATTRIBUTE)|(1<<MojoParserKEYWORD_BREAK)|(1<<MojoParserKEYWORD_CONST)|(1<<MojoParserKEYWORD_CONTINUE)|(1<<MojoParserKEYWORD_ELSE)|(1<<MojoParserKEYWORD_ENUM)|(1<<MojoParserKEYWORD_FALSE)|(1<<MojoParserKEYWORD_FOR)|(1<<MojoParserKEYWORD_FUNC)|(1<<MojoParserKEYWORD_IF)|(1<<MojoParserKEYWORD_IMPORT)|(1<<MojoParserKEYWORD_IN)|(1<<MojoParserKEYWORD_INTERFACE)|(1<<MojoParserKEYWORD_IS)|(1<<MojoParserKEYWORD_MATCH)|(1<<MojoParserKEYWORD_NOT)|(1<<MojoParserKEYWORD_NULL)|(1<<MojoParserKEYWORD_OR)|(1<<MojoParserKEYWORD_PACKAGE)|(1<<MojoParserKEYWORD_REPEATE)|(1<<MojoParserKEYWORD_RETURN)|(1<<MojoParserKEYWORD_STRUCT)|(1<<MojoParserKEYWORD_TRUE)|(1<<MojoParserKEYWORD_TYPE)|(1<<MojoParserKEYWORD_VAR)|(1<<MojoParserKEYWORD_WHILE)|(1<<MojoParserKEYWORD_XOR))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IKeyword_as_identifier_in_labelsContext is an interface to support dynamic dispatch.
type IKeyword_as_identifier_in_labelsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyword_as_identifier_in_labelsContext differentiates from other interfaces.
	IsKeyword_as_identifier_in_labelsContext()
}

type Keyword_as_identifier_in_labelsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyword_as_identifier_in_labelsContext() *Keyword_as_identifier_in_labelsContext {
	var p = new(Keyword_as_identifier_in_labelsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_keyword_as_identifier_in_labels
	return p
}

func (*Keyword_as_identifier_in_labelsContext) IsKeyword_as_identifier_in_labelsContext() {}

func NewKeyword_as_identifier_in_labelsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Keyword_as_identifier_in_labelsContext {
	var p = new(Keyword_as_identifier_in_labelsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_keyword_as_identifier_in_labels

	return p
}

func (s *Keyword_as_identifier_in_labelsContext) GetParser() antlr.Parser { return s.parser }

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_AND() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AND, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ATTRIBUTE, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_BREAK() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_BREAK, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_CONST() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONST, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_CONTINUE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONTINUE, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_ELSE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ELSE, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_ENUM() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ENUM, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_FALSE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FALSE, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_FOR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FOR, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_FUNC() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FUNC, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_IF() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IF, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_IMPORT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IMPORT, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_IN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IN, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_INTERFACE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_INTERFACE, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_IS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IS, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_MATCH() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_MATCH, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_NOT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NOT, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_NULL() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NULL, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_OR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_OR, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_PACKAGE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_PACKAGE, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_REPEATE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_REPEATE, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_RETURN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_RETURN, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_STRUCT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_STRUCT, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_TRUE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TRUE, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_TYPE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TYPE, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_VAR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_VAR, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_WHILE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_WHILE, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) KEYWORD_XOR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_XOR, 0)
}

func (s *Keyword_as_identifier_in_labelsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Keyword_as_identifier_in_labelsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Keyword_as_identifier_in_labelsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitKeyword_as_identifier_in_labels(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Keyword_as_identifier_in_labels() (localctx IKeyword_as_identifier_in_labelsContext) {
	localctx = NewKeyword_as_identifier_in_labelsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, MojoParserRULE_keyword_as_identifier_in_labels)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2023)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MojoParserKEYWORD_AND)|(1<<MojoParserKEYWORD_AS)|(1<<MojoParserKEYWORD_ATTRIBUTE)|(1<<MojoParserKEYWORD_BREAK)|(1<<MojoParserKEYWORD_CONST)|(1<<MojoParserKEYWORD_CONTINUE)|(1<<MojoParserKEYWORD_ELSE)|(1<<MojoParserKEYWORD_ENUM)|(1<<MojoParserKEYWORD_FALSE)|(1<<MojoParserKEYWORD_FOR)|(1<<MojoParserKEYWORD_FUNC)|(1<<MojoParserKEYWORD_IF)|(1<<MojoParserKEYWORD_IMPORT)|(1<<MojoParserKEYWORD_IN)|(1<<MojoParserKEYWORD_INTERFACE)|(1<<MojoParserKEYWORD_IS)|(1<<MojoParserKEYWORD_MATCH)|(1<<MojoParserKEYWORD_NOT)|(1<<MojoParserKEYWORD_NULL)|(1<<MojoParserKEYWORD_OR)|(1<<MojoParserKEYWORD_PACKAGE)|(1<<MojoParserKEYWORD_REPEATE)|(1<<MojoParserKEYWORD_RETURN)|(1<<MojoParserKEYWORD_STRUCT)|(1<<MojoParserKEYWORD_TRUE)|(1<<MojoParserKEYWORD_TYPE)|(1<<MojoParserKEYWORD_VAR)|(1<<MojoParserKEYWORD_WHILE)|(1<<MojoParserKEYWORD_XOR))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDocumentContext is an interface to support dynamic dispatch.
type IDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDocumentContext differentiates from other interfaces.
	IsDocumentContext()
}

type DocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDocumentContext() *DocumentContext {
	var p = new(DocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_document
	return p
}

func (*DocumentContext) IsDocumentContext() {}

func NewDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DocumentContext {
	var p = new(DocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_document

	return p
}

func (s *DocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *DocumentContext) AllLineDocument() []antlr.TerminalNode {
	return s.GetTokens(MojoParserLineDocument)
}

func (s *DocumentContext) LineDocument(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserLineDocument, i)
}

func (s *DocumentContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *DocumentContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *DocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Document() (localctx IDocumentContext) {
	localctx = NewDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, MojoParserRULE_document)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2025)
		p.Match(MojoParserLineDocument)
	}
	p.SetState(2030)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 278, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2026)
				p.Match(MojoParserEOL)
			}
			{
				p.SetState(2027)
				p.Match(MojoParserLineDocument)
			}

		}
		p.SetState(2032)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 278, p.GetParserRuleContext())
	}
	{
		p.SetState(2033)
		p.Match(MojoParserEOL)
	}

	return localctx
}

// IFollowingDocumentContext is an interface to support dynamic dispatch.
type IFollowingDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFollowingDocumentContext differentiates from other interfaces.
	IsFollowingDocumentContext()
}

type FollowingDocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFollowingDocumentContext() *FollowingDocumentContext {
	var p = new(FollowingDocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_followingDocument
	return p
}

func (*FollowingDocumentContext) IsFollowingDocumentContext() {}

func NewFollowingDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FollowingDocumentContext {
	var p = new(FollowingDocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_followingDocument

	return p
}

func (s *FollowingDocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *FollowingDocumentContext) AllFollowingLineDocument() []antlr.TerminalNode {
	return s.GetTokens(MojoParserFollowingLineDocument)
}

func (s *FollowingDocumentContext) FollowingLineDocument(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserFollowingLineDocument, i)
}

func (s *FollowingDocumentContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FollowingDocumentContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FollowingDocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FollowingDocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FollowingDocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFollowingDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FollowingDocument() (localctx IFollowingDocumentContext) {
	localctx = NewFollowingDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, MojoParserRULE_followingDocument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2035)
		p.Match(MojoParserFollowingLineDocument)
	}
	p.SetState(2040)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 279, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2036)
				p.Match(MojoParserEOL)
			}
			{
				p.SetState(2037)
				p.Match(MojoParserFollowingLineDocument)
			}

		}
		p.SetState(2042)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 279, p.GetParserRuleContext())
	}

	return localctx
}

// IAssignmentOperatorContext is an interface to support dynamic dispatch.
type IAssignmentOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentOperatorContext differentiates from other interfaces.
	IsAssignmentOperatorContext()
}

type AssignmentOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentOperatorContext() *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_assignmentOperator
	return p
}

func (*AssignmentOperatorContext) IsAssignmentOperatorContext() {}

func NewAssignmentOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_assignmentOperator

	return p
}

func (s *AssignmentOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentOperatorContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(MojoParserEQUAL, 0)
}

func (s *AssignmentOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAssignmentOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AssignmentOperator() (localctx IAssignmentOperatorContext) {
	localctx = NewAssignmentOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, MojoParserRULE_assignmentOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2043)
		p.Match(MojoParserEQUAL)
	}

	return localctx
}

// INegatePrefixOperatorContext is an interface to support dynamic dispatch.
type INegatePrefixOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNegatePrefixOperatorContext differentiates from other interfaces.
	IsNegatePrefixOperatorContext()
}

type NegatePrefixOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNegatePrefixOperatorContext() *NegatePrefixOperatorContext {
	var p = new(NegatePrefixOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_negatePrefixOperator
	return p
}

func (*NegatePrefixOperatorContext) IsNegatePrefixOperatorContext() {}

func NewNegatePrefixOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NegatePrefixOperatorContext {
	var p = new(NegatePrefixOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_negatePrefixOperator

	return p
}

func (s *NegatePrefixOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *NegatePrefixOperatorContext) SUB() antlr.TerminalNode {
	return s.GetToken(MojoParserSUB, 0)
}

func (s *NegatePrefixOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NegatePrefixOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NegatePrefixOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitNegatePrefixOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) NegatePrefixOperator() (localctx INegatePrefixOperatorContext) {
	localctx = NewNegatePrefixOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, MojoParserRULE_negatePrefixOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2045)
		p.Match(MojoParserSUB)
	}

	return localctx
}

// ICompilation_condition_ANDContext is an interface to support dynamic dispatch.
type ICompilation_condition_ANDContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompilation_condition_ANDContext differentiates from other interfaces.
	IsCompilation_condition_ANDContext()
}

type Compilation_condition_ANDContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompilation_condition_ANDContext() *Compilation_condition_ANDContext {
	var p = new(Compilation_condition_ANDContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_compilation_condition_AND
	return p
}

func (*Compilation_condition_ANDContext) IsCompilation_condition_ANDContext() {}

func NewCompilation_condition_ANDContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compilation_condition_ANDContext {
	var p = new(Compilation_condition_ANDContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_compilation_condition_AND

	return p
}

func (s *Compilation_condition_ANDContext) GetParser() antlr.Parser { return s.parser }

func (s *Compilation_condition_ANDContext) AllAND() []antlr.TerminalNode {
	return s.GetTokens(MojoParserAND)
}

func (s *Compilation_condition_ANDContext) AND(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserAND, i)
}

func (s *Compilation_condition_ANDContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compilation_condition_ANDContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compilation_condition_ANDContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitCompilation_condition_AND(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Compilation_condition_AND() (localctx ICompilation_condition_ANDContext) {
	localctx = NewCompilation_condition_ANDContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, MojoParserRULE_compilation_condition_AND)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2047)
		p.Match(MojoParserAND)
	}
	{
		p.SetState(2048)
		p.Match(MojoParserAND)
	}

	return localctx
}

// ICompilation_condition_ORContext is an interface to support dynamic dispatch.
type ICompilation_condition_ORContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompilation_condition_ORContext differentiates from other interfaces.
	IsCompilation_condition_ORContext()
}

type Compilation_condition_ORContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompilation_condition_ORContext() *Compilation_condition_ORContext {
	var p = new(Compilation_condition_ORContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_compilation_condition_OR
	return p
}

func (*Compilation_condition_ORContext) IsCompilation_condition_ORContext() {}

func NewCompilation_condition_ORContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compilation_condition_ORContext {
	var p = new(Compilation_condition_ORContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_compilation_condition_OR

	return p
}

func (s *Compilation_condition_ORContext) GetParser() antlr.Parser { return s.parser }

func (s *Compilation_condition_ORContext) AllOR() []antlr.TerminalNode {
	return s.GetTokens(MojoParserOR)
}

func (s *Compilation_condition_ORContext) OR(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserOR, i)
}

func (s *Compilation_condition_ORContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compilation_condition_ORContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compilation_condition_ORContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitCompilation_condition_OR(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Compilation_condition_OR() (localctx ICompilation_condition_ORContext) {
	localctx = NewCompilation_condition_ORContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, MojoParserRULE_compilation_condition_OR)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2050)
		p.Match(MojoParserOR)
	}
	{
		p.SetState(2051)
		p.Match(MojoParserOR)
	}

	return localctx
}

// ICompilation_condition_GEContext is an interface to support dynamic dispatch.
type ICompilation_condition_GEContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompilation_condition_GEContext differentiates from other interfaces.
	IsCompilation_condition_GEContext()
}

type Compilation_condition_GEContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompilation_condition_GEContext() *Compilation_condition_GEContext {
	var p = new(Compilation_condition_GEContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_compilation_condition_GE
	return p
}

func (*Compilation_condition_GEContext) IsCompilation_condition_GEContext() {}

func NewCompilation_condition_GEContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compilation_condition_GEContext {
	var p = new(Compilation_condition_GEContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_compilation_condition_GE

	return p
}

func (s *Compilation_condition_GEContext) GetParser() antlr.Parser { return s.parser }

func (s *Compilation_condition_GEContext) GT() antlr.TerminalNode {
	return s.GetToken(MojoParserGT, 0)
}

func (s *Compilation_condition_GEContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(MojoParserEQUAL, 0)
}

func (s *Compilation_condition_GEContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compilation_condition_GEContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compilation_condition_GEContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitCompilation_condition_GE(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Compilation_condition_GE() (localctx ICompilation_condition_GEContext) {
	localctx = NewCompilation_condition_GEContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, MojoParserRULE_compilation_condition_GE)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2053)
		p.Match(MojoParserGT)
	}
	{
		p.SetState(2054)
		p.Match(MojoParserEQUAL)
	}

	return localctx
}

// IArrowOperatorContext is an interface to support dynamic dispatch.
type IArrowOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowOperatorContext differentiates from other interfaces.
	IsArrowOperatorContext()
}

type ArrowOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowOperatorContext() *ArrowOperatorContext {
	var p = new(ArrowOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrowOperator
	return p
}

func (*ArrowOperatorContext) IsArrowOperatorContext() {}

func NewArrowOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowOperatorContext {
	var p = new(ArrowOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrowOperator

	return p
}

func (s *ArrowOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowOperatorContext) RIGHT_ARROW() antlr.TerminalNode {
	return s.GetToken(MojoParserRIGHT_ARROW, 0)
}

func (s *ArrowOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrowOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrowOperator() (localctx IArrowOperatorContext) {
	localctx = NewArrowOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, MojoParserRULE_arrowOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2056)
		p.Match(MojoParserRIGHT_ARROW)
	}

	return localctx
}

// IRange_operatorContext is an interface to support dynamic dispatch.
type IRange_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRange_operatorContext differentiates from other interfaces.
	IsRange_operatorContext()
}

type Range_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRange_operatorContext() *Range_operatorContext {
	var p = new(Range_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_range_operator
	return p
}

func (*Range_operatorContext) IsRange_operatorContext() {}

func NewRange_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Range_operatorContext {
	var p = new(Range_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_range_operator

	return p
}

func (s *Range_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Range_operatorContext) DOT_DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT_DOT, 0)
}

func (s *Range_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Range_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Range_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitRange_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Range_operator() (localctx IRange_operatorContext) {
	localctx = NewRange_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, MojoParserRULE_range_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2058)
		p.Match(MojoParserDOT_DOT)
	}

	return localctx
}

// IRange_right_open_operatorContext is an interface to support dynamic dispatch.
type IRange_right_open_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRange_right_open_operatorContext differentiates from other interfaces.
	IsRange_right_open_operatorContext()
}

type Range_right_open_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRange_right_open_operatorContext() *Range_right_open_operatorContext {
	var p = new(Range_right_open_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_range_right_open_operator
	return p
}

func (*Range_right_open_operatorContext) IsRange_right_open_operatorContext() {}

func NewRange_right_open_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Range_right_open_operatorContext {
	var p = new(Range_right_open_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_range_right_open_operator

	return p
}

func (s *Range_right_open_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Range_right_open_operatorContext) DOT_DOT_LT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT_DOT_LT, 0)
}

func (s *Range_right_open_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Range_right_open_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Range_right_open_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitRange_right_open_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Range_right_open_operator() (localctx IRange_right_open_operatorContext) {
	localctx = NewRange_right_open_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, MojoParserRULE_range_right_open_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2060)
		p.Match(MojoParserDOT_DOT_LT)
	}

	return localctx
}

// ISame_type_equalsContext is an interface to support dynamic dispatch.
type ISame_type_equalsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSame_type_equalsContext differentiates from other interfaces.
	IsSame_type_equalsContext()
}

type Same_type_equalsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySame_type_equalsContext() *Same_type_equalsContext {
	var p = new(Same_type_equalsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_same_type_equals
	return p
}

func (*Same_type_equalsContext) IsSame_type_equalsContext() {}

func NewSame_type_equalsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Same_type_equalsContext {
	var p = new(Same_type_equalsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_same_type_equals

	return p
}

func (s *Same_type_equalsContext) GetParser() antlr.Parser { return s.parser }

func (s *Same_type_equalsContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEQUAL)
}

func (s *Same_type_equalsContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEQUAL, i)
}

func (s *Same_type_equalsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Same_type_equalsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Same_type_equalsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitSame_type_equals(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Same_type_equals() (localctx ISame_type_equalsContext) {
	localctx = NewSame_type_equalsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, MojoParserRULE_same_type_equals)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2062)
		p.Match(MojoParserEQUAL)
	}
	{
		p.SetState(2063)
		p.Match(MojoParserEQUAL)
	}

	return localctx
}

// IBinaryOperatorContext is an interface to support dynamic dispatch.
type IBinaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinaryOperatorContext differentiates from other interfaces.
	IsBinaryOperatorContext()
}

type BinaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinaryOperatorContext() *BinaryOperatorContext {
	var p = new(BinaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_binaryOperator
	return p
}

func (*BinaryOperatorContext) IsBinaryOperatorContext() {}

func NewBinaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BinaryOperatorContext {
	var p = new(BinaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_binaryOperator

	return p
}

func (s *BinaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *BinaryOperatorContext) Operator() IOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *BinaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BinaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBinaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BinaryOperator() (localctx IBinaryOperatorContext) {
	localctx = NewBinaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, MojoParserRULE_binaryOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2065)
		p.Operator()
	}

	return localctx
}

// IPrefixOperatorContext is an interface to support dynamic dispatch.
type IPrefixOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixOperatorContext differentiates from other interfaces.
	IsPrefixOperatorContext()
}

type PrefixOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixOperatorContext() *PrefixOperatorContext {
	var p = new(PrefixOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_prefixOperator
	return p
}

func (*PrefixOperatorContext) IsPrefixOperatorContext() {}

func NewPrefixOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixOperatorContext {
	var p = new(PrefixOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_prefixOperator

	return p
}

func (s *PrefixOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixOperatorContext) Operator() IOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *PrefixOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrefixOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrefixOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PrefixOperator() (localctx IPrefixOperatorContext) {
	localctx = NewPrefixOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, MojoParserRULE_prefixOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2067)
		p.Operator()
	}

	return localctx
}

// IPostfixOperatorContext is an interface to support dynamic dispatch.
type IPostfixOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixOperatorContext differentiates from other interfaces.
	IsPostfixOperatorContext()
}

type PostfixOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixOperatorContext() *PostfixOperatorContext {
	var p = new(PostfixOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_postfixOperator
	return p
}

func (*PostfixOperatorContext) IsPostfixOperatorContext() {}

func NewPostfixOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixOperatorContext {
	var p = new(PostfixOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_postfixOperator

	return p
}

func (s *PostfixOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixOperatorContext) Operator() IOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *PostfixOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostfixOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPostfixOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PostfixOperator() (localctx IPostfixOperatorContext) {
	localctx = NewPostfixOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, MojoParserRULE_postfixOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2069)
		p.Operator()
	}

	return localctx
}

// IOperatorContext is an interface to support dynamic dispatch.
type IOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperatorContext differentiates from other interfaces.
	IsOperatorContext()
}

type OperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperatorContext() *OperatorContext {
	var p = new(OperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_operator
	return p
}

func (*OperatorContext) IsOperatorContext() {}

func NewOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperatorContext {
	var p = new(OperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_operator

	return p
}

func (s *OperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *OperatorContext) Operator_head() IOperator_headContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_headContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_headContext)
}

func (s *OperatorContext) AllOperator_character() []IOperator_characterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOperator_characterContext)(nil)).Elem())
	var tst = make([]IOperator_characterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOperator_characterContext)
		}
	}

	return tst
}

func (s *OperatorContext) Operator_character(i int) IOperator_characterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_characterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOperator_characterContext)
}

func (s *OperatorContext) Dot_operator_head() IDot_operator_headContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDot_operator_headContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDot_operator_headContext)
}

func (s *OperatorContext) AllDot_operator_character() []IDot_operator_characterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDot_operator_characterContext)(nil)).Elem())
	var tst = make([]IDot_operator_characterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDot_operator_characterContext)
		}
	}

	return tst
}

func (s *OperatorContext) Dot_operator_character(i int) IDot_operator_characterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDot_operator_characterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDot_operator_characterContext)
}

func (s *OperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Operator() (localctx IOperatorContext) {
	localctx = NewOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, MojoParserRULE_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2085)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserSUB, MojoParserEQUAL, MojoParserOR, MojoParserDIV, MojoParserADD, MojoParserMUL, MojoParserMOD, MojoParserCARET, MojoParserTILDE, MojoParserOperator_head_other:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2071)
			p.Operator_head()
		}
		p.SetState(2075)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 280, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2072)
					p.Operator_character()
				}

			}
			p.SetState(2077)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 280, p.GetParserRuleContext())
		}

	case MojoParserDOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2078)
			p.Dot_operator_head()
		}
		p.SetState(2082)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 281, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2079)
					p.Dot_operator_character()
				}

			}
			p.SetState(2084)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 281, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOperator_characterContext is an interface to support dynamic dispatch.
type IOperator_characterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_characterContext differentiates from other interfaces.
	IsOperator_characterContext()
}

type Operator_characterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_characterContext() *Operator_characterContext {
	var p = new(Operator_characterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_operator_character
	return p
}

func (*Operator_characterContext) IsOperator_characterContext() {}

func NewOperator_characterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_characterContext {
	var p = new(Operator_characterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_operator_character

	return p
}

func (s *Operator_characterContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_characterContext) Operator_head() IOperator_headContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_headContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_headContext)
}

func (s *Operator_characterContext) Operator_following_character() antlr.TerminalNode {
	return s.GetToken(MojoParserOperator_following_character, 0)
}

func (s *Operator_characterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_characterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_characterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOperator_character(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Operator_character() (localctx IOperator_characterContext) {
	localctx = NewOperator_characterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, MojoParserRULE_operator_character)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2089)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserSUB, MojoParserEQUAL, MojoParserOR, MojoParserDIV, MojoParserADD, MojoParserMUL, MojoParserMOD, MojoParserCARET, MojoParserTILDE, MojoParserOperator_head_other:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2087)
			p.Operator_head()
		}

	case MojoParserOperator_following_character:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2088)
			p.Match(MojoParserOperator_following_character)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOperator_headContext is an interface to support dynamic dispatch.
type IOperator_headContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_headContext differentiates from other interfaces.
	IsOperator_headContext()
}

type Operator_headContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_headContext() *Operator_headContext {
	var p = new(Operator_headContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_operator_head
	return p
}

func (*Operator_headContext) IsOperator_headContext() {}

func NewOperator_headContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_headContext {
	var p = new(Operator_headContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_operator_head

	return p
}

func (s *Operator_headContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_headContext) DIV() antlr.TerminalNode {
	return s.GetToken(MojoParserDIV, 0)
}

func (s *Operator_headContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(MojoParserEQUAL, 0)
}

func (s *Operator_headContext) SUB() antlr.TerminalNode {
	return s.GetToken(MojoParserSUB, 0)
}

func (s *Operator_headContext) ADD() antlr.TerminalNode {
	return s.GetToken(MojoParserADD, 0)
}

func (s *Operator_headContext) BANG() antlr.TerminalNode {
	return s.GetToken(MojoParserBANG, 0)
}

func (s *Operator_headContext) MUL() antlr.TerminalNode {
	return s.GetToken(MojoParserMUL, 0)
}

func (s *Operator_headContext) MOD() antlr.TerminalNode {
	return s.GetToken(MojoParserMOD, 0)
}

func (s *Operator_headContext) AND() antlr.TerminalNode {
	return s.GetToken(MojoParserAND, 0)
}

func (s *Operator_headContext) OR() antlr.TerminalNode {
	return s.GetToken(MojoParserOR, 0)
}

func (s *Operator_headContext) LT() antlr.TerminalNode {
	return s.GetToken(MojoParserLT, 0)
}

func (s *Operator_headContext) GT() antlr.TerminalNode {
	return s.GetToken(MojoParserGT, 0)
}

func (s *Operator_headContext) CARET() antlr.TerminalNode {
	return s.GetToken(MojoParserCARET, 0)
}

func (s *Operator_headContext) TILDE() antlr.TerminalNode {
	return s.GetToken(MojoParserTILDE, 0)
}

func (s *Operator_headContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(MojoParserQUESTION, 0)
}

func (s *Operator_headContext) Operator_head_other() antlr.TerminalNode {
	return s.GetToken(MojoParserOperator_head_other, 0)
}

func (s *Operator_headContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_headContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_headContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOperator_head(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Operator_head() (localctx IOperator_headContext) {
	localctx = NewOperator_headContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, MojoParserRULE_operator_head)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2093)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserSUB, MojoParserEQUAL, MojoParserOR, MojoParserDIV, MojoParserADD, MojoParserMUL, MojoParserMOD, MojoParserCARET, MojoParserTILDE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2091)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-40)&-(0x1f+1)) == 0 && ((1<<uint((_la-40)))&((1<<(MojoParserLT-40))|(1<<(MojoParserGT-40))|(1<<(MojoParserBANG-40))|(1<<(MojoParserQUESTION-40))|(1<<(MojoParserAND-40))|(1<<(MojoParserSUB-40))|(1<<(MojoParserEQUAL-40))|(1<<(MojoParserOR-40))|(1<<(MojoParserDIV-40))|(1<<(MojoParserADD-40))|(1<<(MojoParserMUL-40))|(1<<(MojoParserMOD-40))|(1<<(MojoParserCARET-40))|(1<<(MojoParserTILDE-40)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MojoParserOperator_head_other:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2092)
			p.Match(MojoParserOperator_head_other)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDot_operator_headContext is an interface to support dynamic dispatch.
type IDot_operator_headContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDot_operator_headContext differentiates from other interfaces.
	IsDot_operator_headContext()
}

type Dot_operator_headContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDot_operator_headContext() *Dot_operator_headContext {
	var p = new(Dot_operator_headContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_dot_operator_head
	return p
}

func (*Dot_operator_headContext) IsDot_operator_headContext() {}

func NewDot_operator_headContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dot_operator_headContext {
	var p = new(Dot_operator_headContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_dot_operator_head

	return p
}

func (s *Dot_operator_headContext) GetParser() antlr.Parser { return s.parser }

func (s *Dot_operator_headContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *Dot_operator_headContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dot_operator_headContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dot_operator_headContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDot_operator_head(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Dot_operator_head() (localctx IDot_operator_headContext) {
	localctx = NewDot_operator_headContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, MojoParserRULE_dot_operator_head)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2095)
		p.Match(MojoParserDOT)
	}

	return localctx
}

// IDot_operator_characterContext is an interface to support dynamic dispatch.
type IDot_operator_characterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDot_operator_characterContext differentiates from other interfaces.
	IsDot_operator_characterContext()
}

type Dot_operator_characterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDot_operator_characterContext() *Dot_operator_characterContext {
	var p = new(Dot_operator_characterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_dot_operator_character
	return p
}

func (*Dot_operator_characterContext) IsDot_operator_characterContext() {}

func NewDot_operator_characterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dot_operator_characterContext {
	var p = new(Dot_operator_characterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_dot_operator_character

	return p
}

func (s *Dot_operator_characterContext) GetParser() antlr.Parser { return s.parser }

func (s *Dot_operator_characterContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *Dot_operator_characterContext) Operator_character() IOperator_characterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_characterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_characterContext)
}

func (s *Dot_operator_characterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dot_operator_characterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dot_operator_characterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDot_operator_character(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Dot_operator_character() (localctx IDot_operator_characterContext) {
	localctx = NewDot_operator_characterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, MojoParserRULE_dot_operator_character)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2099)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserDOT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2097)
			p.Match(MojoParserDOT)
		}

	case MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserSUB, MojoParserEQUAL, MojoParserOR, MojoParserDIV, MojoParserADD, MojoParserMUL, MojoParserMOD, MojoParserCARET, MojoParserTILDE, MojoParserOperator_head_other, MojoParserOperator_following_character:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2098)
			p.Operator_character()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_literal
	return p
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) NumericLiteral() INumericLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumericLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumericLiteralContext)
}

func (s *LiteralContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *LiteralContext) BoolLiteral() antlr.TerminalNode {
	return s.GetToken(MojoParserBoolLiteral, 0)
}

func (s *LiteralContext) NullLiteral() antlr.TerminalNode {
	return s.GetToken(MojoParserNullLiteral, 0)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, MojoParserRULE_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2105)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserSUB, MojoParserBinaryLiteral, MojoParserOctalLiteral, MojoParserDecimalLiteral, MojoParserPureDecimalDigits, MojoParserHexadecimalLiteral, MojoParserFloatLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2101)
			p.NumericLiteral()
		}

	case MojoParserStaticStringLiteral, MojoParserInterpolatedStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2102)
			p.StringLiteral()
		}

	case MojoParserBoolLiteral:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2103)
			p.Match(MojoParserBoolLiteral)
		}

	case MojoParserNullLiteral:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2104)
			p.Match(MojoParserNullLiteral)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INumericLiteralContext is an interface to support dynamic dispatch.
type INumericLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumericLiteralContext differentiates from other interfaces.
	IsNumericLiteralContext()
}

type NumericLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumericLiteralContext() *NumericLiteralContext {
	var p = new(NumericLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_numericLiteral
	return p
}

func (*NumericLiteralContext) IsNumericLiteralContext() {}

func NewNumericLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericLiteralContext {
	var p = new(NumericLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_numericLiteral

	return p
}

func (s *NumericLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericLiteralContext) IntegerLiteral() IIntegerLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegerLiteralContext)
}

func (s *NumericLiteralContext) NegatePrefixOperator() INegatePrefixOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INegatePrefixOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INegatePrefixOperatorContext)
}

func (s *NumericLiteralContext) FloatLiteral() antlr.TerminalNode {
	return s.GetToken(MojoParserFloatLiteral, 0)
}

func (s *NumericLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitNumericLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) NumericLiteral() (localctx INumericLiteralContext) {
	localctx = NewNumericLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, MojoParserRULE_numericLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2115)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 289, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2108)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserSUB {
			{
				p.SetState(2107)
				p.NegatePrefixOperator()
			}

		}
		{
			p.SetState(2110)
			p.IntegerLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2112)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserSUB {
			{
				p.SetState(2111)
				p.NegatePrefixOperator()
			}

		}
		{
			p.SetState(2114)
			p.Match(MojoParserFloatLiteral)
		}

	}

	return localctx
}

// IIntegerLiteralContext is an interface to support dynamic dispatch.
type IIntegerLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntegerLiteralContext differentiates from other interfaces.
	IsIntegerLiteralContext()
}

type IntegerLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegerLiteralContext() *IntegerLiteralContext {
	var p = new(IntegerLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_integerLiteral
	return p
}

func (*IntegerLiteralContext) IsIntegerLiteralContext() {}

func NewIntegerLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntegerLiteralContext {
	var p = new(IntegerLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_integerLiteral

	return p
}

func (s *IntegerLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *IntegerLiteralContext) BinaryLiteral() antlr.TerminalNode {
	return s.GetToken(MojoParserBinaryLiteral, 0)
}

func (s *IntegerLiteralContext) OctalLiteral() antlr.TerminalNode {
	return s.GetToken(MojoParserOctalLiteral, 0)
}

func (s *IntegerLiteralContext) DecimalLiteral() antlr.TerminalNode {
	return s.GetToken(MojoParserDecimalLiteral, 0)
}

func (s *IntegerLiteralContext) PureDecimalDigits() antlr.TerminalNode {
	return s.GetToken(MojoParserPureDecimalDigits, 0)
}

func (s *IntegerLiteralContext) HexadecimalLiteral() antlr.TerminalNode {
	return s.GetToken(MojoParserHexadecimalLiteral, 0)
}

func (s *IntegerLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntegerLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIntegerLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) IntegerLiteral() (localctx IIntegerLiteralContext) {
	localctx = NewIntegerLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, MojoParserRULE_integerLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2117)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(MojoParserBinaryLiteral-71))|(1<<(MojoParserOctalLiteral-71))|(1<<(MojoParserDecimalLiteral-71))|(1<<(MojoParserPureDecimalDigits-71))|(1<<(MojoParserHexadecimalLiteral-71)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IStringLiteralContext is an interface to support dynamic dispatch.
type IStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringLiteralContext differentiates from other interfaces.
	IsStringLiteralContext()
}

type StringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringLiteralContext() *StringLiteralContext {
	var p = new(StringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_stringLiteral
	return p
}

func (*StringLiteralContext) IsStringLiteralContext() {}

func NewStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringLiteralContext {
	var p = new(StringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_stringLiteral

	return p
}

func (s *StringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StringLiteralContext) StaticStringLiteral() antlr.TerminalNode {
	return s.GetToken(MojoParserStaticStringLiteral, 0)
}

func (s *StringLiteralContext) InterpolatedStringLiteral() antlr.TerminalNode {
	return s.GetToken(MojoParserInterpolatedStringLiteral, 0)
}

func (s *StringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StringLiteral() (localctx IStringLiteralContext) {
	localctx = NewStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, MojoParserRULE_stringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2119)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserStaticStringLiteral || _la == MojoParserInterpolatedStringLiteral) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IEosContext is an interface to support dynamic dispatch.
type IEosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEosContext differentiates from other interfaces.
	IsEosContext()
}

type EosContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEosContext() *EosContext {
	var p = new(EosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_eos
	return p
}

func (*EosContext) IsEosContext() {}

func NewEosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EosContext {
	var p = new(EosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_eos

	return p
}

func (s *EosContext) GetParser() antlr.Parser { return s.parser }

func (s *EosContext) SEMI() antlr.TerminalNode {
	return s.GetToken(MojoParserSEMI, 0)
}

func (s *EosContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EosContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EosContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEos(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Eos() (localctx IEosContext) {
	localctx = NewEosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, MojoParserRULE_eos)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2127)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserSEMI:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2121)
			p.Match(MojoParserSEMI)
		}

	case MojoParserEOL:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2123)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(2122)
					p.Match(MojoParserEOL)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(2125)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 290, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEovContext is an interface to support dynamic dispatch.
type IEovContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEovContext differentiates from other interfaces.
	IsEovContext()
}

type EovContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEovContext() *EovContext {
	var p = new(EovContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_eov
	return p
}

func (*EovContext) IsEovContext() {}

func NewEovContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EovContext {
	var p = new(EovContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_eov

	return p
}

func (s *EovContext) GetParser() antlr.Parser { return s.parser }

func (s *EovContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, 0)
}

func (s *EovContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EovContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EovContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EovContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EovContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEov(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Eov() (localctx IEovContext) {
	localctx = NewEovContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, MojoParserRULE_eov)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2135)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserCOMMA:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2129)
			p.Match(MojoParserCOMMA)
		}

	case MojoParserEOL:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2131)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(2130)
					p.Match(MojoParserEOL)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(2133)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 292, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEosWithDocumentContext is an interface to support dynamic dispatch.
type IEosWithDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEosWithDocumentContext differentiates from other interfaces.
	IsEosWithDocumentContext()
}

type EosWithDocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEosWithDocumentContext() *EosWithDocumentContext {
	var p = new(EosWithDocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_eosWithDocument
	return p
}

func (*EosWithDocumentContext) IsEosWithDocumentContext() {}

func NewEosWithDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EosWithDocumentContext {
	var p = new(EosWithDocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_eosWithDocument

	return p
}

func (s *EosWithDocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *EosWithDocumentContext) SEMI() antlr.TerminalNode {
	return s.GetToken(MojoParserSEMI, 0)
}

func (s *EosWithDocumentContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *EosWithDocumentContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EosWithDocumentContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EosWithDocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EosWithDocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EosWithDocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEosWithDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EosWithDocument() (localctx IEosWithDocumentContext) {
	localctx = NewEosWithDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, MojoParserRULE_eosWithDocument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2161)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserSEMI:
		{
			p.SetState(2137)
			p.Match(MojoParserSEMI)
		}
		p.SetState(2145)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 295, p.GetParserRuleContext()) == 1 {
			p.SetState(2141)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(2138)
					p.Match(MojoParserEOL)
				}

				p.SetState(2143)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2144)
				p.FollowingDocument()
			}

		}

	case MojoParserEOL, MojoParserFollowingLineDocument:
		p.SetState(2154)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 297, p.GetParserRuleContext()) == 1 {
			p.SetState(2150)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(2147)
					p.Match(MojoParserEOL)
				}

				p.SetState(2152)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2153)
				p.FollowingDocument()
			}

		}
		p.SetState(2157)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(2156)
					p.Match(MojoParserEOL)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(2159)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 298, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEovWithDocumentContext is an interface to support dynamic dispatch.
type IEovWithDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEovWithDocumentContext differentiates from other interfaces.
	IsEovWithDocumentContext()
}

type EovWithDocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEovWithDocumentContext() *EovWithDocumentContext {
	var p = new(EovWithDocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_eovWithDocument
	return p
}

func (*EovWithDocumentContext) IsEovWithDocumentContext() {}

func NewEovWithDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EovWithDocumentContext {
	var p = new(EovWithDocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_eovWithDocument

	return p
}

func (s *EovWithDocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *EovWithDocumentContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, 0)
}

func (s *EovWithDocumentContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *EovWithDocumentContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EovWithDocumentContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EovWithDocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EovWithDocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EovWithDocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEovWithDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EovWithDocument() (localctx IEovWithDocumentContext) {
	localctx = NewEovWithDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, MojoParserRULE_eovWithDocument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2187)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserCOMMA:
		{
			p.SetState(2163)
			p.Match(MojoParserCOMMA)
		}
		p.SetState(2171)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 301, p.GetParserRuleContext()) == 1 {
			p.SetState(2167)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(2164)
					p.Match(MojoParserEOL)
				}

				p.SetState(2169)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2170)
				p.FollowingDocument()
			}

		}

	case MojoParserEOL, MojoParserFollowingLineDocument:
		p.SetState(2180)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 303, p.GetParserRuleContext()) == 1 {
			p.SetState(2176)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(2173)
					p.Match(MojoParserEOL)
				}

				p.SetState(2178)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2179)
				p.FollowingDocument()
			}

		}
		p.SetState(2183)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(2182)
					p.Match(MojoParserEOL)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(2185)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 304, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

func (p *MojoParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 74:
		var t *PatternContext = nil
		if localctx != nil {
			t = localctx.(*PatternContext)
		}
		return p.Pattern_Sempred(t, predIndex)

	case 107:
		var t *PostfixExpressionContext = nil
		if localctx != nil {
			t = localctx.(*PostfixExpressionContext)
		}
		return p.PostfixExpression_Sempred(t, predIndex)

	case 113:
		var t *Type_Context = nil
		if localctx != nil {
			t = localctx.(*Type_Context)
		}
		return p.Type__Sempred(t, predIndex)

	case 114:
		var t *BasicTypeContext = nil
		if localctx != nil {
			t = localctx.(*BasicTypeContext)
		}
		return p.BasicType_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *MojoParser) Pattern_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MojoParser) PostfixExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MojoParser) Type__Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MojoParser) BasicType_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 9:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
