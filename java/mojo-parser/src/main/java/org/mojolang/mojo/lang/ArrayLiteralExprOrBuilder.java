// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mojo/lang/expression.proto

package org.mojolang.mojo.lang;

public interface ArrayLiteralExprOrBuilder extends
    // @@protoc_insertion_point(interface_extends:mojo.lang.ArrayLiteralExpr)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   *&#47; position of first character belonging to the Expr
   * </pre>
   *
   * <code>.mojo.lang.Position start_position = 1;</code>
   */
  boolean hasStartPosition();
  /**
   * <pre>
   *&#47; position of first character belonging to the Expr
   * </pre>
   *
   * <code>.mojo.lang.Position start_position = 1;</code>
   */
  org.mojolang.mojo.lang.Position getStartPosition();
  /**
   * <pre>
   *&#47; position of first character belonging to the Expr
   * </pre>
   *
   * <code>.mojo.lang.Position start_position = 1;</code>
   */
  org.mojolang.mojo.lang.PositionOrBuilder getStartPositionOrBuilder();

  /**
   * <pre>
   *&#47; position of first character immediately after the Expr
   * </pre>
   *
   * <code>.mojo.lang.Position end_position = 2;</code>
   */
  boolean hasEndPosition();
  /**
   * <pre>
   *&#47; position of first character immediately after the Expr
   * </pre>
   *
   * <code>.mojo.lang.Position end_position = 2;</code>
   */
  org.mojolang.mojo.lang.Position getEndPosition();
  /**
   * <pre>
   *&#47; position of first character immediately after the Expr
   * </pre>
   *
   * <code>.mojo.lang.Position end_position = 2;</code>
   */
  org.mojolang.mojo.lang.PositionOrBuilder getEndPositionOrBuilder();

  /**
   * <pre>
   *&#47;
   * </pre>
   *
   * <code>int32 kind = 3;</code>
   */
  int getKind();

  /**
   * <pre>
   *&#47; Whether the Expr represents something directly written in source or
   * / it was implicitly generated by the type-checker.
   * </pre>
   *
   * <code>bool implicit = 4;</code>
   */
  boolean getImplicit();

  /**
   * <code>map&lt;string, string&gt; value = 10;</code>
   */
  int getValueCount();
  /**
   * <code>map&lt;string, string&gt; value = 10;</code>
   */
  boolean containsValue(
      java.lang.String key);
  /**
   * Use {@link #getValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getValue();
  /**
   * <code>map&lt;string, string&gt; value = 10;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getValueMap();
  /**
   * <code>map&lt;string, string&gt; value = 10;</code>
   */

  java.lang.String getValueOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <code>map&lt;string, string&gt; value = 10;</code>
   */

  java.lang.String getValueOrThrow(
      java.lang.String key);
}
